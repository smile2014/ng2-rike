{"version":3,"file":"ng2rike.all.js","sourceRoot":"","sources":["../src/ng2rike/protocol.ts","../src/ng2rike/event.ts","../src/ng2rike/status-collector.ts","../src/ng2rike/options.ts","../src/ng2rike/rike.ts","../src/ng2rike/status.component.ts","../src/ng2rike/field-error.ts","../src/ng2rike/error-collector.ts","../src/ng2rike/errors.component.ts","../src/ng2rike/event-source-provider.ts","../src/ng2rike/resource.ts","../src/ng2rike/resource-provider.ts","../src/ng2rike.ts","../src/ng2rike/options.spec.ts","../src/ng2rike/protocol.spec.ts","../src/ng2rike/rike.spec.ts","../src/ng2rike/rike-operation.spec.ts","../src/ng2rike/rike-target.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Response, RequestOptionsArgs, RequestOptions, Headers} from \"@angular/http\";\n\n/**\n * Error response.\n *\n * All error handlers operates over it.\n *\n * Typical error handler extends this interface with handler-specific fields and fills them.\n */\nexport interface ErrorResponse {\n\n    /**\n     * HTTP response.\n     */\n    response: Response;\n\n    /**\n     * Arbitrary error object.\n     *\n     * This field is filled when HTTP returns something different from `Response` object.\n     */\n    error?: any;\n\n}\n\n/**\n * REST-like operations protocol.\n *\n * It is used by REST-like operations to encode operation requests to HTTP, decode operation responses from HTTP,\n * and handle errors.\n *\n * `IN` is operation request type.\n * `OUT` is operation response type.\n */\nexport abstract class Protocol<IN, OUT> {\n\n    //noinspection JSMethodCanBeStatic\n    /**\n     * Prepares HTTP request.\n     *\n     * The `options` passed have at least `url` and `method` fields set.\n     *\n     * This method is called for each HTTP request before _writeRequest_ method. When default protocol is set for\n     * operation target, this method is called first on the default protocol, and then - on the operation protocol.\n     *\n     * @param options original HTTP request options.\n     *\n     * @returns modified HTTP request options to use further instead of original ones. Returns unmodified request\n     * `options` by default.\n     */\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        return options;\n    }\n\n    /**\n     * Writes operation request as HTTP request.\n     *\n     * This method is invoked only for HTTP request methods that expect request body.\n     *\n     * The `options` are the result of `prepareRequest` method invocation. It is expected the result options to\n     * contain a `body` field set.\n     *\n     * @param request operation request to encode\n     * @param options original HTTP request options.\n     *\n     * @return modified HTTP request options that will be used to perform actual request.\n     */\n    abstract writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs;\n\n    /**\n     * Reads operation response from HTTP response.\n     *\n     * @param response HTTP response.\n     *\n     * @returns operation response.\n     */\n    abstract readResponse(response: Response): OUT;\n\n    //noinspection JSMethodCanBeStatic\n    /**\n     * Handles HTTP error.\n     *\n     * Does not modify error response by default.\n     *\n     * @param error error response to handle.\n     *\n     * @returns error processing result.\n     */\n    handleError(error: ErrorResponse): ErrorResponse {\n        return error;\n    }\n\n    /**\n     * Creates protocol addon able to prepend protocol actions with specified functions.\n     *\n     * @return {ProtocolAddon<IN, OUT>} protocol addon.\n     */\n    prior(): ProtocolAddon<IN, OUT> {\n        return new CustomProtocolAddon<IN, OUT>(this, true);\n    }\n\n    /**\n     * Creates protocol addon able to append specified functions to protocol actions.\n     *\n     * @return {ProtocolAddon<IN, OUT>} protocol addon.\n     */\n    then(): ProtocolAddon<IN, OUT> {\n        return new CustomProtocolAddon<IN, OUT>(this, false);\n    }\n\n    /**\n     * Creates protocol modifier able to replace protocol actions with specified functions.\n     *\n     * @return {ProtocolMod<IN, OUT>} protocol modifier.\n     */\n    instead(): ProtocolMod<IN, OUT> {\n        return new CustomProtocolMod<IN, OUT>(this);\n    }\n\n}\n\n/**\n * Protocol addon. It is able to construct new protocol based on original one by adding specified actions to original\n * ones.\n */\nexport interface ProtocolAddon<IN, OUT> {\n\n    /**\n     * Constructs new protocol based on this one, which prepares requests with the given function.\n     *\n     * @param prepare a request preparation function invoked in addition to `Protocol.prepareRequest` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    prepareRequest(prepare: (options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which updates request options with the given function.\n     * The request will be written with original `Protocol.writeRequest()` method.\n     *\n     * @param update a function updating request options in addition to `Protocol.writeRequest()` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    updateRequest(update: (request: IN, options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which handles errors with the given function.\n     *\n     * @param handle a function handling errors in addition to `Protocol.handleError()` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    handleError(handle: (error: ErrorResponse) => ErrorResponse): Protocol<IN, OUT>;\n\n    /**\n     * Constructs new protocol based on original onw, which prepares requests and handles errors with corresponding\n     * `protocol` methods in addition to original ones.\n     *\n     * @param protocol {Protocol<IN, OUT>} new protocol.\n     */\n    apply(protocol: Protocol<any, any>): Protocol<IN, OUT>;\n\n}\n\nclass CustomProtocolAddon<IN, OUT> implements ProtocolAddon<IN, OUT> {\n\n    constructor(private _protocol: Protocol<IN, OUT>, private _prior: boolean) {\n    }\n\n    prepareRequest(prepare: (options: RequestOptionsArgs)=>RequestOptionsArgs): Protocol<IN, OUT> {\n        return new CustomProtocol<IN, OUT>(\n            this._prior\n                ? options => this._protocol.prepareRequest(prepare(options))\n                : options => prepare(this._protocol.prepareRequest(options)),\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            error => this._protocol.handleError(error));\n    }\n\n    updateRequest(update: (request: IN, options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT> {\n        return new CustomProtocol<IN, OUT>(\n            options => this._protocol.prepareRequest(options),\n            this._prior\n                ? (request, options) => this._protocol.writeRequest(request, update(request, options))\n                : (request, options) => update(request, this._protocol.writeRequest(request, options)),\n            response => this._protocol.readResponse(response),\n            error => this._protocol.handleError(error));\n    }\n\n    handleError(handle: (error: ErrorResponse) => ErrorResponse): Protocol<IN, OUT> {\n        return new CustomProtocol<IN, OUT>(\n            options => this._protocol.prepareRequest(options),\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            this._prior\n                ? error => this._protocol.handleError(handle(error))\n                : error => handle(this._protocol.handleError(error)));\n    }\n\n    apply(protocol: Protocol<any, any>): Protocol<IN, OUT> {\n        if (this._prior) {\n            return new CustomProtocol<IN, OUT>(\n                options => this._protocol.prepareRequest(protocol.prepareRequest(options)),\n                (request, options) => this._protocol.writeRequest(request, options),\n                response => this._protocol.readResponse(response),\n                error => this._protocol.handleError(protocol.handleError(error)));\n        }\n\n        return new CustomProtocol<IN, OUT>(\n            options => protocol.prepareRequest(this._protocol.prepareRequest(options)),\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            error => protocol.handleError(this._protocol.handleError(error)));\n    }\n\n}\n\n/**\n * Protocol modifier. It is able to construct new protocol based on original one by replacing protocol actions with\n * specified ones.\n */\nexport interface ProtocolMod<IN, OUT> {\n\n    /**\n     * Constructs new protocol based on original one, which prepares the request with the given function.\n     *\n     * @param prepare a request preparation function invoked instead of `Protocol.prepareRequest` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    prepareRequest(prepare: (options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which writes the request with the given function.\n     *\n     * @param write new request writer function.\n     *\n     * @return {Protocol<I, OUT>} new protocol.\n     */\n    writeRequest<I>(write: (request: I, options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<I, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which reads responses with the given function.\n     *\n     * @param read new response reader function.\n     *\n     * @return {Protocol<IN, O>} new protocol.\n     */\n    readResponse<O>(read: (response: Response) => O): Protocol<IN, O>;\n\n    /**\n     * Constructs new protocol based on original one, which handles errors with the given function.\n     *\n     * @param handle a function handling errors instead of `Protocol.handleError()` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    handleError(handle: (error: ErrorResponse) => ErrorResponse): Protocol<IN, OUT>;\n\n}\n\nclass CustomProtocolMod<IN, OUT> implements ProtocolMod<IN, OUT> {\n\n    constructor(private _protocol: Protocol<IN, OUT>) {\n    }\n\n    prepareRequest(prepare: (options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT> {\n        return new CustomProtocol<IN, OUT>(\n            prepare,\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            this._protocol.handleError);\n    }\n\n    writeRequest<I>(write: (request: I, options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<I, OUT> {\n        return new CustomProtocol<I, OUT>(\n            options => this._protocol.prepareRequest(options),\n            write,\n            response => this._protocol.readResponse(response),\n            this._protocol.handleError);\n    }\n\n    readResponse<O>(read: (response: Response) => O): Protocol<IN, O> {\n        return new CustomProtocol<IN, O>(\n            options => this._protocol.prepareRequest(options),\n            (request, options) => this._protocol.writeRequest(request, options),\n            read,\n            this._protocol.handleError);\n    }\n\n    handleError(handle: (error: ErrorResponse) => ErrorResponse): Protocol<IN, OUT> {\n        return new CustomProtocol<IN, OUT>(\n            options => this._protocol.prepareRequest(options),\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            handle);\n    }\n\n}\n\nclass CustomProtocol<IN, OUT> extends Protocol<IN, OUT> {\n\n    constructor(\n        private _prepareRequest: (options: RequestOptionsArgs) => RequestOptionsArgs,\n        private _writeRequest: (request: IN, options: RequestOptionsArgs) => RequestOptionsArgs,\n        private _readResponse: (response: Response) => OUT,\n        private _handleError: (error: ErrorResponse) => ErrorResponse) {\n        super();\n    }\n\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        return this._prepareRequest(options);\n    }\n\n    writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs {\n        return this._writeRequest(request, options);\n    }\n\n    readResponse(response: Response): OUT {\n        return this._readResponse(response);\n    }\n\n    handleError(error: ErrorResponse): ErrorResponse {\n        return this._handleError(error);\n    }\n\n}\n\nclass JsonProtocol<IN, OUT> extends Protocol<IN, OUT> {\n\n    writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs {\n\n        const opts = new RequestOptions(options).merge({body: JSON.stringify(request)});\n\n        let headers: Headers;\n\n        if (opts.headers) {\n            headers = opts.headers;\n        } else {\n            opts.headers = headers = new Headers();\n        }\n        headers.set(\"Content-Type\", \"application/json\");\n\n        return opts;\n    }\n\n    readResponse(response: Response): OUT {\n        return response.json();\n    }\n\n}\n\n/**\n * JSON protocol.\n *\n * Sends and receives arbitrary data as JSON over HTTP.\n *\n * @type {Protocol<any>}\n */\nexport const JSON_PROTOCOL: Protocol<any, any> = new JsonProtocol<any, any>();\n\n/**\n * Returns JSON protocol.\n *\n * Sends and receives the data of the given type as JSON over HTTP.\n */\nexport const jsonProtocol: (<IN, OUT>() => Protocol<IN, OUT>) = () => JSON_PROTOCOL;\n\nclass HttpProtocol extends Protocol<any, Response> {\n\n    writeRequest(request: any, options: RequestOptionsArgs): RequestOptionsArgs {\n        return new RequestOptions(options).merge({body: request});\n    }\n\n    readResponse(response: Response): Response {\n        return response;\n    }\n\n}\n\n/**\n * HTTP protocol.\n *\n * The request type is any. It is used as request body.\n *\n * @type {Protocol<any, Response>}\n */\nexport const HTTP_PROTOCOL: Protocol<any, Response> = new HttpProtocol();\n","import {EventEmitter, Type} from \"@angular/core\";\nimport {RikeTarget, RikeOperation} from \"./rike\";\nimport {ErrorResponse} from \"./protocol\";\n\n/**\n * REST-like resource access event emitter.\n *\n * Multiple instances of this class could be injected into controller or service to listen for Rike events.\n *\n * Use [provideEventSource] function to register event sources.\n */\nexport abstract class RikeEventSource {\n\n    /**\n     * Rike events emitter.\n     */\n    abstract readonly rikeEvents: EventEmitter<RikeEvent>;\n\n}\n\n/**\n * Basic REST-like resource access event.\n *\n * Such events are emitted by [Rike event sources][RikeEventsSource].\n */\nexport abstract class RikeEvent {\n\n    /**\n     * Operation target.\n     */\n    get target(): RikeTarget<any, any> {\n        return this.operation.target;\n    }\n\n    /**\n     * Rike operation.\n     */\n    abstract readonly operation: RikeOperation<any, any>;\n\n    /**\n     * Whether an operation is complete.\n     *\n     * `true` on error or successful completion event.\n     */\n    abstract readonly complete: boolean;\n\n    /**\n     * The error occurred.\n     *\n     * `undefined` if this is not an error event.\n     */\n    abstract readonly error?: any;\n\n    /**\n     * Error response.\n     */\n    abstract readonly errorResponse?: ErrorResponse;\n\n    /**\n     * Whether this is an operation cancel.\n     *\n     * @return {boolean} `true` if operation cancelled, or `false` otherwise.\n     */\n    get cancel(): boolean {\n        return false;\n    }\n\n    /**\n     * The operation that cancelled this operation.\n     */\n    abstract readonly cancelledBy?: RikeOperationEvent;\n\n    /**\n     * Operation result, if any.\n     */\n    abstract readonly result?: any;\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is started.\n */\nexport class RikeOperationEvent extends RikeEvent {\n\n    constructor(private _operation: RikeOperation<any, any>) {\n        super();\n    }\n\n    get operation(): RikeOperation<any, any> {\n        return this._operation;\n    }\n\n    get complete(): boolean {\n        return false;\n    }\n\n    get error(): undefined {\n        return undefined;\n    }\n\n    get errorResponse(): undefined {\n        return undefined;\n    }\n\n    get cancelledBy(): undefined {\n        return undefined;\n    }\n\n    get result(): undefined {\n        return undefined;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is successfully completed.\n */\nexport class RikeSuccessEvent extends RikeEvent {\n\n    constructor(private _operation: RikeOperation<any, any>, private _result: any) {\n        super();\n    }\n\n    get operation(): RikeOperation<any, any> {\n        return this._operation;\n    }\n\n    get complete(): boolean {\n        return true;\n    }\n\n    get error(): undefined {\n        return undefined;\n    }\n\n    get errorResponse(): undefined {\n        return undefined;\n    }\n\n    get cancelledBy(): undefined {\n        return undefined;\n    }\n\n    get result(): any {\n        return this._result;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is failed.\n *\n * An object of this type is also reported as an error when some internal exception occurs.\n */\nexport abstract class RikeErrorEvent extends RikeEvent {\n\n    constructor(private _operation: RikeOperation<any, any>, private _error: any) {\n        super();\n    }\n\n    get operation(): RikeOperation<any, any> {\n        return this._operation;\n    }\n\n    get complete(): boolean {\n        return true;\n    }\n\n    get error(): any {\n        return this._error;\n    }\n\n    get errorResponse(): ErrorResponse | undefined {\n        return undefined;\n    }\n\n    get cancelledBy(): RikeOperationEvent | undefined {\n        return undefined;\n    }\n\n    get result(): undefined {\n        return undefined;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource caused an exception.\n *\n * An object of this type is reported as an error.\n */\nexport class RikeExceptionEvent extends RikeErrorEvent {\n\n    constructor(operation: RikeOperation<any, any>, error: any, private _errorResponse?: ErrorResponse) {\n        super(operation, error);\n    }\n\n    get errorResponse(): ErrorResponse | undefined {\n        return this._errorResponse;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource returned error.\n */\nexport class RikeErrorResponseEvent extends RikeErrorEvent {\n\n    constructor(operation: RikeOperation<any, any>, private _errorResponse: ErrorResponse) {\n        super(operation, _errorResponse.error || _errorResponse);\n    }\n\n    get errorResponse(): ErrorResponse {\n        return this._errorResponse;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is cancelled.\n */\nexport class RikeCancelEvent extends RikeErrorEvent {\n\n    constructor(operation: RikeOperation<any, any>, private _cancelledBy?: RikeOperationEvent) {\n        super(operation, _cancelledBy || \"cancel\");\n    }\n\n    get error(): RikeOperationEvent | undefined {\n        return this.cancelledBy;\n    }\n\n    get cancel(): boolean {\n        return true;\n    }\n\n    get cancelledBy(): RikeOperationEvent | undefined {\n        return this._cancelledBy;\n    }\n\n}\n","import {EventEmitter, Injectable, Optional, Inject} from \"@angular/core\";\nimport {RikeTarget} from \"./rike\";\nimport {RikeEvent, RikeEventSource} from \"./event\";\n\n/**\n * Rike operation status labels.\n *\n * Each field corresponds to particular status. The value of this field could be either label, or function returning\n * label, accepting Rike operations target as the only argument.\n *\n * When the label is absent the corresponding status won't be displayed.\n *\n * @param <L> a type of status labels.\n */\nexport interface StatusLabels<L> {\n\n    /**\n     * Processing label. It is applied when operation is initiated, but not completed yet.\n     */\n    processing?: L | ((target: RikeTarget<any, any>) => L);\n\n    /**\n     * Failure label. It is applied when operation failed due to error.\n     */\n    failed?: L | ((target: RikeTarget<any, any>) => L);\n\n    /**\n     * Cancellation label. It is applied when operation is cancelled.\n     */\n    cancelled?: L | ((target: RikeTarget<any, any>) => L);\n\n    /**\n     * Success label. It is applied when operation succeed.\n     */\n    succeed?: L | ((target: RikeTarget<any, any>) => L);\n\n}\n\n/**\n * A map of Rike operations status labels.\n *\n * Each key corresponds to particular operation name, and it value is status labels to apply to this operation.\n *\n * If labels for the given operation is not specified, or the is no label for the operation status, the label will be\n * searched under the `\"*\"` key.\n *\n * @param <L> a type of status labels.\n */\nexport interface StatusLabelMap<L> {\n    [operation: string]: StatusLabels<L>;\n}\n\n/**\n * Default status label.\n */\nexport type DefaultStatusLabel = string | {\n\n    /**\n     * Status identifier.\n     */\n    id?: string;\n\n    /**\n     * Status message.\n     */\n    message: string;\n\n    /**\n     * CSS class to indicate this status.\n     */\n    cssClass?: string;\n\n}\n\n/**\n * Default map of Rike operations status labels.\n *\n * Default status labels are strings.\n */\nexport const DEFAULT_STATUS_LABELS: StatusLabelMap<DefaultStatusLabel> = {\n    \"*\": {\n        processing: {\n            id: \"processing\",\n            message: \"Processing\"\n        },\n        failed: {\n            id: \"failed\",\n            message: \"Error\"\n        },\n        cancelled: {\n            id: \"cancelled\",\n            message: \"Cancelled\"\n        }\n    },\n    \"load\": {\n        processing: {\n            id: \"loading\",\n            message: \"Loading\",\n        },\n    },\n    \"send\": {\n        processing: {\n            id: \"sending\",\n            message: \"Sending\"\n        },\n        succeed: {\n            id: \"sent\",\n            message: \"Sent\"\n        },\n    },\n    \"read\": {\n        processing: {\n            id: \"loading\",\n            message: \"Loading\"\n        },\n    },\n    \"create\": {\n        processing: {\n            id: \"creating\",\n            message: \"Creating\"\n        },\n        succeed: {\n            id: \"created\",\n            message: \"Created\"\n        },\n    },\n    \"update\": {\n        processing: {\n            id: \"updating\",\n            message: \"Updating\"\n        },\n        succeed: {\n            id: \"updated\",\n            message: \"Updated\"\n        }\n    },\n    \"delete\": {\n        processing: {\n            id: \"deleting\",\n            message: \"Deleting\"\n        },\n        succeed: {\n            id: \"deleted\",\n            message: \"Deleted\"\n        },\n    },\n};\n\n/**\n * Rike operations status collecting service.\n *\n * It collects statuses of all available [Rike event sources][RikeEventSource].\n *\n * This service is registered automatically along with every event source by `provideEventSource()` method.\n * But unlike event sources it is not a multi-provider.\n *\n * An instance of this class could be created on its own. Then it is necessary to subscribe it on Rike events with\n * `subscribeOn` method.\n *\n * It is possible to read statuses and string labels from the service itself. Alternatively a view can be created\n * to read labels of arbitrary type.\n */\n@Injectable()\nexport class StatusCollector {\n\n    private _views: {[id: string]: StatusViewImpl<any>} = {};\n    private _targetStatuses: {[targetId: string]: TargetStatus} = {};\n    private _defaultView?: StatusViewImpl<DefaultStatusLabel>;\n    private _viewIdSeq = 0;\n\n    constructor(@Inject(RikeEventSource) @Optional() eventSources?: RikeEventSource[]) {\n        if (eventSources) {\n            for (let esrc of eventSources) {\n                this.subscribeOn(esrc.rikeEvents);\n            }\n        }\n    }\n\n    /**\n     * Current status labels.\n     *\n     * @return {DefaultStatusLabel[]} array of default labels.\n     */\n    get labels(): DefaultStatusLabel[] {\n        return this._defaultView ? this._defaultView.labels : [];\n    }\n\n    /**\n     * Whether some operation is in process.\n     */\n    get processing(): boolean {\n        return this._defaultView && this._defaultView.processing || false;\n    }\n\n    /**\n     * Whether some operation failed.\n     */\n    get failed(): boolean {\n        return this._defaultView && this._defaultView.failed || false;\n    }\n\n    /**\n     * Whether some operation cancelled.\n     */\n    get cancelled(): boolean {\n        return this._defaultView && this._defaultView.cancelled || false;\n    }\n\n    /**\n     * Whether some operation succeed.\n     */\n    get succeed(): boolean {\n        return this._defaultView && this._defaultView.succeed || false;\n    }\n\n    /**\n     * Subscribes this collector on the given Rike events emitter.\n     *\n     * @param events Rike events emitter to subscribe on.\n     */\n    subscribeOn(events: EventEmitter<RikeEvent>) {\n        events.subscribe((event: RikeEvent) => this.applyEvent(event));\n    }\n\n    /**\n     * Constructs a Rike operations status view.\n     *\n     * When the view is no longer needed a {{StatusView.close}} method should be called to release resources\n     * associated with it.\n     *\n     * @param <L> a type of status labels.\n     * @param labels a map of Rike operations status labels to use by this view.\n     *\n     * @return {StatusView<L>} new status view.\n     */\n    view<L>(labels: StatusLabelMap<L>): StatusView<L> {\n        return this.addView(\"\" + ++this._viewIdSeq, labels);\n    }\n\n    private addView<L>(id: string, labels: StatusLabelMap<L>): StatusViewImpl<L> {\n\n        const view = new StatusViewImpl<L>(this._views, this._targetStatuses, id).withLabels(labels);\n\n        this._views[id] = view;\n\n        return view;\n    }\n\n    private applyEvent(event: RikeEvent) {\n        this.initDefaultView(event);\n        this.updateTargetStatuses(event);\n        this.resetViews();\n    }\n\n    private initDefaultView(event: RikeEvent) {\n        if (!this._defaultView) {\n            this._defaultView = this.addView(\"default\", event.target.rike.options.defaultStatusLabels);\n        }\n    }\n\n    private updateTargetStatuses(event: RikeEvent) {\n\n        const uniqueId = event.target.uniqueId;\n\n        if (!event.complete) {\n            this._targetStatuses[uniqueId] = {\n                start: event,\n            }\n        } else {\n\n            const targetStatus = this._targetStatuses[uniqueId];\n\n            if (!targetStatus) {\n                this._targetStatuses[uniqueId] = {start: event, end: event};\n            } else {\n                targetStatus.end = event;\n            }\n        }\n    }\n\n    private resetViews() {\n        for (let id in this._views) {\n            if (this._views.hasOwnProperty(id)) {\n                this._views[id].reset();\n            }\n        }\n    }\n\n}\n\n/**\n * Rike operations status view.\n *\n * It could be created by {{StatusCollector.view}} and will be updated with new statuses until the `close()`\n * method call.\n *\n * @param <L> a type of status labels.\n */\nexport interface StatusView<L> {\n\n    /**\n     * Current status labels.\n     *\n     * @return {L[]} array of status labels.\n     */\n    readonly labels: L[];\n\n    /**\n     * Whether some operation is in process.\n     */\n    readonly processing: boolean;\n\n    /**\n     * Whether some operation failed.\n     */\n    readonly failed: boolean;\n\n    /**\n     * Whether some operation cancelled.\n     */\n    readonly cancelled: boolean\n\n    /**\n     * Whether some operation succeed.\n     */\n    readonly succeed: boolean;\n\n    /**\n     * Registers new operation status labels.\n     *\n     * @param labels a map of operation status labels.\n     */\n    withLabels(labels: StatusLabelMap<L>): this;\n\n    /**\n     * Registers new status labels for the given operation.\n     *\n     * @param operation target operation name.\n     * @param labels operation status labels.\n     */\n    withOperationLabels(operation: string, labels: StatusLabels<L>): this;\n\n    /**\n     * Closes the view.\n     *\n     * This method should be called when the view is no longer needed. After it is called the view won't be updated\n     * any more.\n     */\n    close(): void;\n\n}\n\nclass StatusViewImpl<L> implements StatusView<L> {\n\n    private _labels: StatusLabelMap<L> = {};\n    private _combined?: CombinedStatus<L>;\n\n    constructor(\n        private _views: {[id: string]: StatusViewImpl<any>},\n        private _targetStatuses: {[targetId: string]: TargetStatus},\n        private _id: string) {\n    }\n\n    get labels(): L[] {\n        return this.combined && this.combined.labels || [];\n    }\n\n    get processing(): boolean {\n        return this.combined && this.combined.processing || false;\n    }\n\n    get failed(): boolean {\n        return this.combined && this.combined.failed || false;\n    }\n\n    get cancelled(): boolean {\n        return this.combined && this.combined.cancelled || false;\n    }\n\n    get succeed(): boolean {\n        return this.combined && this.combined.succeed || false;\n    }\n\n    withLabels(labels: StatusLabelMap<L>): this {\n        for (let operation in labels) {\n            if (labels.hasOwnProperty(operation)) {\n                this.withOperationLabels(operation, labels[operation]);\n            }\n        }\n        return this;\n    }\n\n    withOperationLabels(operation: string, labels: StatusLabels<L>): this {\n        this._combined = undefined;\n        this._labels[operation] = labels!;\n        return this;\n    }\n\n    reset() {\n        this._combined = undefined;\n    }\n\n    close() {\n        delete this._views[this._id];\n    }\n\n    private get combined(): CombinedStatus<L> | undefined {\n        if (this._combined) {\n            return this._combined;\n        }\n\n        let combined: CombinedStatus<L> | undefined = undefined;\n\n        for (let targetId in this._targetStatuses) {\n            if (this._targetStatuses.hasOwnProperty(targetId)) {\n\n                const targetStatus: TargetStatus = this._targetStatuses[targetId]!;\n\n                if (!targetStatus) {\n                    continue;\n                }\n\n                combined = combineLabels(combined, this.labelFor(targetStatus));\n            }\n        }\n\n        return this._combined = combined;\n    }\n\n    private labelFor(status: TargetStatus): StatusLabel<L> | undefined {\n        return labelOf(status, this._labels[status.start.operation.name]) || labelOf(status, this._labels[\"*\"]);\n    }\n\n}\n\ninterface TargetStatus {\n    start: RikeEvent;\n    end?: RikeEvent;\n}\n\ninterface StatusLabel<L> {\n    label: L;\n    processing?: boolean;\n    failed?: boolean;\n    cancelled?: boolean;\n    succeed?: boolean;\n}\n\ninterface CombinedStatus<L> {\n    targets?: RikeTarget<any, any>;\n    labels: L[];\n    processing?: boolean;\n    failed?: boolean;\n    cancelled?: boolean;\n    succeed?: boolean;\n}\n\nfunction labelOf<L>(status: TargetStatus, labels?: StatusLabels<L>): StatusLabel<L> | undefined {\n    if (!labels) {\n        return undefined;\n    }\n\n    const end = status.end;\n\n    if (!end) {\n        const processing = evalLabel(status, labels.processing);\n        return processing && {label: processing, processing: true};\n    }\n    if (end.cancel) {\n        const cancelled = evalLabel(status, labels.cancelled);\n        return cancelled && {label: cancelled, cancelled: true};\n    }\n    if (end.error) {\n        const failed = evalLabel(status, labels.failed);\n        return failed && {label: failed, failed: true};\n    }\n\n    const succeed = evalLabel(status, labels.succeed);\n    return succeed && {label: succeed, succeed: true};\n}\n\nfunction evalLabel<L>(status: TargetStatus, label?: L | ((target: RikeTarget<any, any>) => L)): L | undefined {\n    if (!label) {\n        return undefined;\n    }\n    if (typeof label !== \"function\") {\n        return label;\n    }\n\n    const labelFn = label as ((target: RikeTarget<any, any>) => L);\n\n    return labelFn(status.start.target);\n}\n\nfunction combineLabels<L>(combined?: CombinedStatus<L>, label?: StatusLabel<L>): CombinedStatus<L> | undefined {\n    if (!label) {\n        return combined;\n    }\n\n    const lbl = label.label;\n\n    if (!combined) {\n        return {\n            labels: [lbl],\n            processing: label.processing,\n            failed: label.failed,\n            cancelled: label.cancelled,\n            succeed: label.succeed,\n        }\n    }\n\n    combined.processing = combined.processing || label.processing;\n    combined.failed = combined.failed || label.failed;\n    combined.cancelled = combined.cancelled || label.cancelled;\n    combined.succeed = combined.succeed || label.succeed;\n\n    for (let l of combined.labels) {\n        if (l === lbl) {\n            return combined;\n        }\n    }\n\n    combined.labels.push(lbl);\n\n    return combined;\n}\n","import {Protocol, HTTP_PROTOCOL} from \"./protocol\";\nimport {StatusLabels, DEFAULT_STATUS_LABELS, DefaultStatusLabel} from \"./status-collector\";\n/**\n * Constructs URL relative to base URL.\n *\n * @param baseUrl base URL.\n * @param url URL.\n *\n * @returns {string} If `baseUrl` is not specified, or empty string, or `url` is absolute, then returns unmodified `url`.\n * Otherwise concatenates `baseUrl` and `url` separating them by `/` sign.\n */\nexport function relativeUrl(baseUrl: string | undefined, url: string): string {\n    if (!baseUrl) {\n        return url;\n    }\n    if (url[0] === \"/\") {\n        return url;// Absolute URL\n    }\n    if (url.match(/^(\\w*:)?\\/\\//)) {\n        return url;// Full URL\n    }\n    return baseUrl + \"/\" + url;\n}\n\n/**\n * Global Rike options interface.\n */\nexport interface RikeOptionsArgs {\n\n    /**\n     * Base URL of all relative URLs.\n     *\n     * All relative Rike request URLs will be resolved against this one.\n     */\n    readonly baseUrl?: string;\n\n    /**\n     * Default operations protocol.\n     *\n     * If not specified then `HTTP_PROTOCOL` will be used.\n     */\n    readonly defaultProtocol?: Protocol<any, any>;\n\n    /**\n     * A map of Rike operations status labels to use by default.\n     *\n     * If not specified the `DEFAULT_STATUS_LABELS` will be used.\n     *\n     * Default status labels are always of type {{DefaultStatusLabel}}.\n     */\n    readonly defaultStatusLabels?: {[operation: string]: StatusLabels<DefaultStatusLabel>};\n\n}\n\n/**\n * Global Rike options.\n *\n * To overwrite global options add a provider for {{BaseRikeOptions}} instance with {{RikeOptions}} as token:\n * ```ts\n * bootstrap(AppComponent, {provide: RikeOptions, new BaseRikeOptions({baseUrl: \"/rike\"})});\n * ```\n */\nexport abstract class RikeOptions implements RikeOptionsArgs {\n\n    abstract readonly baseUrl?: string;\n\n    abstract readonly defaultProtocol: Protocol<any, any>;\n\n    abstract defaultStatusLabels: {[operation: string]: StatusLabels<DefaultStatusLabel>};\n\n    /**\n     * Constructs URL relative to `baseUrl`.\n     *\n     * @param url URL\n     *\n     * @returns {string} resolved URL.\n     */\n    relativeUrl(url: string): string {\n        return relativeUrl(this.baseUrl, url);\n    }\n\n}\n\n/**\n * Basic [global resource options][RikeOptions] implementation.\n *\n * Can be used to override the global resource options.\n */\nexport class BaseRikeOptions extends RikeOptions {\n\n    private _baseUrl?: string;\n    private _defaultProtocol: Protocol<any, any> = HTTP_PROTOCOL;\n    private _defaultStatusLabels = DEFAULT_STATUS_LABELS;\n\n    constructor(opts?: RikeOptionsArgs) {\n        super();\n        if (opts) {\n            this._baseUrl = opts.baseUrl;\n            if (opts.defaultProtocol) {\n                this._defaultProtocol = opts.defaultProtocol;\n            }\n            if (opts.defaultStatusLabels) {\n                this._defaultStatusLabels = opts.defaultStatusLabels;\n            }\n        }\n    }\n\n    get baseUrl(): string | undefined {\n        return this._baseUrl;\n    }\n\n    get defaultProtocol(): Protocol<any, any> {\n        return this._defaultProtocol;\n    }\n\n    get defaultStatusLabels(): {[operation: string]: StatusLabels<DefaultStatusLabel>} {\n        return this._defaultStatusLabels;\n    }\n\n}\n\n/**\n * Default resource options.\n *\n * @type {RikeOptions}\n */\nexport const DEFAULT_RIKE_OPTIONS: RikeOptions = new BaseRikeOptions();\n","import {Injectable, Optional, EventEmitter} from \"@angular/core\";\nimport {\n    Request, RequestOptionsArgs, Response, Http, RequestMethod, RequestOptions,\n    ResponseOptions, ResponseType\n} from \"@angular/http\";\nimport {Observable, Observer, Subscription} from \"rxjs/Rx\";\nimport {\n    RikeEvent,\n    RikeErrorEvent,\n    RikeSuccessEvent,\n    RikeOperationEvent,\n    RikeCancelEvent,\n    RikeEventSource, RikeErrorResponseEvent, RikeExceptionEvent\n} from \"./event\";\nimport {RikeOptions, DEFAULT_RIKE_OPTIONS, relativeUrl} from \"./options\";\nimport {Protocol, HTTP_PROTOCOL, jsonProtocol, ErrorResponse} from \"./protocol\";\n\nconst REQUEST_METHODS: {[name: string]: number} = {\n    \"GET\": RequestMethod.Get,\n    \"POST\": RequestMethod.Post,\n    \"PUT\": RequestMethod.Put,\n    \"DELETE\": RequestMethod.Delete,\n    \"OPTIONS\": RequestMethod.Options,\n    \"HEAD\": RequestMethod.Head,\n    \"PATCH\": RequestMethod.Patch,\n};\n\nexport function requestMethod(method: string | RequestMethod): RequestMethod {\n    if (typeof method !== \"string\") {\n        return method;\n    }\n\n    const result = REQUEST_METHODS[method.toUpperCase()];\n\n    if (result != null) {\n        return result;\n    }\n\n    throw new Error(\"Unsupported HTTP request method: \" + method);\n}\n\n/**\n * REST-like resource operations service.\n *\n * This service can be injected to other services or components.\n *\n * It basically mimics the `Http` interface, but also honors [global Rike options][RikeOptions].\n *\n * It can also be used to perform operations on particular targets.\n */\n@Injectable()\nexport class Rike implements RikeEventSource {\n\n    private readonly _options: RikeOptions;\n    private readonly _rikeEvents = new EventEmitter<RikeEvent>();\n    private readonly _internals: RikeInternals;\n    private _uniqueIdSeq = 0;\n\n    constructor(private _http: Http, defaultHttpOptions: RequestOptions, @Optional() _options?: RikeOptions) {\n        this._options = _options || DEFAULT_RIKE_OPTIONS;\n        this._internals = {\n            defaultHttpOptions,\n            generateUniqueId: () => {\n                return \"\" + ++this._uniqueIdSeq;\n            },\n            request: (request: string | Request, options?: RequestOptionsArgs) => {\n                options = this.updateRequestOptions(options);\n                if (typeof request === \"string\") {\n                    request = this.options.relativeUrl(request);\n                }\n                return this._http.request(request, options);\n            },\n            get: (url: string, options?: RequestOptionsArgs) =>\n                this._http.get(\n                    this.options.relativeUrl(url),\n                    this.updateRequestOptions(options)),\n            post: (url: string, body: any, options?: RequestOptionsArgs) =>\n                this._http.post(\n                    this.options.relativeUrl(url),\n                    body,\n                    this.updateRequestOptions(options)),\n            put: (url: string, body: any, options?: RequestOptionsArgs) =>\n                this._http.put(\n                    this.options.relativeUrl(url),\n                    body,\n                    this.updateRequestOptions(options)),\n            \"delete\": (url: string, options?: RequestOptionsArgs) =>\n                this._http.delete(\n                    this.options.relativeUrl(url),\n                    this.updateRequestOptions(options)),\n            patch: (url: string, body: any, options?: RequestOptionsArgs) =>\n                this._http.patch(\n                    this.options.relativeUrl(url),\n                    body,\n                    this.updateRequestOptions(options)),\n            head: (url: string, options?: RequestOptionsArgs) =>\n                this._http.head(\n                    this.options.relativeUrl(url),\n                    this.updateRequestOptions(options)),\n        }\n    }\n\n    /**\n     * Global REST-like resource access options.\n     *\n     * @returns {RikeOptions} either pre-configured, or [default][DEFAULT_RIKE_OPTIONS] options.\n     */\n    get options(): RikeOptions {\n        return this._options;\n    }\n\n    /**\n     * Default Rike protocol.\n     *\n     * @return {Protocol<any, any>} either {{RikeOptions.defaultProtocol}}, or `HTTP_PROTOCOL`.\n     */\n    get defaultProtocol(): Protocol<any, any> {\n        return this.options.defaultProtocol || HTTP_PROTOCOL;\n    }\n\n    /**\n     * All REST-like resource operation events emitter.\n     *\n     * @returns {EventEmitter<RikeEvent>}\n     */\n    get rikeEvents(): EventEmitter<RikeEvent> {\n        return this._rikeEvents;\n    }\n\n    request(request: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.request(request, this.prepareRequest(options)));\n    }\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.get(url, this.prepareRequest(options)));\n    }\n\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.post(url, body, this.prepareRequest(options)));\n    }\n\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.put(url, body, this.prepareRequest(options)));\n    }\n\n    //noinspection ReservedWordAsName\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.delete(url, this.prepareRequest(options)));\n    }\n\n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.patch(url, body, this.prepareRequest(options)));\n    }\n\n    head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.head(url, this.prepareRequest(options)));\n    }\n\n    /**\n     * Constructs operation target which operates over `HTTP_PROTOCOL`.\n     *\n     * Arbitrary value can be used as a request body.\n     *\n     * @param target arbitrary target value.\n     *\n     * @returns {RikeTarget} new operation target.\n     */\n    target(target: any): RikeTarget<any, Response>;\n\n    /**\n     * Constructs operations target which operates over the given protocol.\n     *\n     * @param target arbitrary target value.\n     * @param protocol operations protocol.\n     *\n     * @return {RikeTarget<I, O>} new operations target.\n     */\n    target<I, O>(target: any, protocol: Protocol<I, O>): RikeTarget<I, O>;\n\n    target(target: any, protocol?: Protocol<any, any>): RikeTarget<any, any> {\n\n        const rikeTarget = new RikeTargetImpl<any, any>(\n            this,\n            this._internals,\n            target,\n            protocol ? protocol.prior().apply(this.defaultProtocol) : this.defaultProtocol);\n\n        rikeTarget.rikeEvents.subscribe(\n            (event: RikeEvent) => this._rikeEvents.emit(event),\n            (error: any) => this._rikeEvents.error(error),\n            () => this._rikeEvents.complete());\n\n        return rikeTarget;\n    }\n\n    /**\n     * Constructs operations target which operates over [JSON protocol][jsonProtocol].\n     *\n     * @param target arbitrary target value.\n     *\n     * @return {RikeTarget<I, O>} new operations target.\n     */\n    json<I, O>(target: any): RikeTarget<I, O> {\n        return this.target(target, jsonProtocol<I, O>());\n    }\n\n    /**\n     * Updates HTTP request options accordingly to global _options_.\n     *\n     * @param options HTTP request options to update.\n     *\n     * @returns {RequestOptionsArgs} either new HTTP options instance, or the _options_ argument if no modifications\n     * done.\n     */\n    protected updateRequestOptions(options?: RequestOptionsArgs): RequestOptionsArgs | undefined {\n        if (!options) {\n            return options;\n        }\n        if (options.url != null) {\n\n            var newUrl = this._options.relativeUrl(options.url);\n\n            if (newUrl !== options.url) {\n                options = {\n                    url: newUrl,\n                    method: options.method,\n                    search: options.search,\n                    headers: options.headers,\n                    body: options.body,\n                    withCredentials: options.withCredentials,\n                }\n            }\n        }\n\n        return options;\n    }\n\n    private prepareRequest(options?: RequestOptionsArgs) {\n        return this.defaultProtocol.prepareRequest(options || {});\n    }\n\n    /**\n     * Wraps the HTTP response observable for the given operation to make it handle errors.\n     *\n     * @param response response observer to wrap.\n     *\n     * @returns {Observable<Response>} response observer wrapper.\n     */\n    private handleErrors(response: Observable<Response>): Observable<Response> {\n        return new Observable<Response>((responseObserver: Observer<Response>) => {\n            response.subscribe(\n                httpResponse => responseObserver.next(httpResponse),\n                error => responseObserver.error(this.defaultProtocol.handleError(toErrorResponse(error))),\n                () => responseObserver.complete());\n        });\n    }\n\n}\n\nfunction toErrorResponse(error: any): ErrorResponse {\n    if (error instanceof Response) {\n        return {\n            response: error,\n            error: error.status,\n        };\n    }\n    return syntheticResponse(error);\n}\n\nfunction syntheticResponse(error: any): ErrorResponse {\n\n    const statusText = error != null ? error.toString() : null;\n\n    return {\n        response: new Response(new ResponseOptions({\n            type: ResponseType.Error,\n            status: 500,\n            statusText: statusText || \"Unknown error\"\n        })),\n        error,\n    };\n}\n\n/**\n * REST-like operations target.\n *\n * Operation targets are created using [Rike.target] method. The actual operations should be created first with\n * `operation` method.\n *\n * Only one operation can be performed on a target at a time. Whenever a new operation on the same target is initiated,\n * the previous one is cancelled.\n *\n * `IN` is a request type this target's operations accept by default.\n * `OUT` is a response type this target's operations return by default.\n */\nexport abstract class RikeTarget<IN, OUT> implements RikeEventSource {\n\n    /**\n     * `Rike` service instance.\n     */\n    abstract readonly rike: Rike;\n\n    /**\n     * Operation target value.\n     *\n     * This is the value passed to the [Rike.target] method.\n     */\n    abstract readonly target: any;\n\n    /**\n     * Unique target identifier.\n     */\n    abstract readonly uniqueId: string;\n\n    /**\n     * A currently evaluating operation.\n     *\n     * `undefined` if no operations currently in process, i.e. operation not started, cancelled, or completed, either\n     * successfully or with error.\n     */\n    abstract readonly currentOperation?: RikeOperation<any, any>;\n\n    /**\n     * An emitter of events for operations performed on this target.\n     */\n    abstract readonly rikeEvents: EventEmitter<RikeEvent>;\n\n    /**\n     * An operations protocol to use by default.\n     *\n     * This is a protocol based on the one passed to [Rike.target] method, which honors {{Rike.defaultProtocol}}.\n     */\n    abstract readonly protocol: Protocol<IN, OUT>;\n\n    /**\n     * Base URL to use by operations.\n     */\n    abstract readonly baseUrl?: string;\n\n    /**\n     * Assigns base URL to use by operations.\n     *\n     * This URL can be absolute, or relative to the one specified in the [global options][RikeOptions.baseUrl].\n     *\n     * @param url new base URL or `undefined` to reset it.\n     */\n    abstract withBaseUrl(url?: string): this;\n\n    /**\n     * Constructs an operation on this target which operates over the target's `protocol`.\n     *\n     * @param name operation name.\n     *\n     * @return {RikeOperation<IN, OUT>} new operation.\n     */\n    abstract operation(name: string): RikeOperation<IN, OUT>;\n\n    /**\n     * Constructs an operation on this target which operates over the given protocol.\n     *\n     * @param name operation name.\n     * @param protocol operation protocol.\n     *\n     * @return {RikeOperation<I, O>} new operation.\n     */\n    abstract operation<I, O>(name: string, protocol: Protocol<I, O>): RikeOperation<I, O>;\n\n    /**\n     * Constructs JSON operation on this target.\n     *\n     * It operates over [JSON protocol][jsonProtocol].\n     *\n     * @param name operation name.\n     *\n     * @return {RikeOperation<T, T>} new operation.\n     */\n    json<I, O>(name: string): RikeOperation<I, O> {\n        return this.operation(name, jsonProtocol<I, O>());\n    }\n\n    /**\n     * Cancels current operation, if any.\n     *\n     * @return `true` if operation cancelled, or `false` if there is no operation to cancel.\n     */\n    abstract cancel(): boolean;\n\n}\n\n//noinspection ReservedWordAsName\n/**\n * REST-like resource operation.\n *\n * It operates over the given protocol and emits events.\n *\n * To initiate operation just call any of the HTTP access methods. Note that operation always belongs to its target\n * and thus two operations could not be initiated simultaneously.\n *\n * `IN` is a type of requests this operation accepts.\n * `OUT` is a type of responses this operation produces.\n */\nexport abstract class RikeOperation<IN, OUT> {\n\n    /**\n     * Operation target.\n     */\n    abstract readonly target: RikeTarget<any, any>;\n\n    /**\n     * Operation name.\n     */\n    abstract readonly name: string;\n\n    /**\n     * Operation protocol.\n     *\n     * This protocol is based on the one passed to the [RikeTarget.operation], but also honors the default protocol\n     * set for target.\n     */\n    abstract readonly protocol: Protocol<IN, OUT>;\n\n    abstract readonly options: RequestOptions;\n\n    abstract withOptions(options?: RequestOptionsArgs): this;\n\n    get url(): string | undefined {\n        return this.options.url;\n    }\n\n    withUrl(url: string): this {\n        return this.withOptions({url});\n    }\n\n    get method(): RequestMethod | undefined {\n\n        const method = this.options.method;\n\n        return method == null ? undefined : requestMethod(method);\n    }\n\n    withMethod(method: string | RequestMethod): this {\n        return this.withOptions({method});\n    }\n\n    abstract load(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract send(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract get(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract post(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract put(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    //noinspection ReservedWordAsName\n    abstract delete(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract patch(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract head(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n}\n\n//noinspection ReservedWordAsName\ninterface RikeInternals {\n\n    readonly defaultHttpOptions: RequestOptions;\n\n    generateUniqueId(): string;\n\n    request(request: string | Request, options?: RequestOptionsArgs): Observable<Response>;\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response>;\n\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\n\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\n\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response>;\n\n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\n\n    head(url: string, options?: RequestOptionsArgs): Observable<Response>;\n\n}\n\nclass RikeTargetImpl<IN, OUT> extends RikeTarget<IN, OUT> {\n\n    private _uniqueId: string;\n    private _rikeEvents = new EventEmitter<RikeEvent>();\n    private _baseUrl?: string;\n    private _operation?: RikeOperationEvent;\n    private _response?: Observable<Response>;\n    private _observer?: Observer<any>;\n    private _subscr?: Subscription;\n\n    constructor(\n        private _rike: Rike,\n        private _internals: RikeInternals,\n        private _target: any,\n        private _protocol: Protocol<IN, OUT>) {\n        super();\n        this._uniqueId = _internals.generateUniqueId();\n    }\n\n    get rike(): Rike {\n        return this._rike;\n    }\n\n    get target(): any {\n        return this._target;\n    }\n\n    get uniqueId(): string {\n        return this._uniqueId;\n    }\n\n    get currentOperation(): RikeOperation<any, any> | undefined {\n        return this._operation && this._operation.operation;\n    }\n\n    get rikeEvents(): EventEmitter<RikeEvent> {\n        return this._rikeEvents;\n    }\n\n    get internals(): RikeInternals {\n        return this._internals;\n    }\n\n    get protocol(): Protocol<IN, OUT> {\n        return this._protocol;\n    }\n\n    get baseUrl(): string | undefined {\n        return this._baseUrl;\n    }\n\n    withBaseUrl(url?: string): this {\n        this._baseUrl = url;\n        return this;\n    }\n\n    cancel(): boolean {\n        return this._cancel();\n    }\n\n    private _cancel(cause?: RikeOperationEvent): boolean {\n        if (!this._operation) {\n            return false;\n        }\n\n        this._response = undefined;\n        try {\n            if (this._observer) {\n                try {\n\n                    const cancel = new RikeCancelEvent(this._operation.operation, cause);\n\n                    this._observer.error(cancel);\n                    this._rikeEvents.error(cancel);\n                } catch (e) {\n                    this._rikeEvents.error(new RikeExceptionEvent(this._operation.operation, e));\n                    throw e;\n                } finally {\n                    this._operation = undefined;\n                    try {\n                        this._observer.complete();\n                    } finally {\n                        this._observer = undefined;\n                    }\n                }\n            }\n        } finally {\n            if (this._subscr) {\n                this._subscr.unsubscribe();\n                this._subscr = undefined;\n            }\n        }\n\n        return true;\n    }\n\n    operation(name: string, protocol?: Protocol<any, any>): RikeOperation<any, any> {\n        return new RikeOperationImpl(\n            this,\n            name,\n            !protocol ? this.protocol : protocol.prior().apply(this.protocol));\n    }\n\n    startOperation(operation: RikeOperation<any, any>): void {\n\n        const event = new RikeOperationEvent(operation);\n\n        this._cancel(event);\n        this._rikeEvents.emit(event);\n        this._operation = event;\n    }\n\n    wrapResponse<IN, OUT>(operation: RikeOperation<IN, OUT>, response: Observable<Response>): Observable<OUT> {\n        this._response = response;\n        return new Observable<OUT>((responseObserver: Observer<OUT>) => {\n            if (this._response !== response) {\n                return;// Another request already initiated\n            }\n            this._observer = responseObserver;\n\n            const cleanup = () => {\n                this._response = undefined;\n                this._operation = undefined;\n                if (this._subscr) {\n                    this._subscr.unsubscribe();\n                    this._subscr = undefined;\n                }\n            };\n\n            this._subscr = response.subscribe(\n                httpResponse => {\n                    try {\n\n                        const response = operation.protocol.readResponse(httpResponse);\n\n                        responseObserver.next(response);\n                        this._rikeEvents.emit(new RikeSuccessEvent(operation, response));\n                    } catch (e) {\n                        this._rikeEvents.error(new RikeExceptionEvent(\n                            operation,\n                            e,\n                            {\n                                response: httpResponse,\n                                error: e\n                            }));\n                    }\n                },\n                error => {\n                    console.error(\"[\" + this.target + \"] \" + operation.name + \" failed\", error);\n\n                    let errorResponse = toErrorResponse(error);\n\n                    try {\n                        errorResponse = operation.protocol.handleError(errorResponse);\n                        responseObserver.error(errorResponse);\n                        this._rikeEvents.emit(new RikeErrorResponseEvent(operation, errorResponse));\n                    } catch (e) {\n                        errorResponse.error = e;\n                        this._rikeEvents.error(new RikeExceptionEvent(operation, e, errorResponse));\n                    } finally {\n                        cleanup();\n                    }\n                },\n                () => {\n                    try {\n                        responseObserver.complete();\n                    } catch (e) {\n                        this._rikeEvents.error(new RikeExceptionEvent(operation, e));\n                    } finally {\n                        cleanup();\n                    }\n                });\n        });\n    }\n\n    toString(): string {\n        return \"RikeTarget[\" + this.target + \"]\";\n    }\n\n}\n\nclass RikeOperationImpl<IN, OUT> extends RikeOperation<IN, OUT> {\n\n    private _options: RequestOptions;\n\n    constructor(\n        private _target: RikeTargetImpl<any, any>,\n        private _name: string,\n        private _protocol: Protocol<IN, OUT>) {\n        super();\n        this._options = _target.internals.defaultHttpOptions.merge();\n    }\n\n    get rike(): Rike {\n        return this.target.rike;\n    }\n\n    get internals(): RikeInternals {\n        return this.target.internals;\n    }\n\n    get target(): RikeTargetImpl<any, any> {\n        return this._target;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get protocol(): Protocol<IN, OUT> {\n        return this._protocol;\n    }\n\n    withOptions(options?: RequestOptionsArgs): this {\n        if (options) {\n            this._options = this._options.merge(options);\n        }\n        return this;\n    }\n\n    get options(): RequestOptions {\n        return this._options;\n    }\n\n    load(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(undefined, url, options);\n            return this.wrapResponse(this.internals.request(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    send(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(undefined, url, options));\n            return this.wrapResponse(this.internals.request(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    get(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(RequestMethod.Get, url, options);\n            return this.wrapResponse(this.internals.get(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    post(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(RequestMethod.Post, url, options));\n            return this.wrapResponse(this.internals.post(this.requestUrl(options), options.body, options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    put(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(RequestMethod.Put, url, options));\n            return this.wrapResponse(this.internals.put(this.requestUrl(options), options.body, options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    //noinspection ReservedWordAsName\n    delete(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(RequestMethod.Delete, url, options);\n            return this.wrapResponse(this.internals.delete(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    patch(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(RequestMethod.Patch, url, options));\n            return this.wrapResponse(this.internals.patch(this.requestUrl(options), options.body, options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    head(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(RequestMethod.Head, url, options);\n            return this.wrapResponse(this.internals.head(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    toString() {\n        return \"RikeOperation[\" + this.name + \"@\" + this.target + \"]\";\n    }\n\n    private startOperation() {\n        this.target.startOperation(this);\n    }\n\n    private requestOptions(method?: RequestMethod, url?: string, options?: RequestOptionsArgs): RequestOptionsArgs {\n        if (!options) {\n            options = {url, method};\n        } else {\n            options = new RequestOptions(options).merge({url, method});\n        }\n\n        options = this.options.merge(options);\n        if (options.url == null) {\n            options.url = this.target.baseUrl;\n        } else {\n            options.url = relativeUrl(this.target.baseUrl, options.url);\n        }\n\n        return this.protocol.prepareRequest(options);\n    }\n\n    private writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs {\n        options = this.protocol.writeRequest(request, options);\n        return options;\n    }\n\n    //noinspection JSMethodCanBeStatic\n    private requestUrl(options: RequestOptionsArgs): string {\n        if (options.url != null) {\n            return options.url;\n        }\n        throw new Error(\"Request URL not specified\");\n    }\n\n    private wrapResponse(response: Observable<Response>): Observable<OUT> {\n        return this.target.wrapResponse(this, response);\n    }\n\n}\n","import {Component, Input, OnDestroy} from \"@angular/core\";\nimport {StatusLabels, StatusCollector, StatusView, DEFAULT_STATUS_LABELS} from \"./status-collector\";\n\n@Component({\n    selector: '[rikeStatus],[rikeStatusLabels],[rikeStatusLabelText],[rikeStatusLabelClass]',\n    template: `<span class=\"rike-status-icon\"></span> {{text}}`,\n    host: {\n        \"[class]\": \"cssClass\",\n    }\n})\nexport class RikeStatusComponent<L> implements OnDestroy {\n\n    private _statusLabels?: {[operation: string]: StatusLabels<L>};\n    private _statusView?: StatusView<L>;\n    private _ownStatusView = false;\n    private _labelText: (label: L) => string = defaultLabelText;\n    private _labelClass: (status: StatusView<L>) => string = defaultStatusClass;\n\n    constructor(private _collector: StatusCollector) {\n    }\n\n    get collector(): StatusCollector {\n        return this._collector;\n    }\n\n    get statusView(): StatusView<L> {\n        if (this._statusView) {\n            return this._statusView;\n        }\n\n        this._statusView = this.createStatusView();\n        this._ownStatusView = true;\n\n        return this._statusView;\n    }\n\n    get rikeStatus(): StatusView<L> | undefined {\n        return this._statusView;\n    }\n\n    @Input()\n    set rikeStatus(status: StatusView<L> | undefined) {\n        if (status === this._statusView) {\n            return;\n        }\n        this.releaseStatusView();\n        this._statusView = status;\n    }\n\n    get rikeStatusLabels(): {[operation: string]: StatusLabels<L>} | undefined {\n        return this._statusLabels;\n    }\n\n    @Input()\n    set rikeStatusLabels(labels: {[operation: string]: StatusLabels<L>} | undefined) {\n        this._statusView = undefined;\n        this._statusLabels = labels;\n    }\n\n    get rikeStatusLabelText(): (label: L) => string {\n        return this._labelText;\n    }\n\n    @Input()\n    set rikeStatusLabelText(value: (label: L) => string) {\n        this._labelText = value;\n    }\n\n    get rikeStatusLabelClass(): (status: StatusView<L>) => string {\n        return this._labelClass;\n    }\n\n    @Input()\n    set rikeStatusLabelClass(value: (status: StatusView<L>) => string) {\n        this._labelClass = value;\n    }\n\n    get cssClass(): string {\n        return this._labelClass(this.statusView);\n    }\n\n    get text(): string | undefined {\n\n        const labels = this.statusView.labels;\n\n        if (!labels.length) {\n            return undefined;\n        }\n\n        let text = \"\";\n\n        for (let label of labels) {\n\n            const t = this.rikeStatusLabelText(label);\n\n            if (text) {\n                text += \", \";\n            }\n            text += t;\n        }\n        if (this.statusView.processing) {\n            text += \"...\";\n        }\n\n        return text;\n    }\n\n    ngOnDestroy() {\n        this.releaseStatusView();\n    }\n\n    protected createStatusView(): StatusView<L> {\n\n        const labels =\n            this.rikeStatusLabels\n            || ((DEFAULT_STATUS_LABELS as any) as {[operation: string]: StatusLabels<L>});\n\n        return this.collector.view(labels);\n    }\n\n    private releaseStatusView() {\n\n        const statusView = this._statusView;\n\n        if (statusView) {\n            this._statusView = undefined;\n            if (this._ownStatusView) {\n                statusView.close();\n            }\n        }\n    }\n\n}\n\nfunction defaultLabelText(label: any): string  {\n    if (typeof label === \"string\") {\n        return label;\n    }\n\n    const defaultLabel = label as {message?: string};\n\n    if (defaultLabel.message) {\n        return defaultLabel.message;\n    }\n\n    return label.toString();\n}\n\n\nfunction defaultStatusClass<L>(status: StatusView<L>) {\n\n    const labels = status.labels;\n\n    if (!labels.length) {\n        return \"rike-status rike-status-hidden\";\n    }\n\n    let result = processingTypeClass(status);\n\n    for (let label of labels) {\n\n        const defaultLabel = label as {id?: string; cssClass?: string};\n        const cssClass = defaultLabel.cssClass;\n\n        if (cssClass) {\n            result += \" \" + cssClass;\n            continue;\n        }\n\n        const id = defaultLabel.id;\n\n        if (id) {\n            result += \" rike-status-\" + id;\n        }\n    }\n\n    return result;\n}\n\nfunction processingTypeClass(status: StatusView<any>) {\n    if (this.statusView.processing) {\n        return \"rike-status rike-status-processing\";\n    }\n    if (this.statusView.cancelled) {\n        return \"rike-status rike-status-cancelled\";\n    }\n    if (this.statusView.failed) {\n        return \"rike-status rike-status-failed\";\n    }\n    if (this.statusView.succeed) {\n        return \"rike-status rike-status-succeed\";\n    }\n    return \"rike-status rike-status-hidden\";\n}\n\n","import {Response, ResponseOptions, ResponseType} from \"@angular/http\";\nimport {Protocol, ErrorResponse} from \"./protocol\";\n\n//noinspection JSUnusedLocalSymbols\nconst _Protocol_import = Protocol;\n\n/**\n * Error response.\n *\n * Any object can be converted to `ErrorResponse` with `toErrorResponse()` function.\n */\nexport interface FieldErrorResponse extends ErrorResponse {\n\n    /**\n     * Field errors.\n     */\n    fieldErrors: FieldErrors;\n\n}\n\n/**\n * Field errors.\n *\n * Any field of this object is an arrays of errors corresponding to this field. Such array should never be empty.\n *\n * The special case is field named `\"*\"`. It contains errors not related to particular field.\n */\nexport interface FieldErrors {\n    [field: string]: FieldError[];\n}\n\n/**\n * Field error.\n */\nexport interface FieldError {\n\n    /**\n     * Optional error code.\n     */\n    code?: string;\n\n    /**\n     * Error message.\n     */\n    message: string;\n\n}\n\n/**\n * Appends field errors to {{ErrorResponse}}.\n *\n * If field errors already present in `ErrorResponse` then does nothing.\n *\n * This function can be used as {{Protocol}} error handler error handler.\n *\n * @param error object to convert.\n *\n * @return {FieldErrorResponse} constructed error httpResponse.\n */\nexport function addFieldErrors(error: ErrorResponse): FieldErrorResponse {\n\n    const response = error as FieldErrorResponse;\n\n    if (response.fieldErrors) {\n        // Field errors already present.\n        return response;\n    }\n\n    const httpResponse = error.response;\n    let body: any | undefined = undefined;\n\n    // Attempt to parse JSON body\n    if (httpResponse.headers.get(\"Content-Type\") === \"application/json\") {\n        try {\n            body = httpResponse.json()\n        } catch (e) {\n            console.error(\"Failed to parse JSON error response\", e);\n        }\n    }\n\n    const fieldErrors = toFieldErrors(body);\n\n    if (fieldErrors) {\n        response.fieldErrors = fieldErrors;\n        return response;\n    }\n\n    return defaultFieldErrors(response);\n}\n\nfunction defaultFieldErrors(response: FieldErrorResponse): FieldErrorResponse {\n\n    const httpResponse = response.response;\n    let message = \"ERROR \" + httpResponse.status;\n\n    if (httpResponse.statusText && httpResponse.statusText.toLowerCase() != \"ok\") {\n        message += \": \" + httpResponse.statusText;\n    }\n\n    response.fieldErrors = {\"*\": [{code: \"HTTP\" + httpResponse.status, message}]};\n\n    return response;\n}\n\nfunction toFieldErrors(data: any): FieldErrors | undefined {\n    if (data == null) {\n        return;\n    }\n    if (Array.isArray(data)) {\n\n        const fieldErrors = data.map(toFieldError).filter(notEmptyError);\n\n        return fieldErrors.length ? {\"*\": fieldErrors} : undefined;\n    }\n    if (typeof data !== \"object\") {\n\n        const fieldErrors = [{message: data.toString()}].filter(notEmptyError);\n\n        return fieldErrors.length ? {\"*\": fieldErrors} : undefined;\n    }\n\n    const errors = data as FieldErrors;\n    const result: FieldErrors = {};\n    let hasErrors = false;\n\n    for (let field in errors) {\n        if (errors.hasOwnProperty(field)) {\n\n            const errorArray = toFieldErrorArray(errors[field]);\n\n            if (errorArray.length) {\n                result[field] = errorArray;\n                hasErrors = true;\n            }\n        }\n    }\n\n    return hasErrors ? result : undefined;\n}\n\nfunction toFieldErrorArray(data: any): FieldError[] {\n    if (data == null) {\n        return [];\n    }\n    if (Array.isArray(data)) {\n        return data.map(toFieldError).filter(notEmptyError);\n    }\n    return [toFieldError(data)].filter(notEmptyError);\n}\n\nfunction toFieldError(data: any): FieldError {\n    if (data == null) {\n        return {message: \"\"};\n    }\n\n    const fieldError = data as FieldError;\n\n    if (typeof fieldError.message === \"string\" && (fieldError.code == null || fieldError.code === \"string\")) {\n        return fieldError;\n    }\n    if (fieldError.message != null) {\n        return {\n            code: fieldError.code != null ? fieldError.code.toString() : undefined,\n            message: fieldError.message.toString(),\n        };\n    }\n\n    return {message: fieldError.toString()};\n}\n\nfunction notEmptyError(item?: FieldError): boolean {\n    return !!item && (!!item.message || !!item.code);\n}\n","import {Injectable, EventEmitter, Optional, Inject} from \"@angular/core\";\nimport {AnonymousSubscription} from \"rxjs/Subscription\";\nimport {FieldErrors, FieldError, addFieldErrors} from \"./field-error\";\nimport {RikeEventSource, RikeEvent, RikeErrorEvent} from \"./event\";\nimport {RikeTarget} from \"./rike\";\n\n/**\n * Field errors subscription.\n *\n * The `unsubscribe()` method should be called to stop receiving error notifications.\n */\nexport interface ErrorSubscription {\n\n    /**\n     * After this method called the error notifications won't be sent to subscriber.\n     *\n     * This method should be called in order to release all resources associated with subscription.\n     */\n    unsubscribe(): void;\n\n    /**\n     * Request field errors to be updated by notifying the subscriber.\n     *\n     * Does nothing after `unsubscribe()` method called.\n     */\n    refresh(): this;\n\n}\n\n/**\n * An error collecting service.\n *\n * It collects errors from all available [Rike event sources][RikeEventSource]. It uses `fieldErrors()` method\n * to obtain a `FieldErrors` instance from {{RikeErrorEvent}}. Then it notifies all subscribers on when errors received\n * or removed.\n *\n * This service is registered automatically along with every event source by `provideEventSource()` function.\n * But unlike event sources it is not a multi-provider.\n *\n * An instance of this class could be created on its own. Then it is necessary to subscribe it on Rike events with\n * `subscribeOn` method.\n */\n@Injectable()\nexport class ErrorCollector {\n\n    private readonly _emitters: {[field: string]: FieldEmitter} = {};\n    private readonly _targetErrors: {[target: string]: TargetErrors} = {};\n    private _initialized = false;\n\n    constructor(@Inject(RikeEventSource) @Optional() private _eventSources?: RikeEventSource[]) {\n    }\n\n    /**\n     * Subscribes this collector on the given Rike events emitter.\n     *\n     * @param events Rike events emitter to subscribe on.\n     */\n    public subscribeOn(events: EventEmitter<RikeEvent>): AnonymousSubscription {\n        return events.subscribe(\n            (event: RikeEvent) => this.handleEvent(event),\n            (error: RikeErrorEvent) => this.handleError(error));\n    }\n\n    /**\n     * Adds subscription for errors corresponding to the given field.\n     *\n     * If the field name is `\"*\"`, then subscriber will be notified on error changes for all fields except those ones\n     * with existing subscriptions.\n     *\n     * @param field target field name.\n     * @param next function that will be called on every target field errors update.\n     * @param error function that will be called on errors.\n     * @param complete function that will be called when no more errors will be reported.\n     *\n     * @return {ErrorSubscription} subscription.\n     */\n    public subscribe(\n        field: string,\n        next: ((errors: FieldErrors) => void),\n        error?: (error: any) => void,\n        complete?: () => void): ErrorSubscription {\n        this.init();\n        return this.fieldEmitter(field).subscribe(next, error, complete);\n    }\n\n    /**\n     * Adds subscription for errors corresponding to all fields except those ones with existing subscriptions.\n     *\n     * Calling this method is the same as calling `subscribe(\"*\", next, error, complete);`.\n     *\n     * @param next function that will be called on every errors update.\n     * @param error function that will be called on errors.\n     * @param complete function that will be called when no more errors will be reported.\n     *\n     * @return {ErrorSubscription} subscription.\n     */\n    public subscribeForRest(\n        next: ((errors: FieldErrors) => void),\n        error?: (error: any) => void,\n        complete?: () => void): ErrorSubscription {\n        return this.subscribe(\"*\", next, error, complete);\n    }\n\n    //noinspection JSMethodCanBeStatic\n    /**\n     * Converts error to `FieldErrors`.\n     *\n     * This method uses `addFieldErrors` function by default. Override it if you are using custom error handler.\n     *\n     * @param error arbitrary error passed in [RikeEvent.error] field.\n     *\n     * @return {FieldErrors} field errors.\n     */\n    protected fieldErrors(error: RikeErrorEvent): FieldErrors {\n\n        const errorResponse = error.errorResponse;\n\n        if (errorResponse) {\n            return addFieldErrors(errorResponse).fieldErrors;\n        }\n\n        return {\n            \"*\": [\n                {message: error.error.toString()} as FieldError\n            ]\n        };\n    }\n\n    private fieldEmitter(field: string) {\n        return this._emitters[field] || (\n            this._emitters[field] = new FieldEmitter(field, this._emitters, this._targetErrors));\n    }\n\n    private init() {\n        if (this._initialized) {\n            return;\n        }\n\n        this._initialized = true;\n        if (this._eventSources) {\n            for (let src of this._eventSources) {\n                this.subscribeOn(src.rikeEvents);\n            }\n        }\n    }\n\n    private handleEvent(event: RikeEvent) {\n\n        let affectedFields: {[field: string]: any};\n\n        if (!event.error) {\n            affectedFields = this.clearTargetErrors(event.target);\n        } else {\n            affectedFields = this.targetErrors(event.target)\n                .addAll(this.fieldErrors((event as any) as RikeErrorEvent));\n        }\n\n        for (let field in affectedFields) {\n            if (affectedFields.hasOwnProperty(field)) {\n                this.notify(field);\n            }\n        }\n    }\n\n    private handleError(error: RikeErrorEvent) {\n        this.targetErrors(error.target).add(\"*\", {message: error.error.toString()});\n        this.notify(\"*\");\n    }\n\n    private targetErrors(target: RikeTarget<any, any>): TargetErrors {\n\n        const id = target.uniqueId;\n\n        return this._targetErrors[id] || (this._targetErrors[id] = new TargetErrors(target, this._emitters));\n    }\n\n    private clearTargetErrors(target: RikeTarget<any, any>): {[field: string]: any} {\n\n        const id = target.uniqueId;\n        const targetErrors = this._targetErrors[id];\n\n        if (!targetErrors) {\n            return [];\n        }\n\n        delete this._targetErrors[id];\n\n        return targetErrors.fieldsWithErrors;\n    }\n\n    private notify(field: string) {\n\n        const emitter = this._emitters[field];\n\n        if (emitter) {\n            emitter.notify();\n        }\n    }\n\n}\n\nclass FieldEmitter {\n\n    private _emitter = new EventEmitter<FieldErrors>();\n    private _counter = 0;\n\n    constructor(\n        private _field: string,\n        private _emitters: {[field: string]: FieldEmitter},\n        private _targetErrors: {[target: string]: TargetErrors}) {\n    }\n\n    subscribe(\n        next: ((errors: FieldErrors) => void),\n        error?: (error: any) => void,\n        complete?: () => void): ErrorSubscription {\n\n        const subscr = this._emitter.subscribe(next, error, complete) as AnonymousSubscription;\n\n        this._counter++;\n\n        return new ErrorSubscr(this, subscr).subscribe(next, error, complete);\n    }\n\n    notify(emitter?: EventEmitter<FieldErrors>) {\n\n        const errors: FieldErrors = {};\n\n        for (let id in this._targetErrors) {\n            if (this._targetErrors.hasOwnProperty(id)) {\n                this._targetErrors[id].appendTo(this._field, errors);\n            }\n        }\n\n        (emitter || this._emitter).emit(errors);\n    }\n\n    unsubscribed() {\n        if (!--this._counter) {\n            delete this._emitters[this._field];\n        }\n    }\n\n}\n\nclass ErrorSubscr implements ErrorSubscription {\n\n    private readonly _refreshEmitter = new EventEmitter<FieldErrors>();\n    private _refreshSubscription: AnonymousSubscription;\n\n    constructor(private _fieldEmitter: FieldEmitter, private _subscription?: AnonymousSubscription) {\n    }\n\n    subscribe(\n        next: ((errors: FieldErrors) => void),\n        error?: (error: any) => void,\n        complete?: () => void): this {\n        this._refreshSubscription = this._refreshEmitter.subscribe(next, error, complete);\n        return this;\n    }\n\n    unsubscribe(): void {\n        if (!this._subscription) {\n            return;\n        }\n        try {\n            this._subscription.unsubscribe();\n            this._refreshSubscription.unsubscribe();\n        } finally {\n            delete this._subscription;\n            this._fieldEmitter.unsubscribed();\n        }\n    }\n\n    refresh(): this {\n        if (!this._subscription) {\n            return this;\n        }\n        this._fieldEmitter.notify(this._refreshEmitter);\n        return this;\n    }\n\n}\n\nclass TargetErrors {\n\n    private _errors: FieldErrors;\n\n    constructor(\n        public target: RikeTarget<any, any>,\n        private _emitters: {[field: string]: any},\n        errors?: FieldErrors) {\n        this._errors = errors || {};\n    }\n\n    get fieldsWithErrors(): {[field: string]: any} {\n        return this._errors;\n    }\n\n    add(field: string, ...errors: FieldError[]) {\n\n        const existing = this._errors[field];\n\n        if (!existing) {\n            this._errors[field] = existing;\n        } else {\n            this._errors[field].push(...errors);\n        }\n    }\n\n    addAll(errors: FieldErrors): {[field: string]: any} {\n        for (let field in errors) {\n            if (errors.hasOwnProperty(field)) {\n                this.add(field, ...errors[field]);\n            }\n        }\n        return errors;\n    }\n\n    appendTo(field: string, out: FieldErrors) {\n        if (field !== \"*\") {\n            // Append errors for the given field.\n            appendErrorsTo(field, out, this._errors[field]);\n            return;\n        }\n\n        // Append errors for all fields except the ones with subscribers.\n        for (let f in this._errors) {\n            if (this._errors.hasOwnProperty(f) && !this._emitters[f]) {\n                appendErrorsTo(f, out, this._errors[f]);\n            }\n        }\n    }\n\n}\n\nfunction appendErrorsTo(field: string, fieldErrors: FieldErrors, errors: FieldError[] | undefined) {\n    if (!errors || !errors.length) {\n        return;\n    }\n\n    const errs = fieldErrors[field];\n\n    if (errs) {\n        errs.push(...errors);\n    } else {\n        fieldErrors[field] = errors;\n    }\n}\n","import {Component, Input, OnInit, OnDestroy, Optional} from \"@angular/core\";\nimport {ErrorCollector, ErrorSubscription} from \"./error-collector\";\nimport {FieldErrors, FieldError} from \"./field-error\";\n\n@Component({\n    selector: '[rikeErrors],[rikeErrorsField]',\n    template:\n    `\n    <ul class=\"rike-error-list\" *ngIf=\"errors.length\">\n        <li class=\"rike-error\" *ngFor=\"let error of errors\">{{error.message}}</li>\n    </ul>\n    `,\n    host: {\n        \"[class.rike-errors]\": \"true\"\n    }\n})\nexport class RikeErrorsComponent implements OnInit, OnDestroy {\n\n    private _rikeErrorsField = \"*\";\n    private _errors: FieldError[] = [];\n    private _init = false;\n    private _subscription?: ErrorSubscription;\n\n    constructor(@Optional() private _collector?: ErrorCollector) {\n    }\n\n    get rikeErrorsField(): string {\n        return this._rikeErrorsField;\n    }\n\n    @Input()\n    set rikeErrorsField(field: string) {\n        if (this._rikeErrorsField === field) {\n            return;\n        }\n        this._rikeErrorsField = field;\n        if (this._init) {\n            this.unsubscribe();\n            this.subscribe();\n        }\n    }\n\n    get rikeErrors(): ErrorCollector {\n        return this._collector || (this._collector = this.createCollector());\n    }\n\n    @Input()\n    set rikeErrors(collector: ErrorCollector) {\n        this._collector = collector;\n    }\n\n    get errors(): FieldError[] {\n        return this._errors;\n    }\n\n    ngOnInit() {\n        this._init = true;\n        this.subscribe();\n    }\n\n    ngOnDestroy() {\n        this._init = false;\n        this.unsubscribe();\n    }\n\n    //noinspection JSMethodCanBeStatic\n    protected createCollector(): ErrorCollector {\n        return new ErrorCollector();\n    }\n\n    protected updateErrors(errors: FieldErrors) {\n\n        const list: FieldError[] = [];\n\n        for (let field in errors) {\n            if (errors.hasOwnProperty(field)) {\n                list.push(...errors[field]);\n            }\n        }\n\n        this._errors = list;\n    }\n\n    private subscribe() {\n        if (this.rikeErrorsField) {\n            this._subscription =\n                this.rikeErrors.subscribe(this.rikeErrorsField, errors => this.updateErrors(errors)).refresh();\n        }\n    }\n\n    private unsubscribe() {\n        this._errors = [];\n\n        const subscription = this._subscription;\n\n        if (subscription) {\n            delete this._subscription;\n            subscription.unsubscribe();\n        }\n    }\n\n}\n","import {Type} from \"@angular/core\";\nimport {RikeEventSource} from \"./event\";\nimport {StatusCollector} from \"./status-collector\";\nimport {ErrorCollector} from \"./error-collector\";\n\n/**\n * Constructs provider recipe for {{RikeEventSource}}.\n *\n * @param useClass\n * @param useValue\n * @param useExisting\n * @param useFactory\n * @param deps\n *\n * @return new provider recipe.\n */\nexport function provideEventSource({useClass, useValue, useExisting, useFactory, deps}: {\n    useClass?: Type;\n    useValue?: any;\n    useExisting?: any;\n    useFactory?: Function;\n    deps?: Object[];\n    multi?: boolean;\n}): any[] {\n    return [\n        StatusCollector,\n        ErrorCollector,\n        {\n            provide: RikeEventSource,\n            multi: true,\n            useClass,\n            useValue,\n            useExisting,\n            useFactory,\n            deps,\n        },\n    ];\n};\n","import {RequestOptions} from \"@angular/http\";\nimport {Observable, Observer} from \"rxjs/Rx\";\nimport {Protocol, JSON_PROTOCOL, jsonProtocol} from \"./protocol\";\nimport {relativeUrl} from \"./options\";\nimport {RikeTarget, Rike} from \"./rike\";\n\n/**\n * An interface of REST-like resources.\n *\n * An operations target is created per resource with a resource instance as target value. All operations on this\n * resource should be performed using this target.\n *\n * This class can be used as a token for resources. It can be registered as Angular service with {{provideResource}}.\n */\nexport abstract class Resource {\n\n    /**\n     * Rike operations target for this resource.\n     *\n     * @return {RikeTarget<any, any>}\n     */\n    abstract readonly rikeTarget: RikeTarget<any, any>;\n\n}\n\n/**\n * Abstract implementation of REST-like resource.\n */\nexport abstract class RikeResource implements Resource {\n\n    private _rikeTarget?: RikeTarget<any, any>;\n\n    constructor(private _rike: Rike) {\n    }\n\n    /**\n     * Rike interface instance.\n     */\n    get rike(): Rike {\n        return this._rike;\n    }\n\n    /**\n     * Rike operations target for this resource.\n     *\n     * @return {RikeTarget<any, any>} the result of `this.getRikeTarget()` call.\n     */\n    get rikeTarget(): RikeTarget<any, any> {\n        return this.getRikeTarget();\n    }\n\n    /**\n     * Rike operations target for this resource.\n     *\n     * Creates Rike target when needed by calling `createRikeTarget()` method.\n     *\n     * @return {RikeTarget<any, any>}\n     */\n    getRikeTarget(): RikeTarget<any, any> {\n        return this._rikeTarget || (this._rikeTarget = this.createRikeTarget());\n    }\n\n    /**\n     * Creates Rike operation target for this resource.\n     *\n     * This method is called by `getRikeTarget()` method on demand.\n     *\n     * @return {RikeTarget<any, any>} new Rike target.\n     */\n    protected createRikeTarget(): RikeTarget<any, any> {\n        return this.rike.target(this, JSON_PROTOCOL);\n    }\n\n}\n\n/**\n * Loadable resource.\n *\n * It is able to load arbitrary data from the server. By default expects a JSON data. Override `createRikeTarget()`\n * method to change it. When loaded the data will be cached. Call `reload()` method to reload it.\n *\n * @param <T> loaded data type.\n */\nexport abstract class LoadableResource<T> extends RikeResource {\n\n    private _data?: T;\n\n    constructor(rike: Rike) {\n        super(rike);\n    }\n\n    get rikeTarget(): RikeTarget<T, T> {\n        return this.getRikeTarget();\n    }\n\n    getRikeTarget(): RikeTarget<T, T> {\n        return super.getRikeTarget();\n    }\n\n    /**\n     * Loaded data.\n     *\n     * @return {T} `undefined` if data is not loaded yet.\n     */\n    get data(): T | undefined {\n        return this._data;\n    }\n\n    /**\n     * Loads data from server if not loaded yet.\n     *\n     * @return {Observable<T>}\n     */\n    load(): Observable<T> {\n\n        const data = this.data;\n\n        if (data) {\n            return Observable.of<T>(data);\n        }\n\n        return new Observable<T>((observer: Observer<T>) => {\n            this.rikeTarget\n                .operation(\"load\")\n                .get()\n                .subscribe(\n                    (data: T) => {\n                        this._data = data;\n                        observer.next(data);\n                    },\n                    error => observer.error(error),\n                    () => observer.complete());\n        });\n    }\n\n    /**\n     * Reloads data from server.\n     */\n    reload(): Observable<T> {\n        this.reset();\n        return this.load();\n    }\n\n    /**\n     * Resets the resource by cleaning cached data.\n     */\n    reset() {\n        this._data = undefined;\n    }\n\n    protected createRikeTarget(): RikeTarget<T, T> {\n        return this.rike.target(this, jsonProtocol<T, T>());\n    }\n\n}\n\n/**\n * CRUD (Create, Load, Update, Delete) resource.\n *\n * It is able to manipulate with server objects. By default it operates over JSON protocol.\n * Override `createRikeTarget()` method to change it.\n */\nexport abstract class CRUDResource<T> extends RikeResource {\n\n    constructor(rike: Rike) {\n        super(rike);\n    }\n\n    get rikeTarget(): RikeTarget<T, T> {\n        return this.getRikeTarget();\n    }\n\n    getRikeTarget(): RikeTarget<T, T> {\n        return super.getRikeTarget();\n    }\n\n    /**\n     * Creates an object on the server.\n     *\n     * Sends `POST` HTTP request. Uses protocol returned from `this.objectCreateProtocol(object)` method.\n     *\n     * @param object an object to create.\n     *\n     * @return {Observable<O>}\n     */\n    create(object: T): Observable<T> {\n        return this.rikeTarget.operation(\"create\", this.objectCreateProtocol(object)).post(object);\n    }\n\n    /**\n     * Reads an object from the server.\n     *\n     * Sends `GET` HTTP request. Uses protocol returned from `this.objectReadProtocol(id)` method call.\n     *\n     * @param id an identifier of object to read.\n     *\n     * @return {Observable<O>}\n     */\n    read(id: any): Observable<T> {\n        return this.rikeTarget.operation(\"read\", this.objectReadProtocol(id)).get();\n    }\n\n    /**\n     * Updates an object on the server.\n     *\n     * Sends `POST` HTTP request. Uses protocol returned from `this.objectUpdateProtocol(object)` method call.\n     *\n     * @param object an object to update.\n     *\n     * @return {Observable<O>}\n     */\n    update(object: T): Observable<T> {\n        return this.rikeTarget.operation(\"update\", this.objectUpdateProtocol(object)).put(object);\n    }\n\n    /**\n     * Deletes an object on the server.\n     *\n     * Sends `DELETE` HTTP request. Uses protocol returned from `this.objectDeleteProtocol(object)` method call.\n     *\n     * @param object an object to delete.\n     *\n     * @return {Observable<any>}\n     */\n    //noinspection ReservedWordAsName\n    delete(object: T): Observable<any> {\n        return this.rikeTarget.operation(\"delete\", this.objectDeleteProtocol(object)).delete();\n    }\n\n    protected createRikeTarget(): RikeTarget<T, T> {\n        return this.rike.target(this, jsonProtocol<T, T>());\n    }\n\n    /**\n     * Constructs object creation protocol.\n     *\n     * @param object an object to create.\n     *\n     * @return {Protocol<T, T>} creation protocol.\n     */\n    protected objectCreateProtocol(object: T): Protocol<any, T> {\n        return this.rikeTarget.protocol.instead().readResponse(response => object);\n    }\n\n    /**\n     * Constructs object read protocol.\n     *\n     * This protocol updates request URL with `objectUrl()` by default.\n     *\n     * @param id an identifier of object to read.\n     *\n     * @return {Protocol<T, T>} read protocol.\n     */\n    protected objectReadProtocol(id: any): Protocol<any, T> {\n        return this.rikeTarget.protocol.prior().prepareRequest(\n            options => new RequestOptions(options).merge({\n                url: this.objectUrl(options.url, id)\n            }));\n    }\n\n    /**\n     * Constructs object update protocol.\n     *\n     * This protocol detects object identifier with `objectId()` method and updates request URL with `objectUrl()`\n     * by default.\n     *\n     * @param object an object to update.\n     *\n     * @return {Protocol<T, T>} update protocol.\n     */\n    protected objectUpdateProtocol(object: T): Protocol<T, T> {\n        return this.rikeTarget.protocol\n            .prior()\n            .updateRequest((object, options) => new RequestOptions(options).merge({\n                url: this.objectUrl(options.url, this.objectId(object))\n            }))\n            .instead()\n            .readResponse(response => object);\n    }\n\n    /**\n     * Constructs object deletion protocol.\n     *\n     * This protocol detects object identifier with `objectId()` method and updates request URL with `objectUrl()`\n     * by default.\n     *\n     * @param object an object to delete.\n     *\n     * @return {Protocol<T, T>} deletion protocol.\n     */\n    protected objectDeleteProtocol(object: T): Protocol<T, any> {\n        return this.rikeTarget.protocol\n            .prior()\n            .updateRequest((object, options) => new RequestOptions(options).merge({\n                url: this.objectUrl(options.url, this.objectId(object))\n            }))\n            .instead()\n            .readResponse(response => object)\n    }\n\n    /**\n     * Detects object identifier.\n     *\n     * @param object target object.\n     *\n     * @returns target object's identifier.\n     */\n    protected abstract objectId(object: T): any;\n\n    //noinspection JSMethodCanBeStatic\n    /**\n     * Updates base URL with object URL.\n     *\n     * By default append object identifier as URL-encoded string to the base URL.\n     *\n     * @param baseUrl base URL to update.\n     * @param id object identifier.\n     *\n     * @return {string} updated URL.\n     */\n    protected objectUrl(baseUrl: string | undefined, id: any): string {\n        return relativeUrl(baseUrl, encodeURIComponent(id.toString()));\n    }\n\n}\n","import {Type} from \"@angular/core\";\nimport {Resource} from \"./resource\";\nimport {provideEventSource} from \"./event-source-provider\";\n\n/**\n * Constructs provider recipe for {{Resource}}.\n *\n * Also registers the resource as source of Rike operation events.\n *\n * @param provide provider token. If not specified the `Resource` will be used.\n * @param useClass\n * @param useValue\n * @param useExisting\n * @param useFactory\n * @param deps\n *\n * @return new provider recipe.\n */\nexport function provideResource({provide, useClass, useValue, useExisting, useFactory, deps}: {\n    provide: any,\n    useClass?: Type;\n    useValue?: any;\n    useExisting?: any;\n    useFactory?: Function;\n    deps?: Object[];\n    multi?: boolean;\n}): any {\n\n    const token = provide || Resource;\n\n    return [\n        {\n            provide: token,\n            useClass,\n            useValue,\n            useExisting,\n            useFactory,\n            deps,\n        },\n        provideEventSource({\n            useFactory: (resource: Resource) => resource.rikeTarget,\n            deps: [token],\n        })\n    ];\n}\n","import {NgModule} from \"@angular/core\";\nimport {HttpModule} from \"@angular/http\";\nimport {CommonModule} from \"@angular/common\";\nimport {Rike} from \"./ng2rike/rike\";\nimport {RikeStatusComponent} from \"./ng2rike/status.component\";\nimport {RikeErrorsComponent} from \"./ng2rike/errors.component\";\nimport {provideEventSource} from \"./ng2rike/event-source-provider\";\n\nexport * from \"./ng2rike/error-collector\";\nexport * from \"./ng2rike/errors.component\";\nexport * from \"./ng2rike/event\";\nexport * from \"./ng2rike/event-source-provider\";\nexport * from \"./ng2rike/field-error\";\nexport * from \"./ng2rike/options\";\nexport * from \"./ng2rike/protocol\";\nexport * from \"./ng2rike/resource\";\nexport * from \"./ng2rike/resource-provider\";\nexport * from \"./ng2rike/rike\";\nexport * from \"./ng2rike/status-collector\";\nexport * from \"./ng2rike/status.component\";\n\n/**\n * REST-like services module.\n */\n@NgModule({\n    imports: [CommonModule, HttpModule],\n    providers: [\n        Rike,\n        provideEventSource({useExisting: Rike}),\n    ],\n    declarations: [\n        RikeStatusComponent,\n        RikeErrorsComponent,\n    ],\n    exports: [\n        RikeStatusComponent,\n        RikeErrorsComponent,\n    ],\n})\nexport class RikeModule {\n}\n","import {relativeUrl} from \"./options\";\n\ndescribe(\"relativeUrl\", () => {\n    it(\"works without base URL\", () => {\n        expect(relativeUrl(undefined, \"url\")).toBe(\"url\");\n    });\n\n    it(\"handles empty base URL\", () => {\n        expect(relativeUrl(\"\", \"url\")).toBe(\"url\");\n    });\n\n    it(\"resolves against base URL\", () => {\n        expect(relativeUrl(\"base-url\", \"url\")).toBe(\"base-url/url\");\n    });\n\n    it(\"resolves absolute URL\", () => {\n        expect(relativeUrl(\"/base-url\", \"/absolute-url\")).toBe(\"/absolute-url\");\n    });\n\n    it(\"resolves schema-qualified URL\", () => {\n        expect(relativeUrl(\"/base-url\", \"https://some.host/path\")).toBe(\"https://some.host/path\");\n    });\n\n    it(\"resolves URL with default schema\", () => {\n        expect(relativeUrl(\"/base-url\", \"//some.host/path\")).toBe(\"//some.host/path\");\n    });\n\n    it(\"resolves URL without schema\", () => {\n        expect(relativeUrl(\"/base-url\", \"://some.host/path\")).toBe(\"://some.host/path\");\n    });\n\n    it(\"resolves URL which looks like schema-qualified\", () => {\n        expect(relativeUrl(\"/base-url\", \"abc#http://some.host/path\")).toBe(\"/base-url/abc#http://some.host/path\");\n    });\n});\n","import {RequestOptionsArgs, Response, RequestOptions, URLSearchParams, ResponseOptions} from \"@angular/http\";\nimport {Protocol, JSON_PROTOCOL, ErrorResponse} from \"./protocol\";\n\ninterface In {\n    request: string;\n    update?: string;\n    written?: string;\n    numeric?: number;\n}\n\ninterface In2 {\n    request2: string;\n}\n\ninterface Out {\n    response: string;\n}\n\ninterface Out2 {\n    response2: string;\n}\n\nclass TestProtocol extends Protocol<In, Out> {\n\n    constructor() {\n        super();\n    }\n\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        return new RequestOptions(options).merge({url: \"/request\", search: \"prepared=true\"})\n    }\n\n    writeRequest(request: In, options: RequestOptionsArgs): RequestOptionsArgs {\n        request.written = \"written1\";\n        return new RequestOptions(options).merge({body: request});\n    }\n\n    readResponse(response: Response): Out {\n        return {\n            response: \"response1\"\n        };\n    }\n\n}\n\ndescribe(\"Protocol\", () => {\n\n    const protocol = new TestProtocol();\n\n    it(\"prepares request before\", () => {\n\n        const proto = protocol.prior().prepareRequest(opts => new RequestOptions(opts).merge({search: \"updated=true\"}));\n        const opts = proto.prepareRequest({});\n\n        expect(opts.url).toBe(\"/request\");\n        expect(opts.search && opts.search.toString()).toEqual(\"prepared=true\");\n    });\n\n    it(\"prepares request after\", () => {\n\n        const proto = protocol.then().prepareRequest(opts => new RequestOptions(opts).merge({search: \"updated=true\"}));\n        const opts = proto.prepareRequest({});\n\n        expect(opts.url).toBe(\"/request\");\n        expect(opts.search && opts.search.toString()).toEqual(\"updated=true\");\n    });\n\n    it(\"writes request\", () => {\n\n        const proto = protocol.instead().writeRequest((request: In2, opts: RequestOptionsArgs) => {\n            return new RequestOptions(opts).merge({body: request.request2});\n        });\n        const opts = proto.writeRequest({request2: \"request2\"}, {});\n\n        expect(opts.body).toBe(\"request2\");\n\n    });\n\n    it(\"updates request before it is written\", () => {\n\n        const proto = protocol.prior().updateRequest((request, opts) => {\n            request.update = \"update1\";\n            request.written = \"rewritten1\";\n            return new RequestOptions(opts).merge({body: request});\n        });\n        const opts = proto.writeRequest({request: \"request1\"}, {});\n        const body = opts.body as In;\n\n        expect(body.request).toBe(\"request1\");\n        expect(body.update).toBe(\"update1\");\n        expect(body.written).toBe(\"written1\");\n    });\n\n    it(\"updates request after it is written\", () => {\n\n        const proto = protocol.then().updateRequest(\n            (request, opts) => {\n                request.update = \"update1\";\n                request.written = \"rewritten1\";\n                return new RequestOptions(opts).merge({body: request});\n            });\n        const opts = proto.writeRequest({request: \"request1\"}, {});\n        const body = opts.body as In;\n\n        expect(body.request).toBe(\"request1\");\n        expect(body.update).toBe(\"update1\");\n        expect(body.written).toBe(\"rewritten1\");\n    });\n\n    it(\"reads response\", () => {\n\n        const proto = protocol.instead().readResponse(() => {\n            return {\n                response2: \"response2\"\n            } as Out2\n        });\n        const response = proto.readResponse(new Response(new ResponseOptions()));\n\n        expect(response.response2).toBe(\"response2\");\n    });\n\n    it(\"handles error\", () => {\n\n        const proto = protocol.then().handleError(error => {\n\n            const err = error as TestErrorResponse;\n\n            err.test = \"error1\";\n\n            return err;\n        });\n        const error = proto.handleError({response: new Response(new ResponseOptions())}) as TestErrorResponse;\n\n        expect(error.test).toBe(\"error1\");\n    });\n});\n\ninterface TestErrorResponse extends ErrorResponse {\n    test: any;\n}\n\ndescribe(\"JSON protocol\", () => {\n\n    const protocol = JSON_PROTOCOL;\n\n    it(\"writes request\", () => {\n\n        const request: In = {request: \"some value\", numeric: 13};\n        const opts = protocol.writeRequest(request, {});\n        const response: In = JSON.parse(opts.body);\n\n        expect(opts.headers!.get(\"Content-Type\")).toBe(\"application/json\");\n        expect(response.request).toBe(request.request);\n        expect(response.numeric).toBe(request.numeric);\n    });\n\n    it(\"reads response\", () => {\n\n        const value: In = {\n            request: \"Request1\",\n            numeric: 333,\n        };\n        const read: In = protocol.readResponse(new Response(new ResponseOptions({\n            body: JSON.stringify(value),\n        })));\n\n        expect(read.request).toBe(value.request);\n        expect(read.numeric).toBe(value.numeric);\n    });\n});\n","import {Observable} from \"rxjs/Rx\";\nimport {NgModule} from \"@angular/core\";\nimport {\n    Http,\n    ConnectionBackend,\n    Response,\n    ResponseOptions,\n    RequestOptionsArgs,\n    RequestOptions,\n    RequestMethod\n} from \"@angular/http\";\nimport {inject, TestBed} from \"@angular/core/testing\";\nimport {MockBackend, MockConnection} from \"@angular/http/testing\";\nimport {platformBrowserDynamicTesting, BrowserDynamicTestingModule} from \"@angular/platform-browser-dynamic/testing\";\nimport {RikeModule} from \"../ng2rike\";\nimport {Rike, requestMethod} from \"./rike\";\nimport {RikeOptions, BaseRikeOptions} from \"./options\";\nimport {HTTP_PROTOCOL, jsonProtocol, Protocol, ErrorResponse} from \"./protocol\";\n\nvar initialized = false;\n\nexport function addRikeProviders() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    TestBed.initTestEnvironment(RikeTestModule, platformBrowserDynamicTesting());\n}\n\n@NgModule({\n    imports: [BrowserDynamicTestingModule, RikeModule],\n    providers: [\n        MockBackend,\n        {\n            provide: ConnectionBackend,\n            useExisting: MockBackend\n        },\n        Http,\n        {\n            provide: RikeOptions,\n            useValue: new BaseRikeOptions({baseUrl: \"/test-root\"})\n        },\n    ]\n})\nexport class RikeTestModule {\n}\n\ndescribe(\"Rike\", () => {\n\n    let rike: Rike;\n    let back: MockBackend;\n\n    beforeEach(() => addRikeProviders());\n\n    beforeEach(inject([MockBackend, Rike], (_be: MockBackend, _rike: Rike) => {\n        back = _be;\n        rike = _rike;\n    }));\n\n    it(\"is initialized\", () => {\n        expect(rike.options.baseUrl).toBe(\"/test-root\");\n    });\n\n    function loadRequestTest(\n        method: RequestMethod,\n        read: (rike: Rike) => ((url: string) => Observable<Response>)): (done: DoneFn) => void {\n        return done => {\n            back.connections.subscribe((connection: MockConnection) => {\n                expect(connection.request.method).toBe(method);\n                expect(connection.request.url).toBe(\"/test-root/request-url\");\n                connection.mockRespond(new Response(new ResponseOptions({\n                    body: \"response1\",\n                })));\n            });\n\n            let succeed = false;\n\n            read(rike).call(rike, \"request-url\").subscribe(\n                (response: Response) => {\n                    expect(response.text()).toBe(\"response1\");\n                    succeed = true;\n                },\n                (err: any) => done.fail(err),\n                () => {\n                    expect(succeed).toBeTruthy(\"Response not received\");\n                    done();\n                });\n        }\n    }\n\n    it(\"processes GET request\", loadRequestTest(RequestMethod.Get, rike => rike.get));\n    it(\"processes DELETE request\", loadRequestTest(RequestMethod.Delete, rike => rike.delete));\n    it(\"processes HEAD request\", loadRequestTest(RequestMethod.Head, rike => rike.head));\n\n    function sendRequestTest(\n        method: RequestMethod,\n        read: (rike: Rike) => ((url: string, body: any) => Observable<Response>)): (done: DoneFn) => void {\n        return done => {\n            back.connections.subscribe((connection: MockConnection) => {\n                expect(connection.request.method).toBe(method);\n                expect(connection.request.url).toBe(\"/test-root/send-request-url\");\n                expect(connection.request.text()).toBe(\"request2\");\n                connection.mockRespond(new Response(new ResponseOptions({\n                    body: \"response1\",\n                })));\n            });\n            read(rike).call(rike, \"send-request-url\", \"request2\").subscribe((response: Response) => {\n                expect(response.text()).toBe(\"response1\");\n                done();\n            });\n        }\n    }\n\n    it(\"processes POST request\", sendRequestTest(RequestMethod.Post, rike => rike.post));\n    it(\"processes PUT request\", sendRequestTest(RequestMethod.Put, rike => rike.put));\n    it(\"processes PATCH request\", sendRequestTest(RequestMethod.Patch, rike => rike.patch));\n\n    it(\"processes HTTP error\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            connection.mockError(new Error(\"Response error\"));\n        });\n        rike.get(\"request-url\").subscribe(\n            () => {\n                done.fail(\"Response received\");\n            },\n            (error: ErrorResponse) => {\n\n                const err = error.error as Error;\n\n                expect(err.message).toBe(\"Response error\");\n\n                done();\n            });\n    });\n\n    it(\"creates target with the protocol\", () => {\n\n        const targetId = \"target1\";\n        const target = rike.target(targetId);\n\n        expect(target.target).toBe(targetId);\n        expect(target.protocol).toBe(HTTP_PROTOCOL);\n    });\n\n    it(\"creates JSON target\", () => {\n\n        const targetId = \"target1\";\n        const target = rike.json(targetId);\n\n        expect(target.target).toBe(targetId);\n        expectJsonProtocol(target.protocol);\n    });\n\n    it(\"creates target with specified protocol\", () => {\n\n        const protocol = jsonProtocol<string, string>()\n            .instead()\n            .writeRequest((val: number, opts: RequestOptionsArgs) =>\n                new RequestOptions(opts).merge({body: val}));\n        const targetId = \"target1\";\n        const target = rike.target(targetId, protocol);\n\n        expect(target.target).toBe(targetId);\n        expect(protocol.writeRequest(-5, {}).body).toBe(-5);\n    });\n});\n\nfunction requestMethodTest(method: RequestMethod, value: string | RequestMethod) {\n    return () => expect(requestMethod(value)).toBe(method);\n}\n\ndescribe(\"requestMethod\", () => {\n    it(\"GET\", requestMethodTest(RequestMethod.Get, \"GeT\"));\n    it(\"POST\", requestMethodTest(RequestMethod.Post, \"pOSt\"));\n    it(\"PUT\", requestMethodTest(RequestMethod.Put, \"put\"));\n    it(\"DELETE\", requestMethodTest(RequestMethod.Delete, \"deletE\"));\n    it(\"OPTIONS\", requestMethodTest(RequestMethod.Options, \"OPTIONS\"));\n    it(\"HEAD\", requestMethodTest(RequestMethod.Head, \"hEad\"));\n    it(\"PATCH\", requestMethodTest(RequestMethod.Patch, \"pAtch\"));\n    it(\"specified as is\", requestMethodTest(RequestMethod.Post, RequestMethod.Post));\n\n    it(\"rejects unknown method\", () => {\n        expect(() => requestMethod(\"some\")).toThrow();\n    });\n\n    it(\"rejects empty method\", () => {\n        expect(() => requestMethod(\"\")).toThrow();\n    });\n});\n\ninterface Data {\n    a: string;\n    b: number;\n    c: string[];\n}\n\nexport function expectJsonProtocol(protocol: Protocol<any, any>) {\n\n    const value: Data = {\n        a: \"test\",\n        b: 13,\n        c: [\"foo\", \"bar\", \"baz\"]\n    };\n\n    const written = protocol.writeRequest(value, {}).body as string;\n    const restored: Data = JSON.parse(written);\n\n    expect(restored.a).toBe(value.a, \"Invalid data restored from JSON\");\n    expect(restored.b).toBe(value.b, \"Invalid data restored from JSON\");\n    expect(restored.c).toEqual(value.c, \"Invalid data restored from JSON\");\n}\n","import {Response, RequestMethod, ResponseOptions} from \"@angular/http\";\nimport {inject} from \"@angular/core/testing\";\nimport {MockBackend, MockConnection} from \"@angular/http/testing\";\nimport {Observable} from \"rxjs/Rx\";\nimport {Rike, RikeTarget, RikeOperation} from \"./rike\";\nimport {addRikeProviders} from \"./rike.spec\";\nimport {RikeEvent, RikeErrorEvent} from \"./event\";\n\ndescribe(\"RikeOperation\", () => {\n\n    let rike: Rike;\n    let back: MockBackend;\n    let target: RikeTarget<any, Response>;\n\n    beforeEach(() => addRikeProviders());\n\n    beforeEach(inject([MockBackend, Rike], (_be: MockBackend, _rike: Rike) => {\n        back = _be;\n        rike = _rike;\n        target = rike.target(\"target\").withBaseUrl(\"target-url\");\n    }));\n\n    function loadRequestTest(\n        method: RequestMethod,\n        read: (op: RikeOperation<any, any>) => ((url: string) => Observable<Response>)): (done: DoneFn) => void {\n        return done => {\n            back.connections.subscribe((connection: MockConnection) => {\n                expect(connection.request.method).toBe(method);\n                expect(connection.request.url).toBe(\"/test-root/target-url/request-url\");\n                connection.mockRespond(new Response(new ResponseOptions({\n                    body: \"response1\",\n                })));\n            });\n\n            const op = target.operation(\"operation1\");\n\n            read(op).call(op, \"request-url\").subscribe((response: Response) => {\n                expect(response.text()).toBe(\"response1\");\n                done();\n            });\n        }\n    }\n\n    it(\"processes GET request\", loadRequestTest(RequestMethod.Get, op => op.get));\n    it(\"processes DELETE request\", loadRequestTest(RequestMethod.Delete, op => op.delete));\n    it(\"processes HEAD request\", loadRequestTest(RequestMethod.Head, op => op.head));\n\n    function sendRequestTest(\n        method: RequestMethod,\n        read: (op: RikeOperation<any, any>) =>\n            ((body: any, url: string) => Observable<Response>)): (done: DoneFn) => void {\n        return done => {\n            back.connections.subscribe((connection: MockConnection) => {\n                expect(connection.request.method).toBe(method);\n                expect(connection.request.url).toBe(\"/test-root/target-url/send-request-url\");\n                expect(connection.request.text()).toBe(\"request2\");\n                connection.mockRespond(new Response(new ResponseOptions({\n                    body: \"response1\",\n                })));\n            });\n\n            const op = target.operation(\"operation1\");\n            let succeed = false;\n\n            read(op).call(op, \"request2\", \"send-request-url\", ).subscribe(\n                (response: Response) => {\n                    expect(response.text()).toBe(\"response1\");\n                    succeed = true;\n                },\n                (err: any) => done.fail(err),\n                () => {\n                    expect(succeed).toBeTruthy(\"No response received\");\n                    done();\n                });\n        }\n    }\n\n    it(\"processes POST request\", sendRequestTest(RequestMethod.Post, op => op.post));\n    it(\"processes PUT request\", sendRequestTest(RequestMethod.Put, op => op.put));\n    it(\"processes PATCH request\", sendRequestTest(RequestMethod.Patch, op => op.patch));\n\n    it(\"loads with GET by default\", loadRequestTest(RequestMethod.Get, op => op.load));\n    it(\"loads with specified method\", loadRequestTest(RequestMethod.Options, op => op.withMethod(\"options\").load));\n    it(\"loads from specified URL\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            expect(connection.request.url).toBe(\"/test-root/target-url/load-url\");\n            connection.mockRespond(new Response(new ResponseOptions()));\n        });\n\n        target.operation(\"operation1\").withUrl(\"load-url\").load().subscribe(done);\n    });\n    it(\"loads from target URL by default\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            expect(connection.request.url).toBe(\"/test-root/target-url\");\n            connection.mockRespond(new Response(new ResponseOptions()));\n        });\n\n        target.operation(\"operation1\").load().subscribe(done);\n    });\n\n    it(\"sends with specified method\", sendRequestTest(RequestMethod.Put, op => op.withMethod(\"put\").send));\n    it(\"sends to specified URL\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            expect(connection.request.url).toBe(\"/test-root/target-url/send-url\");\n            connection.mockRespond(new Response(new ResponseOptions()));\n        });\n\n        target.operation(\"operation1\").withUrl(\"send-url\").send(\"abc\").subscribe(done);\n    });\n    it(\"sends to target URL by default\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            expect(connection.request.url).toBe(\"/test-root/target-url\");\n            connection.mockRespond(new Response(new ResponseOptions()));\n        });\n\n        target.operation(\"operation1\").send(\"abc\").subscribe(done);\n    });\n\n});\n\ndescribe(\"RikeOperation event\", () => {\n\n    let rike: Rike;\n    let back: MockBackend;\n    let target: RikeTarget<any, Response>;\n\n    beforeEach(() => addRikeProviders());\n\n    beforeEach(inject([MockBackend, Rike], (_be: MockBackend, _rike: Rike) => {\n        back = _be;\n        rike = _rike;\n        target = rike.target(\"target\").withBaseUrl(\"target-url\");\n    }));\n\n    function mockRespond() {\n        back.connections.subscribe((connection: MockConnection) => {\n            connection.mockRespond(new Response(new ResponseOptions({\n                body: \"response1\",\n            })));\n        });\n    }\n\n    it(\"start\", done => {\n        mockRespond();\n\n        const op = target.operation(\"operation\");\n        let complete = false;\n\n        target.rikeEvents.subscribe(\n            (ev: RikeEvent) => {\n                if (!complete) {\n                    complete = true;\n                    expect(ev.operation).toBe(op);\n                    expect(ev.target).toBe(target);\n                    expect(ev.complete).toBeFalsy();\n                    done();\n                }\n            },\n            (err: any) => done.fail(err));\n\n        op.load().subscribe();\n    });\n\n    it(\"complete\", done => {\n        mockRespond();\n\n        const op = target.operation(\"operation\");\n        let events = 0;\n\n        target.rikeEvents.subscribe(\n            (ev: RikeEvent) => {\n                expect(ev.operation).toBe(op);\n                expect(ev.target).toBe(target);\n                if (events++) {\n                    expect(ev.complete).toBeTruthy();\n                    expect(ev.error).toBeUndefined();\n\n                    const result = ev.result as Response;\n\n                    expect(result.text()).toBe(\"response1\");\n                    done();\n                }\n            },\n            (err: any) => done.fail(err));\n\n        op.load().subscribe();\n    });\n\n    it(\"error\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            connection.mockError(new Error(\"error1\"));\n        });\n\n        const op = target.operation(\"operation\");\n        let events = 0;\n\n        target.rikeEvents.subscribe(\n            (ev: RikeEvent) => {\n                if (!events++) {\n                    expect(ev.operation).toBe(op);\n                    expect(ev.target).toBe(target);\n                } else {\n                    expect(events).toBe(2, \"Start event not received yet\");\n                    expect(ev.complete).toBeTruthy();\n\n                    const error = ev.error as Error;\n\n                    expect(error.message).toBe(\"error1\");\n                    done();\n                }\n            },\n            (err: any) => done.fail(err));\n\n        op.load().subscribe();\n    });\n\n    it(\"exception\", done => {\n        back.connections.subscribe(() => {\n            throw new Error(\"error1\");\n        });\n\n        const op = target.operation(\"operation\");\n        let events = 0;\n\n        target.rikeEvents.subscribe(\n            (ev: RikeEvent) => {\n                events++;\n                expect(ev.operation).toBe(op);\n                expect(ev.target).toBe(target);\n            },\n            (ev: RikeErrorEvent) => {\n                expect(events).toBe(1, \"Start event not received yet\");\n                expect(ev.complete).toBeTruthy();\n\n                const error = ev.error as Error;\n\n                expect(error.message).toBe(\"error1\");\n                done();\n            });\n\n        expect(() => op.load().subscribe()).toThrowError(\"error1\");\n    });\n});\n","import {inject} from \"@angular/core/testing\";\nimport {Response, RequestOptionsArgs, RequestOptions, ResponseOptions} from \"@angular/http\";\nimport {MockBackend, MockConnection} from \"@angular/http/testing\";\nimport {addRikeProviders, expectJsonProtocol} from \"./rike.spec\";\nimport {Rike, RikeTarget} from \"./rike\";\nimport {JSON_PROTOCOL, jsonProtocol} from \"./protocol\";\n\ndescribe(\"RikeTarget\", () => {\n\n    let rike: Rike;\n    let back: MockBackend;\n    let target: RikeTarget<any, Response>\n\n    beforeEach(() => addRikeProviders());\n\n    beforeEach(inject([MockBackend, Rike], (_be: MockBackend, _rike: Rike) => {\n        back = _be;\n        rike = _rike;\n        target = rike.target(\"target\");\n    }));\n\n    it(\"created\", () => {\n        expect(target.baseUrl).toBeUndefined();\n    });\n\n    it(\"updated with base url\", () => {\n\n        const t = target.withBaseUrl(\"target-url\");\n\n        expect(t).toBe(target);\n        expect(t.baseUrl).toBe(\"target-url\");\n    });\n\n    it(\"creates operation over the target protocol\", () => {\n\n        const op = target.operation(\"operation1\");\n\n        expect(op.target).toBe(target);\n        expect(op.name).toBe(\"operation1\");\n        expect(op.protocol).toBe(target.protocol);\n    });\n\n    it(\"creates JSON operation\", () => {\n\n        const op = target.json(\"jsonOperation\");\n\n        expect(op.target).toBe(target);\n        expect(op.name).toBe(\"jsonOperation\");\n        expectJsonProtocol(op.protocol);\n    });\n\n    it(\"creates operation over specified protocol\", () => {\n\n        const proto = jsonProtocol<string, string>()\n            .instead()\n            .writeRequest((val: number, opts: RequestOptionsArgs) =>\n                new RequestOptions(opts).merge({body: JSON.stringify(val)}));\n        const op = target.operation(\"customOperation\", proto);\n\n        expect(op.target).toBe(target);\n        expect(op.name).toBe(\"customOperation\");\n        expect(JSON.parse(op.protocol.writeRequest(13, {}).body)).toBe(13);\n    });\n\n    it(\"current operation updated on request\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            connection.mockRespond(new Response(new ResponseOptions({\n                body: \"response1\",\n            })));\n        });\n\n        const op = target.operation(\"operation\").withUrl(\"/request-url\");\n\n        op.load().subscribe(\n            () => {\n                expect(target.currentOperation).toBe(op, \"Current operation not set on response\");\n            },\n            (err: any) => done.fail(err),\n            () => {\n                expect(target.currentOperation).toBe(op, \"Current operation not set when complete\");\n                setTimeout(() => {\n                    expect(target.currentOperation).toBeUndefined(\"Current operation not cleared\");\n                    done();\n                });\n            })\n    });\n\n    it(\"current operation updated on error\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            connection.mockError(new Error(\"error1\"));\n        });\n\n        const op = target.operation(\"operation\").withUrl(\"/request-url\");\n\n        op.load().subscribe(\n            () => {\n                done.fail(\"Response received\");\n            },\n            () => {\n                expect(target.currentOperation).toBe(op, \"Current operation not set on error\");\n                setTimeout(() => {\n                    expect(target.currentOperation).toBeUndefined(\"Current operation not cleared\");\n                    done();\n                });\n            });\n    });\n});\n"]}