{"version":3,"file":"ng2-rike.js","sourceRoot":"","sources":["../src/ng2-rike.spec.ts","../src/ng2-rike/event.ts","../src/ng2-rike/options.ts","../src/ng2-rike/data.ts","../src/ng2-rike/rike.ts","../src/ng2-rike/resource.ts","../src/ng2-rike.ts","../src/ng2-rike/data.spec.ts","../src/ng2-rike/rike.spec.ts","../src/ng2-rike/rike-target.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,+BAA+B;;;;;;;;YCG/B;;;;eAIG;YACH;gBAAA;gBAqCA,CAAC;gBAnCG;;;;;;;;;;mBAUG;gBACI,uBAAO,GAAd,UAAe,EAOd;wBAPe,sBAAQ,EAAE,sBAAQ,EAAE,4BAAW,EAAE,0BAAU,EAAE,cAAI;oBAQ7D,MAAM,CAAC;wBACH,OAAO,EAAE,eAAe;wBACxB,KAAK,EAAE,IAAI;wBACX,kBAAQ;wBACR,kBAAQ;wBACR,wBAAW;wBACX,sBAAU;wBACV,UAAI;qBACP,CAAC;gBACN,CAAC;;gBAOL,sBAAC;YAAD,CAAC,AArCD,IAqCC;YArCD,6CAqCC,CAAA;YAED;;;;eAIG;YACH;gBAAA;gBAiCA,CAAC;gBA5BG,sBAAI,6BAAM;oBAHV;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;oBACjC,CAAC;;;mBAAA;gBA0BL,gBAAC;YAAD,CAAC,AAjCD,IAiCC;YAjCD,iCAiCC,CAAA;YAED;;eAEG;YACH;gBAAwC,sCAAS;gBAE7C,4BAAoB,UAAmC;oBACnD,iBAAO,CAAC;oBADQ,eAAU,GAAV,UAAU,CAAyB;gBAEvD,CAAC;gBAED,sBAAI,yCAAS;yBAAb;wBACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBAC3B,CAAC;;;mBAAA;gBAED,sBAAI,wCAAQ;yBAAZ;wBACI,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC;;;mBAAA;gBAED,sBAAI,qCAAK;yBAAT;wBACI,MAAM,CAAC,SAAS,CAAC;oBACrB,CAAC;;;mBAAA;gBAED,sBAAI,sCAAM;yBAAV;wBACI,MAAM,CAAC,SAAS,CAAC;oBACrB,CAAC;;;mBAAA;gBAEL,yBAAC;YAAD,CAAC,AAtBD,CAAwC,SAAS,GAsBhD;YAtBD,mDAsBC,CAAA;YAED;;eAEG;YACH;gBAAsC,oCAAS;gBAE3C,0BAAoB,UAAmC,EAAU,OAAY;oBACzE,iBAAO,CAAC;oBADQ,eAAU,GAAV,UAAU,CAAyB;oBAAU,YAAO,GAAP,OAAO,CAAK;gBAE7E,CAAC;gBAED,sBAAI,uCAAS;yBAAb;wBACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBAC3B,CAAC;;;mBAAA;gBAED,sBAAI,sCAAQ;yBAAZ;wBACI,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;;;mBAAA;gBAED,sBAAI,mCAAK;yBAAT;wBACI,MAAM,CAAC,SAAS,CAAC;oBACrB,CAAC;;;mBAAA;gBAED,sBAAI,oCAAM;yBAAV;wBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;oBACxB,CAAC;;;mBAAA;gBAEL,uBAAC;YAAD,CAAC,AAtBD,CAAsC,SAAS,GAsB9C;YAtBD,+CAsBC,CAAA;YAED;;;;eAIG;YACH;gBAAoC,kCAAS;gBAEzC,wBAAoB,UAAmC,EAAU,MAAW;oBACxE,iBAAO,CAAC;oBADQ,eAAU,GAAV,UAAU,CAAyB;oBAAU,WAAM,GAAN,MAAM,CAAK;gBAE5E,CAAC;gBAED,sBAAI,qCAAS;yBAAb;wBACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBAC3B,CAAC;;;mBAAA;gBAED,sBAAI,oCAAQ;yBAAZ;wBACI,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;;;mBAAA;gBAED,sBAAI,iCAAK;yBAAT;wBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;oBACvB,CAAC;;;mBAAA;gBAED,sBAAI,kCAAM;yBAAV;wBACI,MAAM,CAAC,SAAS,CAAC;oBACrB,CAAC;;;mBAAA;gBAEL,qBAAC;YAAD,CAAC,AAtBD,CAAoC,SAAS,GAsB5C;YAtBD,2CAsBC,CAAA;YAED;;eAEG;YACH;gBAAqC,mCAAc;gBAE/C,yBAAY,SAAkC,EAAU,MAA2B;oBAC/E,kBAAM,SAAS,EAAE,MAAM,IAAI,QAAQ,CAAC,CAAC;oBADe,WAAM,GAAN,MAAM,CAAqB;gBAEnF,CAAC;gBAED,sBAAI,kCAAK;yBAAT;wBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;oBACvB,CAAC;;;mBAAA;gBAEL,sBAAC;YAAD,CAAC,AAVD,CAAqC,cAAc,GAUlD;YAVD,6CAUC,CAAA;;;;;;;sCCjGY,oBAAoB;IAtFjC;;;;;;;;OAQG;IACH,qBAA4B,OAA2B,EAAE,GAAW;QAChE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,GAAG,CAAC;QACf,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,GAAG,CAAC,CAAA,eAAe;QAC9B,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,GAAG,CAAC,CAAA,WAAW;QAC1B,CAAC;QACD,MAAM,CAAC,OAAO,GAAG,GAAG,GAAG,GAAG,CAAC;IAC/B,CAAC;IAXD,qCAWC,CAAA;;;;YAcD;;;;;;;eAOG;YACH;gBAAA;gBAeA,CAAC;gBAXG;;;;;;mBAMG;gBACH,iCAAW,GAAX,UAAY,GAAW;oBACnB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;gBAC1C,CAAC;gBAEL,kBAAC;YAAD,CAAC,AAfD,IAeC;YAfD,qCAeC,CAAA;YAED;;;;eAIG;YACH;gBAAqC,mCAAW;gBAI5C,yBAAY,IAAsB;oBAC9B,iBAAO,CAAC;oBACR,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;wBACP,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;oBACjC,CAAC;gBACL,CAAC;gBAED,sBAAI,oCAAO;yBAAX;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;oBACzB,CAAC;;;mBAAA;gBAEL,sBAAC;YAAD,CAAC,AAfD,CAAqC,WAAW,GAe/C;YAfD,6CAeC,CAAA;YAED;;;;eAIG;YACU,kCAAA,oBAAoB,GAAgB,IAAI,eAAe,EAAE,CAAA,CAAC;;;;;;;;qHCoI1D,cAAc,EAOd,YAAY,wBAqBZ,uBAAuB;;;;;;;YApPpC;;;;;;;;;eASG;YACH;gBAAA;gBAuGA,CAAC;gBArGG,kCAAkC;gBAClC;;;;;;;;;;;;mBAYG;gBACH,iCAAc,GAAd,UAAe,OAA2B;oBACtC,MAAM,CAAC,OAAO,CAAC;gBACnB,CAAC;gBAED;;;;;;;;mBAQG;gBACH,qCAAkB,GAAlB,UACI,OAA4D,EAC5D,KAAe;oBACf,MAAM,CAAC,IAAI,sBAAsB,CAAU,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;gBACrE,CAAC;gBAiBD;;;;;;mBAMG;gBACH,mCAAgB,GAAhB,UACI,YAA8E;oBAC9E,MAAM,CAAC,IAAI,oBAAoB,CAAU,IAAI,EAAE,YAAY,CAAC,CAAC;gBACjE,CAAC;gBAED;;;;;;;;;mBASG;gBACH,oCAAiB,GAAjB,UACI,aAA+E,EAC/E,KAAe;oBAFnB,iBASC;oBANG,MAAM,CAAC,IAAI,oBAAoB,CAAU,IAAI,EAAE,UAAC,OAAO,EAAE,IAAI;wBACzD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACT,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,OAAO,EAAE,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;wBACpE,CAAC;wBACD,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,KAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpE,CAAC,CAAC,CAAC;gBACP,CAAC;gBAWD;;;;;;mBAMG;gBACH,mCAAgB,GAAhB,UAAsB,YAAyC;oBAC3D,MAAM,CAAC,IAAI,oBAAoB,CAAU,IAAI,EAAE,YAAY,CAAC,CAAC;gBACjE,CAAC;gBAEL,eAAC;YAAD,CAAC,AAvGD,IAuGC;YAvGD,+BAuGC,CAAA;YAED;gBAAiD,mCAAc;gBAA/D;oBAAiD,8BAAc;gBAQ/D,CAAC;gBANG,sCAAY,GAAZ,UAAa,OAAU,EAAE,OAA2B;oBAChD,MAAM,CAAC,IAAI,qBAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAC,CAAC,CAAC;gBAC9E,CAAC;gBAIL,sBAAC;YAAD,CAAC,AARD,CAAiD,QAAQ,GAQxD;YARD,6CAQC,CAAA;YAED;gBAA8C,0CAAiB;gBAE3D,gCACY,SAA4B,EAC5B,QAA6D,EAC7D,MAAgB;oBACxB,iBAAO,CAAC;oBAHA,cAAS,GAAT,SAAS,CAAmB;oBAC5B,aAAQ,GAAR,QAAQ,CAAqD;oBAC7D,WAAM,GAAN,MAAM,CAAU;gBAE5B,CAAC;gBAED,+CAAc,GAAd,UAAe,OAA2B;oBACtC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBACd,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;oBACjE,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBACjE,CAAC;gBAED,6CAAY,GAAZ,UAAa,OAAW,EAAE,OAA2B;oBACjD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBACzD,CAAC;gBAED,6CAAY,GAAZ,UAAa,QAAkB;oBAC3B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;gBACjD,CAAC;gBAEL,6BAAC;YAAD,CAAC,AAxBD,CAA8C,QAAQ,GAwBrD;YAED;gBAA4C,wCAAiB;gBAEzD,8BACY,aAAiC,EACjC,aAA+E;oBACvF,iBAAO,CAAC;oBAFA,kBAAa,GAAb,aAAa,CAAoB;oBACjC,kBAAa,GAAb,aAAa,CAAkE;gBAE3F,CAAC;gBAED,6CAAc,GAAd,UAAe,OAA2B;oBACtC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBACtD,CAAC;gBAED,2CAAY,GAAZ,UAAa,OAAW,EAAE,OAA2B;oBACjD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAChD,CAAC;gBAED,2CAAY,GAAZ,UAAa,QAAkB;oBAC3B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;gBACrD,CAAC;gBAEL,2BAAC;YAAD,CAAC,AApBD,CAA4C,QAAQ,GAoBnD;YAED;gBAA4C,wCAAiB;gBAEzD,8BAAoB,YAA+B,EAAU,aAA0C;oBACnG,iBAAO,CAAC;oBADQ,iBAAY,GAAZ,YAAY,CAAmB;oBAAU,kBAAa,GAAb,aAAa,CAA6B;gBAEvG,CAAC;gBAED,6CAAc,GAAd,UAAe,OAA2B;oBACtC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBACrD,CAAC;gBAED,2CAAY,GAAZ,UAAa,OAAW,EAAE,OAA2B;oBACjD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAC5D,CAAC;gBAED,2CAAY,GAAZ,UAAa,QAAkB;oBAC3B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBACxC,CAAC;gBAED,+CAAgB,GAAhB,UAAsB,YAAyC;oBAC3D,MAAM,CAAC,IAAI,oBAAoB,CAAU,IAAI,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;gBAC9E,CAAC;gBAEL,2BAAC;YAAD,CAAC,AAtBD,CAA4C,QAAQ,GAsBnD;YAED;gBAA8B,gCAAkB;gBAAhD;oBAA8B,8BAAkB;gBAUhD,CAAC;gBARG,gCAAS,GAAT,UAAU,OAAU;oBAChB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBACnC,CAAC;gBAED,mCAAY,GAAZ,UAAa,QAAkB;oBAC3B,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAC3B,CAAC;gBAEL,mBAAC;YAAD,CAAC,AAVD,CAA8B,eAAe,GAU5C;YAED;;;;;;eAMG;YACU,4BAAA,cAAc,GAAuB,IAAI,YAAY,EAAO,CAAA,CAAC;YAE1E;;;;eAIG;YACU,0BAAA,YAAY,GAA8B,cAAM,OAAA,cAAc,EAAd,CAAc,CAAA,CAAC;YAE5E;gBAAmC,wCAAuB;gBAA1D;oBAAmC,8BAAuB;gBAU1D,CAAC;gBARG,2CAAY,GAAZ,UAAa,OAAY,EAAE,OAA2B;oBAClD,MAAM,CAAC,IAAI,qBAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;gBAC9D,CAAC;gBAED,2CAAY,GAAZ,UAAa,QAAkB;oBAC3B,MAAM,CAAC,QAAQ,CAAC;gBACpB,CAAC;gBAEL,2BAAC;YAAD,CAAC,AAVD,CAAmC,QAAQ,GAU1C;YAED;;;;;;eAMG;YACU,qCAAA,uBAAuB,GAA4B,IAAI,oBAAoB,EAAE,CAAA,CAAC;;;;;;;;QCxOrF,eAAe;IAUrB,uBAA8B,MAA8B;QACxD,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAED,IAAM,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;QAErD,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,mCAAmC,GAAG,MAAM,CAAC,CAAC;IAClE,CAAC;IAZD,yCAYC,CAAA;;;;;;;;;;;;;;;;;;;;;;YAtBK,eAAe,GAA6B;gBAC9C,KAAK,EAAE,oBAAa,CAAC,GAAG;gBACxB,MAAM,EAAE,oBAAa,CAAC,IAAI;gBAC1B,KAAK,EAAE,oBAAa,CAAC,GAAG;gBACxB,QAAQ,EAAE,oBAAa,CAAC,MAAM;gBAC9B,SAAS,EAAE,oBAAa,CAAC,OAAO;gBAChC,MAAM,EAAE,oBAAa,CAAC,IAAI;gBAC1B,OAAO,EAAE,oBAAa,CAAC,KAAK;aAC/B,CAAC;YAgBF;;;;;;;;eAQG;YAEH;gBAMI,cAAoB,KAAW,EAAE,kBAAkC,EAAc,QAAsB;oBAN3G,iBAgKC;oBA1JuB,UAAK,GAAL,KAAK,CAAM;oBAHd,gBAAW,GAAG,IAAI,mBAAY,EAAa,CAAC;oBAIzD,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,8BAAoB,CAAC;oBACjD,IAAI,CAAC,UAAU,GAAG;wBACd,sCAAkB;wBAClB,YAAY,EAAE,UAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC,EAA9C,CAA8C;qBAChG,CAAA;gBACL,CAAC;gBAOD,sBAAI,yBAAO;oBALX;;;;uBAIG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;oBACzB,CAAC;;;mBAAA;gBAOD,sBAAI,4BAAU;oBALd;;;;uBAIG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;oBAC5B,CAAC;;;mBAAA;gBAED,sBAAO,GAAP,UAAQ,OAAyB,EAAE,OAA4B;oBAC3D,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;oBAC7C,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAC9B,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;oBAChD,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAChD,CAAC;gBAED,kBAAG,GAAH,UAAI,GAAW,EAAE,OAA4B;oBACzC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC7F,CAAC;gBAED,mBAAI,GAAJ,UAAK,GAAW,EAAE,IAAS,EAAE,OAA4B;oBACrD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;gBACpG,CAAC;gBAED,kBAAG,GAAH,UAAI,GAAW,EAAE,IAAS,EAAE,OAA4B;oBACpD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;gBACnG,CAAC;gBAED,iCAAiC;gBACjC,qBAAM,GAAN,UAAO,GAAW,EAAE,OAA4B;oBAC5C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChG,CAAC;gBAED,oBAAK,GAAL,UAAM,GAAW,EAAE,IAAS,EAAE,OAA4B;oBACtD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;gBACrG,CAAC;gBAED,mBAAI,GAAJ,UAAK,GAAW,EAAE,OAA4B;oBAC1C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC9F,CAAC;gBAuBD,qBAAM,GAAN,UAAO,MAAW,EAAE,QAA6B;oBAAjD,iBAcC;oBAZG,IAAM,UAAU,GAAG,IAAI,cAAc,CACjC,IAAI,EACJ,IAAI,CAAC,UAAU,EACf,MAAM,EACN,QAAQ,IAAI,8BAAuB,CAAC,CAAC;oBAEzC,UAAU,CAAC,UAAU,CAAC,SAAS,CAC3B,UAAC,KAAgB,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAA5B,CAA4B,EAClD,UAAC,KAAU,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,EAA7B,CAA6B,EAC7C,cAAM,OAAA,KAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAA3B,CAA2B,CAAC,CAAC;oBAEvC,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAED;;;;;;mBAMG;gBACH,mBAAI,GAAJ,UAAQ,MAAW;oBACf,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,mBAAY,EAAK,CAAC,CAAC;gBAClD,CAAC;gBAED;;;;;;;mBAOG;gBACO,mCAAoB,GAA9B,UAA+B,OAA4B;oBACvD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACX,MAAM,CAAC,OAAO,CAAC;oBACnB,CAAC;oBACD,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;wBAEtB,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;wBAEpD,EAAE,CAAC,CAAC,MAAM,KAAK,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;4BACzB,OAAO,GAAG;gCACN,GAAG,EAAE,MAAM;gCACX,MAAM,EAAE,OAAO,CAAC,MAAM;gCACtB,MAAM,EAAE,OAAO,CAAC,MAAM;gCACtB,OAAO,EAAE,OAAO,CAAC,OAAO;gCACxB,IAAI,EAAE,OAAO,CAAC,IAAI;gCAClB,eAAe,EAAE,OAAO,CAAC,eAAe;6BAC3C,CAAA;wBACL,CAAC;oBACL,CAAC;oBAED,MAAM,CAAC,OAAO,CAAC;gBACnB,CAAC;gBAED,uDAAuD;gBACvD;;;;;;;mBAOG;gBACO,2BAAY,GAAtB,UACI,OAA6B,EAC7B,UAAmC,EACnC,QAA8B;oBAC9B,MAAM,CAAC,QAAQ,CAAC;gBACpB,CAAC;gBA/JL;oBAAC,iBAAU,EAAE;+BAO6D,eAAQ,EAAE;;wBAPvE;gBAiKb,WAAC;YAAD,CAAC,AAhKD,IAgKC;YAhKD,uBAgKC,CAAA;YAED;;;;;;;;;;;eAWG;YACH;gBAAA;gBA8EA,CAAC;gBAlBG;;;;;;mBAMG;gBACH,yBAAI,GAAJ,UAAQ,IAAY;oBAChB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,mBAAY,EAAK,CAAC,CAAC;gBACnD,CAAC;gBASL,iBAAC;YAAD,CAAC,AA9ED,IA8EC;YA9ED,mCA8EC,CAAA;YAED,iCAAiC;YACjC;;;;;;;;;;eAUG;YACH;gBAAA;gBA4DA,CAAC;gBApCG,sBAAI,8BAAG;yBAAP;wBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;oBAC5B,CAAC;;;mBAAA;gBAED,+BAAO,GAAP,UAAQ,GAAW;oBACf,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAC,QAAG,EAAC,CAAC,CAAC;gBACnC,CAAC;gBAED,sBAAI,iCAAM;yBAAV;wBAEI,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;wBAEnC,MAAM,CAAC,MAAM,IAAI,IAAI,GAAG,SAAS,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBAC9D,CAAC;;;mBAAA;gBAED,kCAAU,GAAV,UAAW,MAA8B;oBACrC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAC,cAAM,EAAC,CAAC,CAAC;gBACtC,CAAC;gBAmBL,oBAAC;YAAD,CAAC,AA5DD,IA4DC;YA5DD,yCA4DC,CAAA;YAaD;gBAAsC,kCAAmB;gBASrD,wBACY,KAAW,EACX,UAAyB,EACzB,OAAY,EACZ,SAA4B;oBACpC,iBAAO,CAAC;oBAJA,UAAK,GAAL,KAAK,CAAM;oBACX,eAAU,GAAV,UAAU,CAAe;oBACzB,YAAO,GAAP,OAAO,CAAK;oBACZ,cAAS,GAAT,SAAS,CAAmB;oBAXvB,gBAAW,GAAG,IAAI,mBAAY,EAAa,CAAC;gBAa7D,CAAC;gBAED,sBAAI,gCAAI;yBAAR;wBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;oBACtB,CAAC;;;mBAAA;gBAED,sBAAI,kCAAM;yBAAV;wBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;oBACxB,CAAC;;;mBAAA;gBAED,sBAAI,4CAAgB;yBAApB;wBACI,MAAM,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;oBACxD,CAAC;;;mBAAA;gBAED,sBAAI,sCAAU;yBAAd;wBACI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;oBAC5B,CAAC;;;mBAAA;gBAED,sBAAI,qCAAS;yBAAb;wBACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBAC3B,CAAC;;;mBAAA;gBAED,sBAAI,oCAAQ;yBAAZ;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;oBAC1B,CAAC;;;mBAAA;gBAED,sBAAI,mCAAO;yBAAX;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;oBACzB,CAAC;;;mBAAA;gBAED,oCAAW,GAAX,UAAY,GAAY;oBACpB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;oBACpB,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,+BAAM,GAAN;oBACI,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBAC1B,CAAC;gBAEO,gCAAO,GAAf,UAAgB,KAA0B;oBACtC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnB,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC;oBAED,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC3B,IAAI,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;4BACjB,IAAI,CAAC;gCAED,IAAM,MAAM,GAAG,IAAI,uBAAe,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;gCAErE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gCAC7B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;4BACnC,CAAE;4BAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCACT,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,sBAAc,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;gCACzE,MAAM,CAAC,CAAC;4BACZ,CAAC;oCAAS,CAAC;gCACP,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;gCAC5B,IAAI,CAAC;oCACD,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;gCAC9B,CAAC;wCAAS,CAAC;oCACP,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gCAC/B,CAAC;4BACL,CAAC;wBACL,CAAC;oBACL,CAAC;4BAAS,CAAC;wBACP,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;4BACf,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;4BAC3B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;wBAC7B,CAAC;oBACL,CAAC;oBAED,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,kCAAS,GAAT,UAAU,IAAY,EAAE,QAA6B;oBAArD,iBAOC;oBANG,MAAM,CAAC,IAAI,iBAAiB,CACxB,IAAI,EACJ,IAAI,EACJ,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,CACxB,IAAI,CAAC,QAA8B,KAAK,8BAAuB;0BACzD,QAAQ,GAAG,QAAQ,CAAC,kBAAkB,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,EAArC,CAAqC,CAAC,CAAC,CAAC,CAAC;gBAC7G,CAAC;gBAED,uCAAc,GAAd,UAAe,SAAkC;oBAE7C,IAAM,KAAK,GAAG,IAAI,0BAAkB,CAAC,SAAS,CAAC,CAAC;oBAEhD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;oBACpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC7B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;gBAC5B,CAAC;gBAED,qCAAY,GAAZ,UAAsB,SAAiC,EAAE,QAA8B;oBAAvF,iBA2CC;oBA1CG,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;oBAClE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;oBAC1B,MAAM,CAAC,IAAI,eAAU,CAAM,UAAC,gBAA+B;wBACvD,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC9B,MAAM,CAAC,CAAA,oCAAoC;wBAC/C,CAAC;wBACD,KAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC;wBAClC,KAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,SAAS,CAC7B,UAAA,YAAY;4BACR,IAAI,CAAC;gCAED,IAAM,UAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;gCAE/D,gBAAgB,CAAC,IAAI,CAAC,UAAQ,CAAC,CAAC;gCAChC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,wBAAgB,CAAC,SAAS,EAAE,UAAQ,CAAC,CAAC,CAAC;4BACrE,CAAE;4BAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCACT,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,sBAAc,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;4BAC7D,CAAC;wBACL,CAAC,EACD,UAAA,KAAK;4BACD,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,KAAI,CAAC,MAAM,GAAG,IAAI,GAAG,SAAS,CAAC,IAAI,GAAG,SAAS,EAAE,KAAK,CAAC,CAAC;4BAC5E,IAAI,CAAC;gCACD,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gCAC9B,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,sBAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;4BAChE,CAAE;4BAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCACT,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,sBAAc,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;4BAC7D,CAAC;wBACL,CAAC,EACD;4BACI,IAAI,CAAC;gCACD,gBAAgB,CAAC,QAAQ,EAAE,CAAC;4BAChC,CAAE;4BAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCACT,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,sBAAc,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;4BAC7D,CAAC;oCAAS,CAAC;gCACP,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC;oCACf,KAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;oCAC3B,KAAI,CAAC,OAAO,GAAG,SAAS,CAAC;oCACzB,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gCAC/B,CAAC;4BACL,CAAC;wBACL,CAAC,CAAC,CAAC;oBACX,CAAC,CAAC,CAAC;gBACP,CAAC;gBAEL,qBAAC;YAAD,CAAC,AAzJD,CAAsC,UAAU,GAyJ/C;YAED;gBAAyC,qCAAsB;gBAI3D,2BACY,OAAiC,EACjC,KAAa,EACb,SAA4B;oBACpC,iBAAO,CAAC;oBAHA,YAAO,GAAP,OAAO,CAA0B;oBACjC,UAAK,GAAL,KAAK,CAAQ;oBACb,cAAS,GAAT,SAAS,CAAmB;oBAEpC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;gBACjE,CAAC;gBAED,sBAAI,mCAAI;yBAAR;wBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oBAC5B,CAAC;;;mBAAA;gBAED,sBAAI,qCAAM;yBAAV;wBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;oBACxB,CAAC;;;mBAAA;gBAED,sBAAI,mCAAI;yBAAR;wBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;oBACtB,CAAC;;;mBAAA;gBAED,sBAAI,uCAAQ;yBAAZ;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;oBAC1B,CAAC;;;mBAAA;gBAED,uCAAW,GAAX,UAAY,OAA4B;oBACpC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACV,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBACjD,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,sBAAI,sCAAO;yBAAX;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;oBACzB,CAAC;;;mBAAA;gBAED,gCAAI,GAAJ,UAAK,GAAY,EAAE,OAA4B;oBAC3C,IAAI,CAAC;wBACD,IAAI,CAAC,cAAc,EAAE,CAAC;wBACtB,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;wBACvD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;oBACnF,CAAE;oBAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,sBAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1D,MAAM,CAAC,CAAC;oBACZ,CAAC;gBACL,CAAC;gBAED,gCAAI,GAAJ,UAAK,OAAW,EAAE,GAAY,EAAE,OAA4B;oBACxD,IAAI,CAAC;wBACD,IAAI,CAAC,cAAc,EAAE,CAAC;wBACtB,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;wBACnF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;oBACnF,CAAE;oBAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,sBAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1D,MAAM,CAAC,CAAC;oBACZ,CAAC;gBACL,CAAC;gBAED,+BAAG,GAAH,UAAI,GAAY,EAAE,OAA4B;oBAC1C,IAAI,CAAC;wBACD,IAAI,CAAC,cAAc,EAAE,CAAC;wBACtB,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,oBAAa,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;wBAC/D,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;oBAC/E,CAAE;oBAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,sBAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1D,MAAM,CAAC,CAAC;oBACZ,CAAC;gBACL,CAAC;gBAED,gCAAI,GAAJ,UAAK,OAAW,EAAE,GAAY,EAAE,OAA4B;oBACxD,IAAI,CAAC;wBACD,IAAI,CAAC,cAAc,EAAE,CAAC;wBACtB,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,oBAAa,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;wBAC5F,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;oBAC9F,CAAE;oBAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,sBAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1D,MAAM,CAAC,CAAC;oBACZ,CAAC;gBACL,CAAC;gBAED,+BAAG,GAAH,UAAI,OAAW,EAAE,GAAY,EAAE,OAA4B;oBACvD,IAAI,CAAC;wBACD,IAAI,CAAC,cAAc,EAAE,CAAC;wBACtB,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,oBAAa,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;wBAC3F,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;oBAC7F,CAAE;oBAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,sBAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1D,MAAM,CAAC,CAAC;oBACZ,CAAC;gBACL,CAAC;gBAED,iCAAiC;gBACjC,kCAAM,GAAN,UAAO,GAAY,EAAE,OAA4B;oBAC7C,IAAI,CAAC;wBACD,IAAI,CAAC,cAAc,EAAE,CAAC;wBACtB,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,oBAAa,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;wBAClE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;oBAClF,CAAE;oBAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,sBAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1D,MAAM,CAAC,CAAC;oBACZ,CAAC;gBACL,CAAC;gBAED,iCAAK,GAAL,UAAM,OAAW,EAAE,GAAY,EAAE,OAA4B;oBACzD,IAAI,CAAC;wBACD,IAAI,CAAC,cAAc,EAAE,CAAC;wBACtB,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,oBAAa,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;wBAC7F,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;oBAC/F,CAAE;oBAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,sBAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1D,MAAM,CAAC,CAAC;oBACZ,CAAC;gBACL,CAAC;gBAED,gCAAI,GAAJ,UAAK,GAAY,EAAE,OAA4B;oBAC3C,IAAI,CAAC;wBACD,IAAI,CAAC,cAAc,EAAE,CAAC;wBACtB,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,oBAAa,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;wBAChE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;oBAChF,CAAE;oBAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,sBAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1D,MAAM,CAAC,CAAC;oBACZ,CAAC;gBACL,CAAC;gBAEO,0CAAc,GAAtB;oBACI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBACrC,CAAC;gBAEO,0CAAc,GAAtB,UAAuB,MAAsB,EAAE,GAAY,EAAE,OAA4B;oBACrF,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACX,OAAO,GAAG,EAAC,QAAG,EAAE,cAAM,EAAC,CAAC;oBAC5B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,OAAO,GAAG,IAAI,qBAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAC,QAAG,EAAE,cAAM,EAAC,CAAC,CAAC;oBAC/D,CAAC;oBAED,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBACtC,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;wBACtB,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;oBACtC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,OAAO,CAAC,GAAG,GAAG,qBAAW,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;oBAChE,CAAC;oBAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBACjD,CAAC;gBAEO,wCAAY,GAApB,UAAqB,OAAW,EAAE,OAA2B;oBACzD,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;oBACvD,MAAM,CAAC,OAAO,CAAC;gBACnB,CAAC;gBAED,kCAAkC;gBAC1B,sCAAU,GAAlB,UAAmB,OAA2B;oBAC1C,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;wBACtB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;oBACvB,CAAC;oBACD,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;gBACjD,CAAC;gBAEO,wCAAY,GAApB,UAAqB,QAA8B;oBAC/C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBACpD,CAAC;gBAEL,wBAAC;YAAD,CAAC,AAtKD,CAAyC,aAAa,GAsKrD;;;;;;;;;;;;;;;;;;;;;;;;YC5rBD;gBAAA;gBAgCA,CAAC;gBA9BU,gBAAO,GAAd,UAAe,EAQd;wBARe,oBAAO,EAAE,sBAAQ,EAAE,sBAAQ,EAAE,4BAAW,EAAE,0BAAU,EAAE,cAAI;oBAUtE,IAAM,KAAK,GAAG,OAAO,IAAI,QAAQ,CAAC;oBAElC,MAAM,CAAC;wBACH;4BACI,OAAO,EAAE,KAAK;4BACd,kBAAQ;4BACR,kBAAQ;4BACR,wBAAW;4BACX,sBAAU;4BACV,UAAI;yBACP;wBACD,uBAAe,CAAC,OAAO,CAAC;4BACpB,UAAU,EAAE,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,UAAU,EAAnB,CAAmB;4BACvD,IAAI,EAAE,CAAC,KAAK,CAAC;yBAChB,CAAC;qBACL,CAAC;gBACN,CAAC;gBAIL,eAAC;YAAD,CAAC,AAhCD,IAgCC;YAhCD,+BAgCC,CAAA;YAED;gBAII,sBAAoB,KAAW;oBAAX,UAAK,GAAL,KAAK,CAAM;gBAC/B,CAAC;gBAED,sBAAI,8BAAI;yBAAR;wBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;oBACtB,CAAC;;;mBAAA;gBAED,sBAAI,oCAAU;yBAAd;wBACI,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;oBAChC,CAAC;;;mBAAA;gBAED,oCAAa,GAAb;oBACI,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;gBAC5E,CAAC;gBAES,uCAAgB,GAA1B;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,qBAAc,CAAC,CAAC;gBAClD,CAAC;gBAEL,mBAAC;YAAD,CAAC,AAvBD,IAuBC;YAvBD,uCAuBC,CAAA;YAED;gBAA8C,gCAAY;gBAEtD,sBAAY,IAAU;oBAClB,kBAAM,IAAI,CAAC,CAAC;gBAChB,CAAC;gBAED,sBAAI,oCAAU;yBAAd;wBACI,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;oBAChC,CAAC;;;mBAAA;gBAED,oCAAa,GAAb;oBACI,MAAM,CAAC,gBAAK,CAAC,aAAa,WAAE,CAAC;gBACjC,CAAC;gBAED,6BAAM,GAAN,UAAO,MAAS;oBACZ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC/F,CAAC;gBAED,2BAAI,GAAJ,UAAK,EAAO;oBACR,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;gBAChF,CAAC;gBAED,6BAAM,GAAN,UAAO,MAAS;oBACZ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAC9F,CAAC;gBAED,iCAAiC;gBACjC,6BAAM,GAAN,UAAO,MAAS;oBACZ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;gBAC3F,CAAC;gBAES,uCAAgB,GAA1B;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,mBAAY,EAAK,CAAC,CAAC;gBACrD,CAAC;gBAES,2CAAoB,GAA9B,UAA+B,MAAS;oBACpC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAA,QAAQ,IAAI,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC;gBACzE,CAAC;gBAES,yCAAkB,GAA5B,UAA6B,EAAO;oBAApC,iBAKC;oBAJG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,kBAAkB,CAC9C,UAAA,OAAO,IAAI,OAAA,IAAI,qBAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;wBACzC,GAAG,EAAE,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;qBACvC,CAAC,EAFS,CAET,CAAC,CAAC;gBACZ,CAAC;gBAES,2CAAoB,GAA9B,UAA+B,MAAS;oBAAxC,iBAMC;oBALG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ;yBAC1B,iBAAiB,CAAC,UAAC,MAAM,EAAE,OAAO,IAAK,OAAA,IAAI,qBAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;wBACtE,GAAG,EAAE,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;qBAC1D,CAAC,EAFsC,CAEtC,CAAC;yBACF,gBAAgB,CAAC,UAAA,QAAQ,IAAI,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC;gBAC9C,CAAC;gBAES,2CAAoB,GAA9B,UAA+B,MAAS;oBAAxC,iBAMC;oBALG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ;yBAC1B,iBAAiB,CAAC,UAAC,MAAM,EAAE,OAAO,IAAK,OAAA,IAAI,qBAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;wBACtE,GAAG,EAAE,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;qBAC1D,CAAC,EAFsC,CAEtC,CAAC;yBACF,gBAAgB,CAAC,UAAA,QAAQ,IAAI,OAAA,MAAM,EAAN,CAAM,CAAC,CAAA;gBAC7C,CAAC;gBAID,kCAAkC;gBACxB,gCAAS,GAAnB,UAAoB,OAA2B,EAAE,EAAO;oBACpD,MAAM,CAAC,qBAAW,CAAC,OAAO,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC/C,CAAC;gBAEL,mBAAC;YAAD,CAAC,AArED,CAA8C,YAAY,GAqEzD;YArED,uCAqEC,CAAA;;;;;;;;QCvHY,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAR3B;;;;;;;eAOG;YACU,4BAAA,cAAc,GAAU;gBACjC,WAAI;gBACJ,uBAAe,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,WAAI,EAAC,CAAC;aAC/C,CAAA,CAAC;;;;;;;;;;;;;;;;;;YCCF;gBAA2B,gCAAiB;gBAExC;oBACI,iBAAO,CAAC;gBACZ,CAAC;gBAED,qCAAc,GAAd,UAAe,OAA2B;oBACtC,MAAM,CAAC,IAAI,qBAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAC,GAAG,EAAE,UAAU,EAAE,MAAM,EAAE,eAAe,EAAC,CAAC,CAAA;gBACxF,CAAC;gBAED,mCAAY,GAAZ,UAAa,OAAW,EAAE,OAA2B;oBACjD,OAAO,CAAC,OAAO,GAAG,UAAU,CAAC;oBAC7B,MAAM,CAAC,IAAI,qBAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;gBAC9D,CAAC;gBAED,mCAAY,GAAZ,UAAa,QAAkB;oBAC3B,MAAM,CAAC;wBACH,QAAQ,EAAE,WAAW;qBACxB,CAAC;gBACN,CAAC;gBAEL,mBAAC;YAAD,CAAC,AArBD,CAA2B,eAAQ,GAqBlC;YAED,QAAQ,CAAC,UAAU,EAAE;gBAEjB,IAAM,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;gBAEpC,EAAE,CAAC,yBAAyB,EAAE;oBAE1B,IAAM,IAAI,GAAG,QAAQ,CAAC,kBAAkB,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,qBAAc,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,cAAc,EAAC,CAAC,EAAxD,CAAwD,CAAC,CAAC;oBAC3G,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;oBAErC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAClC,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;gBAC3E,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,wBAAwB,EAAE;oBAEzB,IAAM,IAAI,GAAG,QAAQ,CAAC,kBAAkB,CACpC,UAAA,IAAI,IAAI,OAAA,IAAI,qBAAc,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,cAAc,EAAC,CAAC,EAAxD,CAAwD,EAChE,IAAI,CAAC,CAAC;oBACV,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;oBAErC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAClC,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;gBAC1E,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,iBAAiB,EAAE;oBAElB,IAAM,IAAI,GAAG,QAAQ,CAAC,gBAAgB,CAAC,UAAC,OAAY,EAAE,IAAwB;wBAC1E,MAAM,CAAC,IAAI,qBAAc,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,EAAC,CAAC,CAAC;oBACpE,CAAC,CAAC,CAAC;oBACH,IAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,UAAU,EAAC,EAAE,EAAE,CAAC,CAAC;oBAE3D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAEvC,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,sCAAsC,EAAE;oBAEvC,IAAM,IAAI,GAAG,QAAQ,CAAC,iBAAiB,CAAC,UAAC,OAAO,EAAE,IAAI;wBAClD,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;wBAC3B,OAAO,CAAC,OAAO,GAAG,YAAY,CAAC;wBAC/B,MAAM,CAAC,IAAI,qBAAc,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;oBAC3D,CAAC,CAAC,CAAC;oBACH,IAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,OAAO,EAAE,UAAU,EAAC,EAAE,EAAE,CAAC,CAAC;oBAC1D,IAAM,IAAI,GAAG,IAAI,CAAC,IAAU,CAAC;oBAE7B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBACtC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC1C,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,qCAAqC,EAAE;oBAEtC,IAAM,IAAI,GAAG,QAAQ,CAAC,iBAAiB,CACnC,UAAC,OAAO,EAAE,IAAI;wBACV,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;wBAC3B,OAAO,CAAC,OAAO,GAAG,YAAY,CAAC;wBAC/B,MAAM,CAAC,IAAI,qBAAc,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;oBAC3D,CAAC,EACD,IAAI,CAAC,CAAC;oBACV,IAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,OAAO,EAAE,UAAU,EAAC,EAAE,EAAE,CAAC,CAAC;oBAC1D,IAAM,IAAI,GAAG,IAAI,CAAC,IAAU,CAAC;oBAE7B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBACtC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,eAAe,EAAE;oBAEhB,IAAM,IAAI,GAAG,QAAQ,CAAC,gBAAgB,CAAC;wBACnC,MAAM,CAAC;4BACH,SAAS,EAAE,WAAW;yBACjB,CAAA;oBACb,CAAC,CAAC,CAAC;oBACH,IAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,eAAQ,CAAC,IAAI,sBAAe,EAAE,CAAC,CAAC,CAAC;oBAExE,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjD,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;;;;;;;;ICxGH;QACI,sBAAY,CAAC;YACT,qBAAc;YACd,qBAAW;YACX;gBACI,OAAO,EAAE,wBAAiB;gBAC1B,WAAW,EAAE,qBAAW;aAC3B;YACD,WAAI;YACJ;gBACI,OAAO,EAAE,qBAAW;gBACpB,QAAQ,EAAE,IAAI,yBAAe,CAAC,EAAC,OAAO,EAAE,YAAY,EAAC,CAAC;aACzD;YACD,yBAAc;SACjB,CAAC,CAAA;IACN,CAAC;IAfD,+CAeC,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;YAED,QAAQ,CAAC,MAAM,EAAE;gBAEb,IAAI,IAAU,CAAC;gBACf,IAAI,IAAiB,CAAC;gBAEtB,UAAU,CAAC,cAAM,OAAA,gBAAgB,EAAE,EAAlB,CAAkB,CAAC,CAAC;gBAErC,UAAU,CAAC,gBAAM,CAAC,CAAC,qBAAW,EAAE,WAAI,CAAC,EAAE,UAAC,GAAgB,EAAE,KAAW;oBACjE,IAAI,GAAG,GAAG,CAAC;oBACX,IAAI,GAAG,KAAK,CAAC;gBACjB,CAAC,CAAC,CAAC,CAAC;gBAEJ,EAAE,CAAC,gBAAgB,EAAE;oBACjB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACpD,CAAC,CAAC,CAAC;gBAEH,yBACI,MAAqB,EACrB,IAA6D;oBAC7D,MAAM,CAAC,UAAA,IAAI;wBACP,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,UAAC,UAA0B;4BAClD,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;4BAC/C,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;4BAC9D,UAAU,CAAC,WAAW,CAAC,IAAI,eAAQ,CAAC,IAAI,sBAAe,CAAC;gCACpD,IAAI,EAAE,WAAW;6BACpB,CAAC,CAAC,CAAC,CAAC;wBACT,CAAC,CAAC,CAAC;wBACH,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,SAAS,CAAC,UAAC,QAAkB;4BAC9D,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;4BAC1C,IAAI,EAAE,CAAC;wBACX,CAAC,CAAC,CAAC;oBACP,CAAC,CAAA;gBACL,CAAC;gBAED,EAAE,CAAC,uBAAuB,EAAE,eAAe,CAAC,oBAAa,CAAC,GAAG,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,GAAG,EAAR,CAAQ,CAAC,CAAC,CAAC;gBAClF,EAAE,CAAC,0BAA0B,EAAE,eAAe,CAAC,oBAAa,CAAC,MAAM,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,EAAX,CAAW,CAAC,CAAC,CAAC;gBAC3F,EAAE,CAAC,wBAAwB,EAAE,eAAe,CAAC,oBAAa,CAAC,IAAI,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,EAAT,CAAS,CAAC,CAAC,CAAC;gBAErF,yBACI,MAAqB,EACrB,IAAwE;oBACxE,MAAM,CAAC,UAAA,IAAI;wBACP,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,UAAC,UAA0B;4BAClD,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;4BAC/C,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;4BACnE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;4BACnD,UAAU,CAAC,WAAW,CAAC,IAAI,eAAQ,CAAC,IAAI,sBAAe,CAAC;gCACpD,IAAI,EAAE,WAAW;6BACpB,CAAC,CAAC,CAAC,CAAC;wBACT,CAAC,CAAC,CAAC;wBACH,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,kBAAkB,EAAE,UAAU,CAAC,CAAC,SAAS,CAAC,UAAC,QAAkB;4BAC/E,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;4BAC1C,IAAI,EAAE,CAAC;wBACX,CAAC,CAAC,CAAC;oBACP,CAAC,CAAA;gBACL,CAAC;gBAED,EAAE,CAAC,wBAAwB,EAAE,eAAe,CAAC,oBAAa,CAAC,IAAI,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,EAAT,CAAS,CAAC,CAAC,CAAC;gBACrF,EAAE,CAAC,uBAAuB,EAAE,eAAe,CAAC,oBAAa,CAAC,GAAG,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,GAAG,EAAR,CAAQ,CAAC,CAAC,CAAC;gBAClF,EAAE,CAAC,yBAAyB,EAAE,eAAe,CAAC,oBAAa,CAAC,KAAK,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,KAAK,EAAV,CAAU,CAAC,CAAC,CAAC;gBAExF,EAAE,CAAC,sBAAsB,EAAE,UAAA,IAAI;oBAC3B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,UAAC,UAA0B;wBAClD,UAAU,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACtD,CAAC,CAAC,CAAC;oBACH,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,SAAS,CAC7B;wBACI,IAAI,CAAC,mBAAmB,CAAC,CAAC;wBAC1B,IAAI,EAAE,CAAC;oBACX,CAAC,EACD,UAAC,KAAY;wBACT,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;wBAC7C,IAAI,EAAE,CAAC;oBACX,CAAC,CAAC,CAAC;gBACX,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,oCAAoC,EAAE;oBAErC,IAAM,QAAQ,GAAG,SAAS,CAAC;oBAC3B,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBAErC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACrC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,8BAAuB,CAAC,CAAC;gBAC1D,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,qBAAqB,EAAE;oBAEtB,IAAM,QAAQ,GAAG,SAAS,CAAC;oBAC3B,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAEnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACrC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,qBAAc,CAAC,CAAC;gBACjD,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,kCAAkC,EAAE;oBAEnC,IAAM,QAAQ,GAAG,mBAAY,EAAU;yBAClC,gBAAgB,CAAC,UAAC,GAAW,EAAE,IAAwB;wBACpD,OAAA,IAAI,qBAAc,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAC,CAAC;oBAA3D,CAA2D,CAAC,CAAC;oBACrE,IAAM,QAAQ,GAAG,SAAS,CAAC;oBAC3B,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;oBAE/C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACrC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC3C,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCrIH,QAAQ,CAAC,YAAY,EAAE;gBAEnB,IAAI,IAAU,CAAC;gBACf,IAAI,IAAiB,CAAC;gBACtB,IAAI,MAAqC,CAAA;gBAEzC,UAAU,CAAC,cAAM,OAAA,4BAAgB,EAAE,EAAlB,CAAkB,CAAC,CAAC;gBAErC,UAAU,CAAC,gBAAM,CAAC,CAAC,qBAAW,EAAE,WAAI,CAAC,EAAE,UAAC,GAAgB,EAAE,KAAW;oBACjE,IAAI,GAAG,GAAG,CAAC;oBACX,IAAI,GAAG,KAAK,CAAC;oBACb,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC,CAAC;gBAEJ,EAAE,CAAC,SAAS,EAAE;oBACV,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,CAAC;gBAC3C,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,uBAAuB,EAAE;oBAExB,IAAM,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;oBAE3C,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACvB,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,sCAAsC,EAAE;oBAEvC,IAAM,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;oBAE1C,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC/B,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACnC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC9C,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,wBAAwB,EAAE;oBAEzB,IAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;oBAExC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC/B,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;oBACtC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,qBAAc,CAAC,CAAC;gBAC7C,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,kCAAkC,EAAE;oBAEnC,IAAM,QAAQ,GAAG,mBAAY,EAAU;yBAClC,gBAAgB,CAAC,UAAC,GAAW,EAAE,IAAwB;wBACpD,OAAA,IAAI,qBAAc,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAC,CAAC;oBAA3D,CAA2D,CAAC,CAAC;oBACrE,IAAM,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;oBAEzD,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC/B,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBACxC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACvC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC","sourcesContent":["///<reference types=\"jasmine\"/>\n","import {EventEmitter, Type} from \"@angular/core\";\nimport {RikeTarget, RikeOperation} from \"./rike\";\n\n/**\n * REST-like resource access event emitter.\n *\n * Multiple instances of this class could be injected into controller or service to listen for Rike events.\n */\nexport abstract class RikeEventSource {\n\n    /**\n     * Constructs provider recipe for [RikeEventSource]\n     *\n     * @param useClass\n     * @param useValue\n     * @param useExisting\n     * @param useFactory\n     * @param deps\n     *\n     * @return new provider recipe.\n     */\n    static provide({useClass, useValue, useExisting, useFactory, deps}: {\n        useClass?: Type;\n        useValue?: any;\n        useExisting?: any;\n        useFactory?: Function;\n        deps?: Object[];\n        multi?: boolean;\n    }): any {\n        return {\n            provide: RikeEventSource,\n            multi: true,\n            useClass,\n            useValue,\n            useExisting,\n            useFactory,\n            deps,\n        };\n    };\n\n    /**\n     * Rike events emitter.\n     */\n    abstract readonly rikeEvents: EventEmitter<RikeEvent>;\n\n}\n\n/**\n * Basic REST-like resource access event.\n *\n * Such events are emitted by [Rike event sources][RikeEventsSource].\n */\nexport abstract class RikeEvent {\n\n    /**\n     * Operation target.\n     */\n    get target(): RikeTarget<any, any> {\n        return this.operation.target;\n    }\n\n    /**\n     * Rike operation.\n     */\n    abstract readonly operation: RikeOperation<any, any>;\n\n    /**\n     * Whether an operation is complete.\n     *\n     * `true` on error or successful completion event.\n     */\n    abstract readonly complete: boolean;\n\n    /**\n     * The error occurred.\n     *\n     * `undefined` if this is not an error event.\n     */\n    abstract readonly error?: any;\n\n    /**\n     * Operation result, if any.\n     */\n    abstract readonly result?: any;\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is started.\n */\nexport class RikeOperationEvent extends RikeEvent {\n\n    constructor(private _operation: RikeOperation<any, any>) {\n        super();\n    }\n\n    get operation(): RikeOperation<any, any> {\n        return this._operation;\n    }\n\n    get complete(): boolean {\n        return false;\n    }\n\n    get error(): undefined {\n        return undefined;\n    }\n\n    get result(): undefined {\n        return undefined;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is successfully completed.\n */\nexport class RikeSuccessEvent extends RikeEvent {\n\n    constructor(private _operation: RikeOperation<any, any>, private _result: any) {\n        super();\n    }\n\n    get operation(): RikeOperation<any, any> {\n        return this._operation;\n    }\n\n    get complete(): boolean {\n        return true;\n    }\n\n    get error(): undefined {\n        return undefined;\n    }\n\n    get result(): any {\n        return this._result;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is failed.\n *\n * An object of this type is also reported as error when some internal exception occurs.\n */\nexport class RikeErrorEvent extends RikeEvent {\n\n    constructor(private _operation: RikeOperation<any, any>, private _error: any) {\n        super();\n    }\n\n    get operation(): RikeOperation<any, any> {\n        return this._operation;\n    }\n\n    get complete(): boolean {\n        return true;\n    }\n\n    get error(): any {\n        return this._error;\n    }\n\n    get result(): undefined {\n        return undefined;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is cancelled.\n */\nexport class RikeCancelEvent extends RikeErrorEvent {\n\n    constructor(operation: RikeOperation<any, any>, private _cause?: RikeOperationEvent) {\n        super(operation, _cause || \"cancel\");\n    }\n\n    get cause(): RikeOperationEvent | undefined {\n        return this._cause;\n    }\n\n}\n","/**\n * Constructs URL relative to base URL.\n *\n * @param baseUrl base URL.\n * @param url URL.\n *\n * @returns {string} If `baseUrl` is not specified, or empty string, or `url` is absolute, then returns unmodified `url`.\n * Otherwise concatenates `baseUrl` and `url` separating them by `/` sign.\n */\nexport function relativeUrl(baseUrl: string | undefined, url: string): string {\n    if (!baseUrl) {\n        return url;\n    }\n    if (url[0] === \"/\") {\n        return url;// Absolute URL\n    }\n    if (url.match(/^(\\w*:)?\\/\\//)) {\n        return url;// Full URL\n    }\n    return baseUrl + \"/\" + url;\n}\n\n/**\n * Global Rike options interface.\n */\nexport interface RikeOptionsArgs {\n\n    /**\n     * Base URL of all relative URLs\n     */\n    readonly baseUrl?: string;\n\n}\n\n/**\n * Global Rike options.\n *\n * To overwrite global options add a provider for [BaseRikeOptions] instance with [RikeOptions] as a key:\n * ```ts\n * bootstrap(AppComponent, {provide: RikeOptions, new BaseRikeOptions({baseDir: \"/rike\"})});\n * ```\n */\nexport abstract class RikeOptions implements RikeOptionsArgs {\n\n    abstract readonly baseUrl?: string;\n\n    /**\n     * Constructs URL relative to `baseUrl`.\n     *\n     * @param url URL\n     *\n     * @returns {string} resolved URL.\n     */\n    relativeUrl(url: string): string {\n        return relativeUrl(this.baseUrl, url);\n    }\n\n}\n\n/**\n * Basic [global resource options][RikeOptions] implementation.\n *\n * Can be used to override the global resource options.\n */\nexport class BaseRikeOptions extends RikeOptions {\n\n    private _baseUrl?: string;\n\n    constructor(opts?: RikeOptionsArgs) {\n        super();\n        if (opts) {\n            this._baseUrl = opts.baseUrl;\n        }\n    }\n\n    get baseUrl(): string | undefined {\n        return this._baseUrl;\n    }\n\n}\n\n/**\n * Default resource options.\n *\n * @type {RikeOptions}\n */\nexport const DEFAULT_RIKE_OPTIONS: RikeOptions = new BaseRikeOptions();\n","import {Response, RequestOptionsArgs, Request, RequestOptions} from \"@angular/http\";\n\n/**\n * REST-like operations data type.\n *\n * It is used by REST-like operations to encode operation requests to HTTP, and to decode operation responses from HTTP.\n *\n * Some of the data types may support only request or response operations, but not both.\n *\n * `IN` is operation request type.\n * `OUT` is operation response type.\n */\nexport abstract class DataType<IN, OUT> {\n\n    //noinspection JSMethodCanBeStatic\n    /**\n     * Prepares HTTP request.\n     *\n     * The `options` passed have at least `url` and `method` fields set.\n     *\n     * This method is called for each HTTP request before _writeRequest_ method. When default data type is set for\n     * operation target, this method is called first on the default data type, and then - on the operation data type.\n     *\n     * @param options original HTTP request options.\n     *\n     * @returns modified HTTP request options to use further instead of original ones. Returns unmodified request\n     * `options` by default.\n     */\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        return options;\n    }\n\n    /**\n     * Constructs new data type based on this one, which prepares the request with the given function.\n     *\n     * @param prepare a request preparation function invoked in addition to `this.prepareRequest` method.\n     * @param after `true` to call the `prepare` function after `this.prepareRequest` method,\n     * otherwise it will be called before `this.prepareRequest()` method\n     *\n     * @return {DataType<IN, OUT>} new data type.\n     */\n    prepareRequestWith(\n        prepare: (options: RequestOptionsArgs) => RequestOptionsArgs,\n        after?: boolean): DataType<IN, OUT> {\n        return new PrepareRequestDataType<IN, OUT>(this, prepare, after);\n    }\n\n    /**\n     * Writes operation request as HTTP request.\n     *\n     * This method is invoked only for HTTP request methods that expect request body.\n     *\n     * The `options` are the result of `prepareRequest` method invocation. It is expected that the result options will\n     * contain a `body` field set.\n     *\n     * @param request operation request to encode\n     * @param options original HTTP request options.\n     *\n     * @return modified HTTP request options that will be used to perform actual request.\n     */\n    abstract writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs;\n\n    /**\n     * Constructs new data type based on this one, which writes the request with the given function.\n     *\n     * @param writeRequest new request writer function.\n     *\n     * @return {DataType<IN, OUT>} new data type.\n     */\n    writeRequestWith<IN>(\n        writeRequest: (request: IN, options: RequestOptionsArgs) => RequestOptionsArgs): DataType<IN, OUT> {\n        return new WriteRequestDataType<IN, OUT>(this, writeRequest);\n    }\n\n    /**\n     * Constructs new data type based on this one, which updates request options with the given function. The request\n     * will be written with original `writeRequest()` method.\n     *\n     * @param updateRequest a function updating request options in addition to `this.writeRequest()` method.\n     * @param after `true` to invoke `updateRequest` function after `this.writeRequest()` method, otherwise it will be\n     * invoked before the `this.writeRequest()` method.\n     *\n     * @return {DataType<IN, OUT>} new data type.\n     */\n    updateRequestWith(\n        updateRequest: (request: IN, options: RequestOptionsArgs) => RequestOptionsArgs,\n        after?: boolean): DataType<IN, OUT> {\n        return new WriteRequestDataType<IN, OUT>(this, (request, args) => {\n            if (!after) {\n                return this.writeRequest(request, updateRequest(request, args));\n            }\n            return updateRequest(request, this.writeRequest(request, args));\n        });\n    }\n\n    /**\n     * Reads operation response from HTTP response.\n     *\n     * @param response HTTP response.\n     *\n     * @returns operation response.\n     */\n    abstract readResponse(response: Response): OUT;\n\n    /**\n     * Constructs new data type based on this one, which reads a response with the given function.\n     *\n     * @param readResponse new response reader function.\n     *\n     * @return {DataType<IN, OUT>} new data type.\n     */\n    readResponseWith<OUT>(readResponse: (response: Response) => OUT): DataType<IN, OUT> {\n        return new ReadResponseDataType<IN, OUT>(this, readResponse);\n    }\n\n}\n\nexport abstract class RequestBodyType<T> extends DataType<T, T> {\n\n    writeRequest(request: T, options: RequestOptionsArgs): RequestOptionsArgs {\n        return new RequestOptions(options).merge({body: this.writeBody(request)});\n    }\n\n    abstract writeBody(request: T): any;\n\n}\n\nclass PrepareRequestDataType<IN, OUT> extends DataType<IN, OUT> {\n\n    constructor(\n        private _dataType: DataType<IN, OUT>,\n        private _prepare: (options: RequestOptionsArgs) => RequestOptionsArgs,\n        private _after?: boolean) {\n        super();\n    }\n\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        if (this._after) {\n            return this._prepare(this._dataType.prepareRequest(options));\n        }\n        return this._dataType.prepareRequest(this._prepare(options));\n    }\n\n    writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs {\n        return this._dataType.writeRequest(request, options);\n    }\n\n    readResponse(response: Response): OUT {\n        return this._dataType.readResponse(response);\n    }\n\n}\n\nclass WriteRequestDataType<IN, OUT> extends DataType<IN, OUT> {\n\n    constructor(\n        private _responseType: DataType<any, OUT>,\n        private _writeRequest: (request: IN, options: RequestOptionsArgs) => RequestOptionsArgs) {\n        super();\n    }\n\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        return this._responseType.prepareRequest(options);\n    }\n\n    writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs {\n        return this._writeRequest(request, options);\n    }\n\n    readResponse(response: Response): OUT {\n        return this._responseType.readResponse(response);\n    }\n\n}\n\nclass ReadResponseDataType<IN, OUT> extends DataType<IN, OUT> {\n\n    constructor(private _requestType: DataType<IN, any>, private _readResponse: (response: Response) => OUT) {\n        super();\n    }\n\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        return this._requestType.prepareRequest(options);\n    }\n\n    writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs {\n        return this._requestType.writeRequest(request, options);\n    }\n\n    readResponse(response: Response): OUT {\n        return this._readResponse(response);\n    }\n\n    readResponseWith<OUT>(readResponse: (response: Response) => OUT): DataType<IN, OUT> {\n        return new ReadResponseDataType<IN, OUT>(this._requestType, readResponse);\n    }\n\n}\n\nclass JsonDataType<T> extends RequestBodyType<T> {\n\n    writeBody(request: T): string {\n        return JSON.stringify(request);\n    }\n\n    readResponse(response: Response): T {\n        return response.json();\n    }\n\n}\n\n/**\n * JSON data type.\n *\n * Sends and receives arbitrary data as JSON over HTTP.\n *\n * @type {DataType<any>}\n */\nexport const JSON_DATA_TYPE: DataType<any, any> = new JsonDataType<any>();\n\n/**\n * Returns JSON data type.\n *\n * Sends and receives the data of the given type as JSON over HTTP.\n */\nexport const jsonDataType: (<T>() => DataType<T, T>) = () => JSON_DATA_TYPE;\n\nclass HttpResponseDataType extends DataType<any, Response> {\n\n    writeRequest(request: any, options: RequestOptionsArgs): RequestOptionsArgs {\n        return new RequestOptions(options).merge({body: request});\n    }\n\n    readResponse(response: Response): Response {\n        return response;\n    }\n\n}\n\n/**\n * HTTP response data type.\n *\n * The request type is any. It is used as request body.\n *\n * @type {DataType<any, Response>}\n */\nexport const HTTP_RESPONSE_DATA_TYPE: DataType<any, Response> = new HttpResponseDataType();\n","import {Injectable, Optional, EventEmitter} from \"@angular/core\";\nimport {Request, RequestOptionsArgs, Response, Http, RequestMethod, RequestOptions} from \"@angular/http\";\nimport {Observable, Observer, Subscription} from \"rxjs/Rx\";\nimport {\n    RikeEvent,\n    RikeErrorEvent,\n    RikeSuccessEvent,\n    RikeOperationEvent,\n    RikeCancelEvent,\n    RikeEventSource\n} from \"./event\";\nimport {RikeOptions, DEFAULT_RIKE_OPTIONS, relativeUrl} from \"./options\";\nimport {DataType, HTTP_RESPONSE_DATA_TYPE, jsonDataType} from \"./data\";\n\nconst REQUEST_METHODS: {[name: string]: number} = {\n    \"GET\": RequestMethod.Get,\n    \"POST\": RequestMethod.Post,\n    \"PUT\": RequestMethod.Put,\n    \"DELETE\": RequestMethod.Delete,\n    \"OPTIONS\": RequestMethod.Options,\n    \"HEAD\": RequestMethod.Head,\n    \"PATCH\": RequestMethod.Patch,\n};\n\nexport function requestMethod(method: string | RequestMethod): RequestMethod {\n    if (typeof method !== \"string\") {\n        return method;\n    }\n\n    const result = REQUEST_METHODS[method.toUpperCase()];\n\n    if (result != null) {\n        return result;\n    }\n\n    throw new Error(\"Unsupported HTTP request method: \" + method);\n}\n\n/**\n * REST-like resource operations service.\n *\n * This service can be injected to other services or components.\n *\n * It basically mimics the `Http` interface, but also honors [global Rike options][RikeOptions].\n *\n * It can also be used to perform operations on particular targets.\n */\n@Injectable()\nexport class Rike implements RikeEventSource {\n\n    private readonly _options: RikeOptions;\n    private readonly _rikeEvents = new EventEmitter<RikeEvent>();\n    private readonly _internals: RikeInternals;\n\n    constructor(private _http: Http, defaultHttpOptions: RequestOptions, @Optional() _options?: RikeOptions) {\n        this._options = _options || DEFAULT_RIKE_OPTIONS;\n        this._internals = {\n            defaultHttpOptions,\n            wrapResponse: (target, operation, response) => this.wrapResponse(target, operation, response)\n        }\n    }\n\n    /**\n     * Global REST-like resource access options.\n     *\n     * @returns {RikeOptions} either pre-configured, or [default][DEFAULT_RIKE_OPTIONS] options.\n     */\n    get options(): RikeOptions {\n        return this._options;\n    }\n\n    /**\n     * All REST-like resource operation events emitter.\n     *\n     * @returns {EventEmitter<RikeEvent>}\n     */\n    get rikeEvents(): EventEmitter<RikeEvent> {\n        return this._rikeEvents;\n    }\n\n    request(request: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n        options = this.updateRequestOptions(options);\n        if (typeof request === \"string\") {\n            request = this.options.relativeUrl(request);\n        }\n        return this._http.request(request, options);\n    }\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this._http.get(this.options.relativeUrl(url), this.updateRequestOptions(options));\n    }\n\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this._http.post(this.options.relativeUrl(url), body, this.updateRequestOptions(options));\n    }\n\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this._http.put(this.options.relativeUrl(url), body, this.updateRequestOptions(options));\n    }\n\n    //noinspection ReservedWordAsName\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this._http.delete(this.options.relativeUrl(url), this.updateRequestOptions(options));\n    }\n\n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this._http.patch(this.options.relativeUrl(url), body, this.updateRequestOptions(options));\n    }\n\n    head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this._http.head(this.options.relativeUrl(url), this.updateRequestOptions(options));\n    }\n\n    /**\n     * Constructs operation target, which operations produce HTTP responses ([HTTP_RESPONSE_DATA_TYPE]).\n     *\n     * Arbitrary data type can be used as a request body.\n     *\n     * @param target arbitrary target value.\n     *\n     * @returns {RikeTargetImpl} new operation target.\n     */\n    target(target: any): RikeTarget<any, Response>;\n\n    /**\n     * Constructs operations target, which operates on the given data type.\n     *\n     * @param target arbitrary target value.\n     * @param dataType operations data type.\n     *\n     * @return {RikeTargetImpl<T>} new operations target.\n     */\n    target<IN, OUT>(target: any, dataType: DataType<IN, OUT>): RikeTarget<IN, OUT>;\n\n    target(target: any, dataType?: DataType<any, any>): RikeTarget<any, any> {\n\n        const rikeTarget = new RikeTargetImpl<any, any>(\n            this,\n            this._internals,\n            target,\n            dataType || HTTP_RESPONSE_DATA_TYPE);\n\n        rikeTarget.rikeEvents.subscribe(\n            (event: RikeEvent) => this._rikeEvents.emit(event),\n            (error: any) => this._rikeEvents.error(error),\n            () => this._rikeEvents.complete());\n\n        return rikeTarget;\n    }\n\n    /**\n     * Constructs operations target, which operates on the given data type passing it as JSON over HTTP.\n     *\n     * @param target arbitrary target value.\n     *\n     * @return {RikeTarget<T>} new operations target.\n     */\n    json<T>(target: any): RikeTarget<T, T> {\n        return this.target(target, jsonDataType<T>());\n    }\n\n    /**\n     * Updates HTTP request options accordingly to global _options_.\n     *\n     * @param options HTTP request options to update.\n     *\n     * @returns {RequestOptionsArgs} either new HTTP options instance, or the _options_ argument if no modifications\n     * done.\n     */\n    protected updateRequestOptions(options?: RequestOptionsArgs): RequestOptionsArgs | undefined {\n        if (!options) {\n            return options;\n        }\n        if (options.url != null) {\n\n            var newUrl = this._options.relativeUrl(options.url);\n\n            if (newUrl !== options.url) {\n                options = {\n                    url: newUrl,\n                    method: options.method,\n                    search: options.search,\n                    headers: options.headers,\n                    body: options.body,\n                    withCredentials: options.withCredentials,\n                }\n            }\n        }\n\n        return options;\n    }\n\n    //noinspection JSMethodCanBeStatic,JSUnusedLocalSymbols\n    /**\n     * Wraps the HTTP response observable for the given operation.\n     *\n     * @param _target operation target.\n     * @param _operation operation name.\n     * @param response\n     * @returns {Observable<Response>}\n     */\n    protected wrapResponse(\n        _target: RikeTarget<any, any>,\n        _operation: RikeOperation<any, any>,\n        response: Observable<Response>): Observable<Response> {\n        return response;\n    }\n\n}\n\n/**\n * REST-like operations target.\n *\n * Operation targets are created using [Rike.target] method. The actual operations should be created first with\n * _operation_ method.\n *\n * Only one operation can be performed on a target at a time. Whenever a new operation on the same target is initiated,\n * the previous one is cancelled.\n *\n * `IN` is a request type this target's operations accept by default.\n * `OUT` is a response type this target's operations return by default.\n */\nexport abstract class RikeTarget<IN, OUT> implements RikeEventSource {\n\n    /**\n     * Operation target value.\n     *\n     * This is the value passed to the [Rike.target] method.\n     */\n    abstract readonly target: any;\n\n    /**\n     * A currently evaluating operation.\n     *\n     * `undefined` if no operations currently in process, i.e. operation not started, cancelled, or completed, either\n     * successfully or with error.\n     */\n    abstract readonly currentOperation?: RikeOperation<any, any>;\n\n    /**\n     * An emitter of events for operations performed on this target.\n     */\n    abstract readonly rikeEvents: EventEmitter<RikeEvent>;\n\n    /**\n     * An operations data type to use by default.\n     *\n     * This is the data type to the [Rike.target] method.\n     */\n    abstract readonly dataType: DataType<IN, OUT>;\n\n    /**\n     * Base URL to use by operations.\n     */\n    abstract readonly baseUrl?: string;\n\n    /**\n     * Assigns base URL to use by operations.\n     *\n     * This URL can be absolute, or relative to the one specified in the [global options][RikeOptions.baseUrl].\n     *\n     * @param url new base URL or `undefined` to reset it.\n     */\n    abstract withBaseUrl(url?: string): this;\n\n    /**\n     * Constructs an operation on this target, which produces responses of type `T`.\n     *\n     * The target data type (_dataType_) passed to the [Rike.target] will be used to encode/decode operation data.\n     *\n     * @param name operation name.\n     */\n    abstract operation(name: string): RikeOperation<IN, OUT>;\n\n    /**\n     * Constructs an operation on this target, which produces responses of the given type.\n     *\n     * @param name operation name.\n     * @param dataType operation data type.\n     */\n    abstract operation<IN, OUT>(name: string, dataType: DataType<IN, OUT>): RikeOperation<IN, OUT>;\n\n    /**\n     * Constructs an operations on this target, which operates on the given data type passing it as JSON over HTTP.\n     *\n     * @param name operation name.\n     *\n     * @return {RikeTarget<T>} new operations target.\n     */\n    json<T>(name: string): RikeOperation<T, T> {\n        return this.operation(name, jsonDataType<T>());\n    }\n\n    /**\n     * Cancels current operation, if any.\n     *\n     * @return `true` if operation cancelled, or `false` if there is no operation to cancel.\n     */\n    abstract cancel(): boolean;\n\n}\n\n//noinspection ReservedWordAsName\n/**\n * REST-like resource operation.\n *\n * It basically mimics the `Http` service interface, but also honors global Rike options, and emits events.\n *\n * To initiate operation just call any of the HTTP access methods. Note that operation always belongs to its target\n * and thus two operations could not be initiated simultaneously.\n *\n * `IN` is a type of requests this operation accepts.\n * `OUT` is a type of responses this operation produces.\n */\nexport abstract class RikeOperation<IN, OUT> {\n\n    /**\n     * Operation target.\n     */\n    abstract readonly target: RikeTarget<any, any>;\n\n    /**\n     * Operation name.\n     */\n    abstract readonly name: string;\n\n    /**\n     * Operation data type.\n     *\n     * This data type is based on the one passed to the [RikeTarget.operation], but also honors the default data type\n     * set for target.\n     */\n    abstract readonly dataType: DataType<IN, OUT>;\n\n    abstract readonly options: RequestOptions;\n\n    abstract withOptions(options?: RequestOptionsArgs): this;\n\n    get url(): string | undefined {\n        return this.options.url;\n    }\n\n    withUrl(url: string): this {\n        return this.withOptions({url});\n    }\n\n    get method(): RequestMethod | undefined {\n\n        const method = this.options.method;\n\n        return method == null ? undefined : requestMethod(method);\n    }\n\n    withMethod(method: string | RequestMethod): this {\n        return this.withOptions({method});\n    }\n\n    abstract load(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract send(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract get(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract post(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract put(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    //noinspection ReservedWordAsName\n    abstract delete(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract patch(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract head(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n}\n\ninterface RikeInternals {\n\n    readonly defaultHttpOptions: RequestOptions;\n\n    wrapResponse(\n        target: RikeTarget<any, any>,\n        operation: RikeOperation<any, any>,\n        response: Observable<Response>): Observable<Response>;\n\n}\n\nclass RikeTargetImpl<IN, OUT> extends RikeTarget<IN, OUT> {\n\n    private readonly _rikeEvents = new EventEmitter<RikeEvent>();\n    private _baseUrl?: string;\n    private _operation?: RikeOperationEvent;\n    private _response?: Observable<Response>;\n    private _observer?: Observer<any>;\n    private _subscr?: Subscription;\n\n    constructor(\n        private _rike: Rike,\n        private _internals: RikeInternals,\n        private _target: any,\n        private _dataType: DataType<IN, OUT>) {\n        super();\n    }\n\n    get rike(): Rike {\n        return this._rike;\n    }\n\n    get target(): any {\n        return this._target;\n    }\n\n    get currentOperation(): RikeOperation<any, any> | undefined {\n        return this._operation && this._operation.operation;\n    }\n\n    get rikeEvents(): EventEmitter<RikeEvent> {\n        return this._rikeEvents;\n    }\n\n    get internals(): RikeInternals {\n        return this._internals;\n    }\n\n    get dataType(): DataType<IN, OUT> {\n        return this._dataType;\n    }\n\n    get baseUrl(): string | undefined {\n        return this._baseUrl;\n    }\n\n    withBaseUrl(url?: string): this {\n        this._baseUrl = url;\n        return this;\n    }\n\n    cancel(): boolean {\n        return this._cancel();\n    }\n\n    private _cancel(cause?: RikeOperationEvent): boolean {\n        if (!this._operation) {\n            return false;\n        }\n\n        this._response = undefined;\n        try {\n            if (this._observer) {\n                try {\n\n                    const cancel = new RikeCancelEvent(this._operation.operation, cause);\n\n                    this._observer.error(cancel);\n                    this._rikeEvents.error(cancel);\n                } catch (e) {\n                    this._rikeEvents.error(new RikeErrorEvent(this._operation.operation, e));\n                    throw e;\n                } finally {\n                    this._operation = undefined;\n                    try {\n                        this._observer.complete();\n                    } finally {\n                        this._observer = undefined;\n                    }\n                }\n            }\n        } finally {\n            if (this._subscr) {\n                this._subscr.unsubscribe();\n                this._subscr = undefined;\n            }\n        }\n\n        return true;\n    }\n\n    operation(name: string, dataType?: DataType<any, any>): RikeOperation<any, any> {\n        return new RikeOperationImpl(\n            this,\n            name,\n            !dataType ? this.dataType : (\n                this.dataType as DataType<any, any> === HTTP_RESPONSE_DATA_TYPE\n                    ? dataType : dataType.prepareRequestWith(options => this.dataType.prepareRequest(options))));\n    }\n\n    startOperation(operation: RikeOperation<any, any>): void {\n\n        const event = new RikeOperationEvent(operation);\n\n        this._cancel(event);\n        this._rikeEvents.emit(event);\n        this._operation = event;\n    }\n\n    wrapResponse<IN, OUT>(operation: RikeOperation<IN, OUT>, response: Observable<Response>): Observable<OUT> {\n        response = this.internals.wrapResponse(this, operation, response);\n        this._response = response;\n        return new Observable<OUT>((responseObserver: Observer<OUT>) => {\n            if (this._response !== response) {\n                return;// Another request already initiated\n            }\n            this._observer = responseObserver;\n            this._subscr = response.subscribe(\n                httpResponse => {\n                    try {\n\n                        const response = operation.dataType.readResponse(httpResponse);\n\n                        responseObserver.next(response);\n                        this._rikeEvents.emit(new RikeSuccessEvent(operation, response));\n                    } catch (e) {\n                        this._rikeEvents.error(new RikeErrorEvent(operation, e));\n                    }\n                },\n                error => {\n                    console.error(\"[\" + this.target + \"] \" + operation.name + \" failed\", error);\n                    try {\n                        responseObserver.error(error);\n                        this._rikeEvents.emit(new RikeErrorEvent(operation, error));\n                    } catch (e) {\n                        this._rikeEvents.error(new RikeErrorEvent(operation, e));\n                    }\n                },\n                () => {\n                    try {\n                        responseObserver.complete();\n                    } catch (e) {\n                        this._rikeEvents.error(new RikeErrorEvent(operation, e));\n                    } finally {\n                        if (this._subscr) {\n                            this._subscr.unsubscribe();\n                            this._subscr = undefined;\n                            this._response = undefined;\n                        }\n                    }\n                });\n        });\n    }\n\n}\n\nclass RikeOperationImpl<IN, OUT> extends RikeOperation<IN, OUT> {\n\n    private _options: RequestOptions;\n\n    constructor(\n        private _target: RikeTargetImpl<any, any>,\n        private _name: string,\n        private _dataType: DataType<IN, OUT>) {\n        super();\n        this._options = _target.internals.defaultHttpOptions.merge();\n    }\n\n    get rike(): Rike {\n        return this.target.rike;\n    }\n\n    get target(): RikeTargetImpl<any, any> {\n        return this._target;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get dataType(): DataType<IN, OUT> {\n        return this._dataType;\n    }\n\n    withOptions(options?: RequestOptionsArgs): this {\n        if (options) {\n            this._options = this._options.merge(options);\n        }\n        return this;\n    }\n\n    get options(): RequestOptions {\n        return this._options;\n    }\n\n    load(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(undefined, url, options);\n            return this.wrapResponse(this.rike.request(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    send(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(undefined, url, options));\n            return this.wrapResponse(this.rike.request(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    get(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(RequestMethod.Get, url, options);\n            return this.wrapResponse(this.rike.get(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    post(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(RequestMethod.Post, url, options));\n            return this.wrapResponse(this.rike.post(this.requestUrl(options), options.body, options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    put(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(RequestMethod.Put, url, options));\n            return this.wrapResponse(this.rike.put(this.requestUrl(options), options.body, options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    //noinspection ReservedWordAsName\n    delete(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(RequestMethod.Delete, url, options);\n            return this.wrapResponse(this.rike.delete(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    patch(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(RequestMethod.Patch, url, options));\n            return this.wrapResponse(this.rike.patch(this.requestUrl(options), options.body, options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    head(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(RequestMethod.Head, url, options);\n            return this.wrapResponse(this.rike.head(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    private startOperation() {\n        this.target.startOperation(this);\n    }\n\n    private requestOptions(method?: RequestMethod, url?: string, options?: RequestOptionsArgs): RequestOptionsArgs {\n        if (!options) {\n            options = {url, method};\n        } else {\n            options = new RequestOptions(options).merge({url, method});\n        }\n\n        options = this.options.merge(options);\n        if (options.url == null) {\n            options.url = this.target.baseUrl;\n        } else {\n            options.url = relativeUrl(this.target.baseUrl, options.url);\n        }\n\n        return this.dataType.prepareRequest(options);\n    }\n\n    private writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs {\n        options = this.dataType.writeRequest(request, options);\n        return options;\n    }\n\n    //noinspection JSMethodCanBeStatic\n    private requestUrl(options: RequestOptionsArgs): string {\n        if (options.url != null) {\n            return options.url;\n        }\n        throw new Error(\"Request URL not specified\");\n    }\n\n    private wrapResponse(response: Observable<Response>): Observable<OUT> {\n        return this.target.wrapResponse(this, response);\n    }\n\n}\n","import {Type} from \"@angular/core\";\nimport {RequestOptions} from \"@angular/http\";\nimport {Observable} from \"rxjs/Rx\";\nimport {DataType, JSON_DATA_TYPE, jsonDataType} from \"./data\";\nimport {RikeEventSource} from \"./event\";\nimport {relativeUrl} from \"./options\";\nimport {RikeTarget, Rike} from \"./rike\";\n\nexport abstract class Resource {\n\n    static provide({provide, useClass, useValue, useExisting, useFactory, deps}: {\n        provide: any,\n        useClass?: Type;\n        useValue?: any;\n        useExisting?: any;\n        useFactory?: Function;\n        deps?: Object[];\n        multi?: boolean;\n    }): any {\n\n        const token = provide || Resource;\n\n        return [\n            {\n                provide: token,\n                useClass,\n                useValue,\n                useExisting,\n                useFactory,\n                deps,\n            },\n            RikeEventSource.provide({\n                useFactory: (resource: Resource) => resource.rikeTarget,\n                deps: [token],\n            })\n        ];\n    }\n\n    abstract readonly rikeTarget: RikeTarget<any, any>;\n\n}\n\nexport abstract class RikeResource implements Resource {\n\n    private _rikeTarget?: RikeTarget<any, any>;\n\n    constructor(private _rike: Rike) {\n    }\n\n    get rike(): Rike {\n        return this._rike;\n    }\n\n    get rikeTarget(): RikeTarget<any, any> {\n        return this.getRikeTarget();\n    }\n\n    getRikeTarget(): RikeTarget<any, any> {\n        return this._rikeTarget || (this._rikeTarget = this.createRikeTarget());\n    }\n\n    protected createRikeTarget(): RikeTarget<any, any> {\n        return this.rike.target(this, JSON_DATA_TYPE);\n    }\n\n}\n\nexport abstract class CRUDResource<T> extends RikeResource {\n\n    constructor(rike: Rike) {\n        super(rike);\n    }\n\n    get rikeTarget(): RikeTarget<T, T> {\n        return this.getRikeTarget();\n    }\n\n    getRikeTarget(): RikeTarget<T, T> {\n        return super.getRikeTarget();\n    }\n\n    create(object: T): Observable<T> {\n        return this.rikeTarget.operation(\"create\", this.objectCreateDataType(object)).post(object);\n    }\n\n    read(id: any): Observable<T> {\n        return this.rikeTarget.operation(\"read\", this.objectReadDataType(id)).get();\n    }\n\n    update(object: T): Observable<T> {\n        return this.rikeTarget.operation(\"update\", this.objectUpdateDataType(object)).put(object);\n    }\n\n    //noinspection ReservedWordAsName\n    delete(object: T): Observable<any> {\n        return this.rikeTarget.operation(\"delete\", this.objectDeleteDataType(object)).delete();\n    }\n\n    protected createRikeTarget(): RikeTarget<T, T> {\n        return this.rike.target(this, jsonDataType<T>());\n    }\n\n    protected objectCreateDataType(object: T): DataType<any, T> {\n        return this.rikeTarget.dataType.readResponseWith(response => object);\n    }\n\n    protected objectReadDataType(id: any): DataType<any, T> {\n        return this.rikeTarget.dataType.prepareRequestWith(\n            options => new RequestOptions(options).merge({\n                url: this.objectUrl(options.url, id)\n            }));\n    }\n\n    protected objectUpdateDataType(object: T): DataType<T, T> {\n        return this.rikeTarget.dataType\n            .updateRequestWith((object, options) => new RequestOptions(options).merge({\n                url: this.objectUrl(options.url, this.objectId(object))\n            }))\n            .readResponseWith(response => object);\n    }\n\n    protected objectDeleteDataType(object: T): DataType<T, any> {\n        return this.rikeTarget.dataType\n            .updateRequestWith((object, options) => new RequestOptions(options).merge({\n                url: this.objectUrl(options.url, this.objectId(object))\n            }))\n            .readResponseWith(response => object)\n    }\n\n    protected abstract objectId(object: T): any;\n\n    //noinspection JSMethodCanBeStatic\n    protected objectUrl(baseUrl: string | undefined, id: any): string {\n        return relativeUrl(baseUrl, id.toString());\n    }\n\n}\n","///<reference types=\"core-js\"/>\nimport {Rike} from \"./ng2-rike/rike\";\nimport {RikeEventSource} from \"./ng2-rike/event\";\nexport * from './ng2-rike/data';\nexport * from './ng2-rike/event';\nexport * from './ng2-rike/options';\nexport * from './ng2-rike/resource';\nexport * from './ng2-rike/rike';\n\n/**\n * Provides a basic set of providers to use REST-like services in application.\n *\n * The `RIKE_PROVIDERS` should be included either in a component's injector, or in the root injector when bootstrapping\n * an application.\n *\n * @type {any[]}\n */\nexport const RIKE_PROVIDERS: any[] = [\n    Rike,\n    RikeEventSource.provide({useExisting: Rike}),\n];\n","import {RequestOptionsArgs, Response, RequestOptions, URLSearchParams, ResponseOptions} from \"@angular/http\";\nimport {DataType} from \"./data\";\n\ninterface In {\n    request: string;\n    update?: string;\n    written?: string;\n}\n\ninterface In2 {\n    request2: string;\n}\n\ninterface Out {\n    response: string;\n}\n\ninterface Out2 {\n    response2: string;\n}\n\nclass TestDataType extends DataType<In, Out> {\n\n    constructor() {\n        super();\n    }\n\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        return new RequestOptions(options).merge({url: \"/request\", search: \"prepared=true\"})\n    }\n\n    writeRequest(request: In, options: RequestOptionsArgs): RequestOptionsArgs {\n        request.written = \"written1\";\n        return new RequestOptions(options).merge({body: request});\n    }\n\n    readResponse(response: Response): Out {\n        return {\n            response: \"response1\"\n        };\n    }\n\n}\n\ndescribe(\"DataType\", () => {\n\n    const dataType = new TestDataType();\n\n    it(\"Request prepared before\", () => {\n\n        const type = dataType.prepareRequestWith(opts => new RequestOptions(opts).merge({search: \"updated=true\"}));\n        const opts = type.prepareRequest({});\n\n        expect(opts.url).toBe(\"/request\");\n        expect(opts.search && opts.search.toString()).toEqual(\"prepared=true\");\n    });\n\n    it(\"Request prepared after\", () => {\n\n        const type = dataType.prepareRequestWith(\n            opts => new RequestOptions(opts).merge({search: \"updated=true\"}),\n            true);\n        const opts = type.prepareRequest({});\n\n        expect(opts.url).toBe(\"/request\");\n        expect(opts.search && opts.search.toString()).toEqual(\"updated=true\");\n    });\n\n    it(\"Request written\", () => {\n\n        const type = dataType.writeRequestWith((request: In2, opts: RequestOptionsArgs) => {\n            return new RequestOptions(opts).merge({body: request.request2});\n        });\n        const opts = type.writeRequest({request2: \"request2\"}, {});\n\n        expect(opts.body).toBe(\"request2\");\n\n    });\n\n    it(\"Request updated before it is written\", () => {\n\n        const type = dataType.updateRequestWith((request, opts) => {\n            request.update = \"update1\";\n            request.written = \"rewritten1\";\n            return new RequestOptions(opts).merge({body: request});\n        });\n        const opts = type.writeRequest({request: \"request1\"}, {});\n        const body = opts.body as In;\n\n        expect(body.request).toBe(\"request1\");\n        expect(body.update).toBe(\"update1\");\n        expect(body.written).toBe(\"written1\");\n    });\n\n    it(\"Request updated after it is written\", () => {\n\n        const type = dataType.updateRequestWith(\n            (request, opts) => {\n                request.update = \"update1\";\n                request.written = \"rewritten1\";\n                return new RequestOptions(opts).merge({body: request});\n            },\n            true);\n        const opts = type.writeRequest({request: \"request1\"}, {});\n        const body = opts.body as In;\n\n        expect(body.request).toBe(\"request1\");\n        expect(body.update).toBe(\"update1\");\n        expect(body.written).toBe(\"rewritten1\");\n    });\n\n    it(\"Response read\", () => {\n\n        const type = dataType.readResponseWith(() => {\n            return {\n                response2: \"response2\"\n            } as Out2\n        });\n        const response = type.readResponse(new Response(new ResponseOptions()));\n\n        expect(response.response2).toBe(\"response2\");\n    });\n});\n","import {\n    Http,\n    ConnectionBackend,\n    HTTP_PROVIDERS,\n    Response,\n    ResponseOptions,\n    RequestOptionsArgs,\n    RequestOptions,\n    RequestMethod\n} from \"@angular/http\";\nimport {addProviders, inject} from \"@angular/core/testing\";\nimport {MockBackend, MockConnection} from \"@angular/http/testing\";\nimport {RIKE_PROVIDERS} from \"../ng2-rike\";\nimport {Rike} from \"./rike\";\nimport {RikeOptions, BaseRikeOptions} from \"./options\";\nimport {HTTP_RESPONSE_DATA_TYPE, JSON_DATA_TYPE, jsonDataType} from \"./data\";\nimport {Observable} from \"rxjs/Rx\";\n\nexport function addRikeProviders() {\n    addProviders([\n        HTTP_PROVIDERS,\n        MockBackend,\n        {\n            provide: ConnectionBackend,\n            useExisting: MockBackend\n        },\n        Http,\n        {\n            provide: RikeOptions,\n            useValue: new BaseRikeOptions({baseUrl: \"/test-root\"})\n        },\n        RIKE_PROVIDERS,\n    ])\n}\n\ndescribe(\"Rike\", () => {\n\n    let rike: Rike;\n    let back: MockBackend;\n\n    beforeEach(() => addRikeProviders());\n\n    beforeEach(inject([MockBackend, Rike], (_be: MockBackend, _rike: Rike) => {\n        back = _be;\n        rike = _rike;\n    }));\n\n    it(\"is initialized\", () => {\n        expect(rike.options.baseUrl).toBe(\"/test-root\");\n    });\n\n    function readRequestTest(\n        method: RequestMethod,\n        read: (rike: Rike) => ((url: string) => Observable<Response>)): (done: () => void) => void {\n        return done => {\n            back.connections.subscribe((connection: MockConnection) => {\n                expect(connection.request.method).toBe(method);\n                expect(connection.request.url).toBe(\"/test-root/request-url\");\n                connection.mockRespond(new Response(new ResponseOptions({\n                    body: \"response1\",\n                })));\n            });\n            read(rike).call(rike, \"request-url\").subscribe((response: Response) => {\n                expect(response.text()).toBe(\"response1\");\n                done();\n            });\n        }\n    }\n\n    it(\"processes GET request\", readRequestTest(RequestMethod.Get, rike => rike.get));\n    it(\"processes DELETE request\", readRequestTest(RequestMethod.Delete, rike => rike.delete));\n    it(\"processes HEAD request\", readRequestTest(RequestMethod.Head, rike => rike.head));\n\n    function sendRequestTest(\n        method: RequestMethod,\n        read: (rike: Rike) => ((url: string, body: any) => Observable<Response>)): (done: () => void) => void {\n        return done => {\n            back.connections.subscribe((connection: MockConnection) => {\n                expect(connection.request.method).toBe(method);\n                expect(connection.request.url).toBe(\"/test-root/send-request-url\");\n                expect(connection.request.text()).toBe(\"request2\");\n                connection.mockRespond(new Response(new ResponseOptions({\n                    body: \"response1\",\n                })));\n            });\n            read(rike).call(rike, \"send-request-url\", \"request2\").subscribe((response: Response) => {\n                expect(response.text()).toBe(\"response1\");\n                done();\n            });\n        }\n    }\n\n    it(\"processes POST request\", sendRequestTest(RequestMethod.Post, rike => rike.post));\n    it(\"processes PUT request\", sendRequestTest(RequestMethod.Put, rike => rike.put));\n    it(\"processes PATCH request\", sendRequestTest(RequestMethod.Patch, rike => rike.patch));\n\n    it(\"processes HTTP error\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            connection.mockError(new Error(\"Response error\"));\n        });\n        rike.get(\"request-url\").subscribe(\n            () => {\n                fail(\"Response received\");\n                done();\n            },\n            (error: Error) => {\n                expect(error.message).toBe(\"Response error\");\n                done();\n            });\n    });\n\n    it(\"creates target of the default type\", () => {\n\n        const targetId = \"target1\";\n        const target = rike.target(targetId);\n\n        expect(target.target).toBe(targetId);\n        expect(target.dataType).toBe(HTTP_RESPONSE_DATA_TYPE);\n    });\n\n    it(\"creates JSON target\", () => {\n\n        const targetId = \"target1\";\n        const target = rike.json(targetId);\n\n        expect(target.target).toBe(targetId);\n        expect(target.dataType).toBe(JSON_DATA_TYPE);\n    });\n\n    it(\"creates target of specified type\", () => {\n\n        const dataType = jsonDataType<string>()\n            .writeRequestWith((val: number, opts: RequestOptionsArgs) =>\n                new RequestOptions(opts).merge({body: JSON.stringify(val)}));\n        const targetId = \"target1\";\n        const target = rike.target(targetId, dataType);\n\n        expect(target.target).toBe(targetId);\n        expect(target.dataType).toBe(dataType);\n    });\n});\n","import {inject} from \"@angular/core/testing\";\nimport {Request, Response, RequestOptionsArgs, RequestOptions} from \"@angular/http\";\nimport {MockBackend} from \"@angular/http/testing\";\nimport {addRikeProviders} from \"./rike.spec\";\nimport {Rike, RikeTarget} from \"./rike\";\nimport {JSON_DATA_TYPE, jsonDataType} from \"./data\";\n\ndescribe(\"RikeTarget\", () => {\n\n    let rike: Rike;\n    let back: MockBackend;\n    let target: RikeTarget<Request, Response>\n\n    beforeEach(() => addRikeProviders());\n\n    beforeEach(inject([MockBackend, Rike], (_be: MockBackend, _rike: Rike) => {\n        back = _be;\n        rike = _rike;\n        target = rike.target(\"target\");\n    }));\n\n    it(\"created\", () => {\n        expect(target.baseUrl).toBeUndefined();\n    });\n\n    it(\"updated with base url\", () => {\n\n        const t = target.withBaseUrl(\"target-url\");\n\n        expect(t).toBe(target);\n        expect(t.baseUrl).toBe(\"target-url\");\n    });\n\n    it(\"creates operation of the target type\", () => {\n\n        const op = target.operation(\"operation1\");\n\n        expect(op.target).toBe(target);\n        expect(op.name).toBe(\"operation1\");\n        expect(op.dataType).toBe(target.dataType);\n    });\n\n    it(\"creates JSON operation\", () => {\n\n        const op = target.json(\"jsonOperation\");\n\n        expect(op.target).toBe(target);\n        expect(op.name).toBe(\"jsonOperation\");\n        expect(op.dataType).toBe(JSON_DATA_TYPE);\n    });\n\n    it(\"creates target of specified type\", () => {\n\n        const dataType = jsonDataType<string>()\n            .writeRequestWith((val: number, opts: RequestOptionsArgs) =>\n                new RequestOptions(opts).merge({body: JSON.stringify(val)}));\n        const op = target.operation(\"customOperation\", dataType);\n\n        expect(op.target).toBe(target);\n        expect(op.name).toBe(\"customOperation\");\n        expect(op.dataType).toBe(dataType);\n    });\n});\n"]}