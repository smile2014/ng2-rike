{"version":3,"file":"ng2-rike.js","sourceRoot":"","sources":["../src/ng2-rike/event.ts","../src/ng2-rike/status-collector.ts","../src/ng2-rike/options.ts","../src/ng2-rike/protocol.ts","../src/ng2-rike/rike.ts","../src/ng2-rike/status.component.ts","../src/ng2-rike/error.ts","../src/ng2-rike/error-collector.ts","../src/ng2-rike/errors.component.ts","../src/ng2-rike/event-source-provider.ts","../src/ng2-rike/resource.ts","../src/ng2-rike/resource-provider.ts","../src/ng2-rike.ts"],"names":[],"mappings":"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","sourcesContent":["import {EventEmitter} from \"@angular/core\";\nimport {RikeTarget, RikeOperation} from \"./rike\";\n\n/**\n * REST-like resource access event emitter.\n *\n * Multiple instances of this class could be injected into controller or service to listen for Rike events.\n *\n * Use [provideEventSource] function to register event sources.\n */\nexport abstract class RikeEventSource {\n\n    /**\n     * Rike events emitter.\n     */\n    abstract readonly rikeEvents: EventEmitter<RikeEvent>;\n\n}\n\n/**\n * Basic REST-like resource access event.\n *\n * Such events are emitted by [Rike event sources][RikeEventsSource].\n */\nexport abstract class RikeEvent {\n\n    /**\n     * Operation target.\n     */\n    get target(): RikeTarget<any, any> {\n        return this.operation.target;\n    }\n\n    /**\n     * Rike operation.\n     */\n    abstract readonly operation: RikeOperation<any, any>;\n\n    /**\n     * Whether an operation is complete.\n     *\n     * `true` on error or successful completion event.\n     */\n    abstract readonly complete: boolean;\n\n    /**\n     * The error occurred.\n     *\n     * `undefined` if this is not an error event.\n     */\n    abstract readonly error?: any;\n\n    /**\n     * Whether this is an operation cancel.\n     *\n     * @return {boolean} `true` if operation cancelled, or `false` otherwise.\n     */\n    get cancel(): boolean {\n        return false;\n    }\n\n    /**\n     * The operation that cancelled this operation.\n     */\n    abstract readonly cancelledBy?: RikeOperationEvent;\n\n    /**\n     * Operation result, if any.\n     */\n    abstract readonly result?: any;\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is started.\n */\nexport class RikeOperationEvent extends RikeEvent {\n\n    constructor(private _operation: RikeOperation<any, any>) {\n        super();\n    }\n\n    get operation(): RikeOperation<any, any> {\n        return this._operation;\n    }\n\n    get complete(): boolean {\n        return false;\n    }\n\n    get error(): undefined {\n        return undefined;\n    }\n\n    get cancelledBy(): undefined {\n        return undefined;\n    }\n\n    get result(): undefined {\n        return undefined;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is successfully completed.\n */\nexport class RikeSuccessEvent extends RikeEvent {\n\n    constructor(private _operation: RikeOperation<any, any>, private _result: any) {\n        super();\n    }\n\n    get operation(): RikeOperation<any, any> {\n        return this._operation;\n    }\n\n    get complete(): boolean {\n        return true;\n    }\n\n    get error(): undefined {\n        return undefined;\n    }\n\n    get cancelledBy(): undefined {\n        return undefined;\n    }\n\n    get result(): any {\n        return this._result;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is failed.\n *\n * An object of this type is also reported as an error when some internal exception occurs.\n */\nexport class RikeErrorEvent extends RikeEvent {\n\n    constructor(private _operation: RikeOperation<any, any>, private _error: any) {\n        super();\n    }\n\n    get operation(): RikeOperation<any, any> {\n        return this._operation;\n    }\n\n    get complete(): boolean {\n        return true;\n    }\n\n    get error(): any {\n        return this._error;\n    }\n\n    get cancelledBy(): RikeOperationEvent | undefined {\n        return undefined;\n    }\n\n    get result(): undefined {\n        return undefined;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is cancelled.\n */\nexport class RikeCancelEvent extends RikeErrorEvent {\n\n    constructor(operation: RikeOperation<any, any>, private _cancelledBy?: RikeOperationEvent) {\n        super(operation, _cancelledBy || \"cancel\");\n    }\n\n    get error(): RikeOperationEvent | undefined {\n        return this.cancelledBy;\n    }\n\n    get cancel(): boolean {\n        return true;\n    }\n\n    get cancelledBy(): RikeOperationEvent | undefined {\n        return this._cancelledBy;\n    }\n\n}\n","import {EventEmitter, Injectable, Optional, Inject} from \"@angular/core\";\nimport {RikeTarget} from \"./rike\";\nimport {RikeEvent, RikeEventSource} from \"./event\";\n\nexport const DEFAULT_STATUS_LABELS: {[operation: string]: StatusLabels<any>} = {\n    \"*\": {\n        processing: \"Processing\",\n        failed: \"Error\",\n        cancelled: \"Cancelled\"\n    },\n    \"load\": {\n        processing: \"Loading\",\n    },\n    \"send\": {\n        processing: \"Sending\",\n        succeed: \"Sent\",\n    },\n    \"read\": {\n        processing: \"Loading\",\n    },\n    \"create\": {\n        processing: \"Creating\",\n        succeed: \"Created\",\n    },\n    \"update\": {\n        processing: \"Updating\",\n        succeed: \"Updated\"\n    },\n    \"delete\": {\n        processing: \"Deleting\",\n        succeed: \"Deleted\",\n    },\n};\n\nexport interface StatusLabels<L> {\n    processing?: L | ((target: RikeTarget<any, any>) => L);\n    failed?: L | ((target: RikeTarget<any, any>) => L);\n    cancelled?: L | ((target: RikeTarget<any, any>) => L);\n    succeed?: L | ((target: RikeTarget<any, any>) => L);\n}\n\n@Injectable()\nexport class StatusCollector<L> {\n\n    private _targetStatuses: {[targetId: string]: TargetStatus} = {};\n    private _labels: {[operation: string]: StatusLabels<L>} = {};\n    private _combined?: CombinedStatus<L>;\n\n    constructor(@Inject(RikeEventSource) @Optional() eventSources?: RikeEventSource[]) {\n        if (eventSources) {\n            for (let esrc of eventSources) {\n                this.subscribeOn(esrc.rikeEvents);\n            }\n        }\n    }\n\n    subscribeOn(events: EventEmitter<RikeEvent>) {\n        events.subscribe((event: RikeEvent) => this.applyEvent(event));\n    }\n\n    withLabels(labels: StatusLabels<L>): this;\n\n    withLabels(operation: string, labels: StatusLabels<L>): this;\n\n    withLabels(operation: string, labels?: StatusLabels<L>): this {\n\n        let id: string;\n\n        if (!labels) {\n            id = \"*\";\n            labels = operation as StatusLabels<L>;\n        } else {\n            id = operation;\n        }\n\n        this._combined = undefined;\n        this._labels[id] = labels;\n\n        return this;\n    }\n\n    get labels(): L[] {\n        return this.combined && this.combined.labels || [];\n    }\n\n    get processing(): boolean {\n        return this.combined && this.combined.processing || false;\n    }\n\n    get failed(): boolean {\n        return this.combined && this.combined.failed || false;\n    }\n\n    get cancelled(): boolean {\n        return this.combined && this.combined.cancelled || false;\n    }\n\n    get succeed(): boolean {\n        return this.combined && this.combined.succeed || false;\n    }\n\n    private get combined(): CombinedStatus<L> | undefined {\n        if (this._combined) {\n            return this._combined;\n        }\n\n        let combined: CombinedStatus<L> | undefined = undefined;\n\n        for (let targetId in this._targetStatuses) {\n            if (this._targetStatuses.hasOwnProperty(targetId)) {\n\n                const targetStatus: TargetStatus = this._targetStatuses[targetId]!;\n\n                if (!targetStatus) {\n                    continue;\n                }\n\n                combined = combineLabels(combined, this.labelFor(targetStatus));\n            }\n        }\n\n        return this._combined = combined;\n    }\n\n    private labelFor(status: TargetStatus): StatusLabel<L> | undefined {\n\n        const operationName = status.start.operation.name;\n        let label = labelOf(status, this._labels[operationName]) || labelOf(status, this._labels[\"*\"]);\n\n        if (label) {\n            return label;\n        }\n\n        const defaultLabels = status.start.target.rike.options.defaultStatusLabels || DEFAULT_STATUS_LABELS;\n\n        return labelOf(status, defaultLabels[operationName]) || labelOf(status, defaultLabels[\"*\"]);\n    }\n\n    private applyEvent(event: RikeEvent) {\n        this._combined = undefined;\n\n        const uniqueId = event.target.uniqueId;\n\n        if (!event.complete) {\n            this._targetStatuses[uniqueId] = {\n                start: event,\n            }\n        } else {\n\n            const targetStatus = this._targetStatuses[uniqueId];\n\n            if (!targetStatus) {\n                this._targetStatuses[uniqueId] = {start: event, end: event};\n            } else {\n                targetStatus.end = event;\n            }\n        }\n    }\n\n}\n\ninterface TargetStatus {\n    start: RikeEvent;\n    end?: RikeEvent;\n}\n\ninterface StatusLabel<L> {\n    label: L;\n    processing?: boolean;\n    failed?: boolean;\n    cancelled?: boolean;\n    succeed?: boolean;\n}\n\ninterface CombinedStatus<L> {\n    targets?: RikeTarget<any, any>;\n    labels: L[];\n    processing?: boolean;\n    failed?: boolean;\n    cancelled?: boolean;\n    succeed?: boolean;\n}\n\nfunction labelOf<L>(status: TargetStatus, labels?: StatusLabels<L>): StatusLabel<L> | undefined {\n    if (!labels) {\n        return undefined;\n    }\n\n    const end = status.end;\n\n    if (!end) {\n        const processing = evalLabel(status, labels.processing);\n        return processing && {label: processing, processing: true};\n    }\n    if (end.cancel) {\n        const cancelled = evalLabel(status, labels.cancelled);\n        return cancelled && {label: cancelled, cancelled: true};\n    }\n    if (end.error) {\n        const failed = evalLabel(status, labels.failed);\n        return failed && {label: failed, failed: true};\n    }\n\n    const succeed = evalLabel(status, labels.succeed);\n    return succeed && {label: succeed, succeed: true};\n}\n\nfunction evalLabel<L>(status: TargetStatus, label?: L | ((target: RikeTarget<any, any>) => L)): L | undefined {\n    if (!label) {\n        return undefined;\n    }\n    if (typeof label !== \"function\") {\n        return label;\n    }\n\n    const labelFn = label as ((target: RikeTarget<any, any>) => L);\n\n    return labelFn(status.start.target);\n}\n\nfunction combineLabels<L> (combined?: CombinedStatus<L>, label?: StatusLabel<L>): CombinedStatus<L> | undefined {\n    if (!label) {\n        return combined;\n    }\n\n    const lbl = label.label;\n\n    if (!combined) {\n        return {\n            labels: [lbl],\n            processing: label.processing,\n            failed: label.failed,\n            cancelled: label.cancelled,\n            succeed: label.succeed,\n        }\n    }\n\n    combined.processing = combined.processing || label.processing;\n    combined.failed = combined.failed || label.failed;\n    combined.cancelled = combined.cancelled || label.cancelled;\n    combined.succeed = combined.succeed || label.succeed;\n\n    for (let l of combined.labels) {\n        if (l === lbl) {\n            return combined;\n        }\n    }\n\n    combined.labels.push(lbl);\n\n    return combined;\n}\n","import {StatusLabels, DEFAULT_STATUS_LABELS} from \"./status-collector\";\n/**\n * Constructs URL relative to base URL.\n *\n * @param baseUrl base URL.\n * @param url URL.\n *\n * @returns {string} If `baseUrl` is not specified, or empty string, or `url` is absolute, then returns unmodified `url`.\n * Otherwise concatenates `baseUrl` and `url` separating them by `/` sign.\n */\nexport function relativeUrl(baseUrl: string | undefined, url: string): string {\n    if (!baseUrl) {\n        return url;\n    }\n    if (url[0] === \"/\") {\n        return url;// Absolute URL\n    }\n    if (url.match(/^(\\w*:)?\\/\\//)) {\n        return url;// Full URL\n    }\n    return baseUrl + \"/\" + url;\n}\n\n/**\n * Global Rike options interface.\n */\nexport interface RikeOptionsArgs {\n\n    /**\n     * Base URL of all relative URLs\n     */\n    readonly baseUrl?: string;\n\n    /**\n     * Default error handler to use, if any.\n     */\n    readonly defaultErrorHandler?: (error: any) => any;\n\n    /**\n     * Rike operation status labels to use by default.\n     */\n    readonly defaultStatusLabels?: {[operation: string]: StatusLabels<any>};\n\n}\n\n/**\n * Global Rike options.\n *\n * To overwrite global options add a provider for [BaseRikeOptions] instance with [RikeOptions] as a key:\n * ```ts\n * bootstrap(AppComponent, {provide: RikeOptions, new BaseRikeOptions({baseDir: \"/rike\"})});\n * ```\n */\nexport abstract class RikeOptions implements RikeOptionsArgs {\n\n    abstract readonly baseUrl?: string;\n\n    abstract readonly defaultErrorHandler?: (error: any) => any;\n\n    abstract defaultStatusLabels?: {[operation: string]: StatusLabels<any>};\n\n    /**\n     * Constructs URL relative to `baseUrl`.\n     *\n     * @param url URL\n     *\n     * @returns {string} resolved URL.\n     */\n    relativeUrl(url: string): string {\n        return relativeUrl(this.baseUrl, url);\n    }\n\n}\n\n/**\n * Basic [global resource options][RikeOptions] implementation.\n *\n * Can be used to override the global resource options.\n */\nexport class BaseRikeOptions extends RikeOptions {\n\n    private _baseUrl?: string;\n    private _defaultErrorHandler?: (error: any) => any;\n    private _defaultStatusLabels = DEFAULT_STATUS_LABELS;\n\n    constructor(opts?: RikeOptionsArgs) {\n        super();\n        if (opts) {\n            this._baseUrl = opts.baseUrl;\n            this._defaultErrorHandler = opts.defaultErrorHandler;\n            if (opts.defaultStatusLabels) {\n                this._defaultStatusLabels = opts.defaultStatusLabels;\n            }\n        }\n    }\n\n    get baseUrl(): string | undefined {\n        return this._baseUrl;\n    }\n\n    get defaultErrorHandler(): ((error: any) => any) | undefined {\n        return this._defaultErrorHandler;\n    }\n\n    get defaultStatusLabels():{[operation: string]: StatusLabels<any>} | undefined {\n        return this._defaultStatusLabels;\n    }\n\n}\n\n/**\n * Default resource options.\n *\n * @type {RikeOptions}\n */\nexport const DEFAULT_RIKE_OPTIONS: RikeOptions = new BaseRikeOptions();\n","import {Response, RequestOptionsArgs, RequestOptions, Headers} from \"@angular/http\";\n\n/**\n * REST-like operations protocol.\n *\n * It is used by REST-like operations to encode operation requests to HTTP, decode operation responses from HTTP,\n * and handle errors.\n *\n * `IN` is operation request type.\n * `OUT` is operation response type.\n */\nexport abstract class Protocol<IN, OUT> {\n\n    //noinspection JSMethodCanBeStatic\n    /**\n     * Prepares HTTP request.\n     *\n     * The `options` passed have at least `url` and `method` fields set.\n     *\n     * This method is called for each HTTP request before _writeRequest_ method. When default protocol is set for\n     * operation target, this method is called first on the default protocol, and then - on the operation protocol.\n     *\n     * @param options original HTTP request options.\n     *\n     * @returns modified HTTP request options to use further instead of original ones. Returns unmodified request\n     * `options` by default.\n     */\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        return options;\n    }\n\n    /**\n     * Writes operation request as HTTP request.\n     *\n     * This method is invoked only for HTTP request methods that expect request body.\n     *\n     * The `options` are the result of `prepareRequest` method invocation. It is expected the result options to\n     * contain a `body` field set.\n     *\n     * @param request operation request to encode\n     * @param options original HTTP request options.\n     *\n     * @return modified HTTP request options that will be used to perform actual request.\n     */\n    abstract writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs;\n\n    /**\n     * Reads operation response from HTTP response.\n     *\n     * @param response HTTP response.\n     *\n     * @returns operation response.\n     */\n    abstract readResponse(response: Response): OUT;\n\n    /**\n     * Handles HTTP error.\n     *\n     * If absent the error is not modified.\n     *\n     * @param error error to handle.\n     *\n     * @returns error processing result.\n     */\n    abstract readonly handleError?: (error: any) => any;\n\n    /**\n     * Creates protocol addon able to prepend protocol actions with specified functions.\n     *\n     * @return {ProtocolAddon<IN, OUT>} protocol addon.\n     */\n    prior(): ProtocolAddon<IN, OUT> {\n        return new CustomProtocolAddon<IN, OUT>(this, true);\n    }\n\n    /**\n     * Creates protocol addon able to append specified functions to protocol actions.\n     *\n     * @return {ProtocolAddon<IN, OUT>} protocol addon.\n     */\n    then(): ProtocolAddon<IN, OUT> {\n        return new CustomProtocolAddon<IN, OUT>(this, false);\n    }\n\n    /**\n     * Creates protocol modifier able to replace protocol actions with specified functions.\n     *\n     * @return {ProtocolMod<IN, OUT>} protocol modifier.\n     */\n    instead(): ProtocolMod<IN, OUT> {\n        return new CustomProtocolMod<IN, OUT>(this);\n    }\n\n}\n\n/**\n * Protocol addon. It is able to construct new protocol based on original one by adding specified actions to original\n * ones.\n */\nexport interface ProtocolAddon<IN, OUT> {\n\n    /**\n     * Constructs new protocol based on this one, which prepares the request with the given function.\n     *\n     * @param prepare a request preparation function invoked in addition to `Protocol.prepareRequest` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    prepareRequest(prepare: (options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which updates request options with the given function.\n     * The request will be written with original `Protocol.writeRequest()` method.\n     *\n     * @param update a function updating request options in addition to `Protocol.writeRequest()` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    updateRequest(update: (request: IN, options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which handles errors with the given function.\n     *\n     * @param handle a function handling errors in addition to `Protocol.handleError()` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    handleError(handle: (error: any) => any): Protocol<IN, OUT>;\n\n}\n\nclass CustomProtocolAddon<IN, OUT> implements ProtocolAddon<IN, OUT> {\n\n    constructor(private _protocol: Protocol<IN, OUT>, private _prior: boolean) {\n    }\n\n    prepareRequest(prepare: (options: RequestOptionsArgs)=>RequestOptionsArgs): Protocol<IN, OUT> {\n\n        const handleError = this._protocol.handleError;\n\n        return new CustomProtocol<IN, OUT>(\n            this._prior\n                ? options => this._protocol.prepareRequest(prepare(options))\n                : options => prepare(this._protocol.prepareRequest(options)),\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            handleError && (error => handleError(error)));\n    }\n\n    updateRequest(update: (request: IN, options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT> {\n\n        const handleError = this._protocol.handleError;\n\n        return new CustomProtocol<IN, OUT>(\n            options => this._protocol.prepareRequest(options),\n            this._prior\n                ? (request, options) => this._protocol.writeRequest(request, update(request, options))\n                : (request, options) => update(request, this._protocol.writeRequest(request, options)),\n            response => this._protocol.readResponse(response),\n            handleError && (error => handleError(error)));\n    }\n\n    handleError(handle: (error: any) => any): Protocol<IN, OUT> {\n\n        const handleError = this._protocol.handleError;\n\n        return new CustomProtocol<IN, OUT>(\n            options => this._protocol.prepareRequest(options),\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            !handleError ? handle : (\n                this._prior\n                    ? error => handleError(handle(error))\n                    : error => handle(handleError(error))));\n    }\n\n}\n\n/**\n * Protocol modifier. It is able to construct new protocol based on original one by replacing protocol actions with\n * specified ones.\n */\nexport interface ProtocolMod<IN, OUT> {\n\n    /**\n     * Constructs new protocol based on original one, which prepares the request with the given function.\n     *\n     * @param prepare a request preparation function invoked instead of `Protocol.prepareRequest` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    prepareRequest(prepare: (options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which writes the request with the given function.\n     *\n     * @param write new request writer function.\n     *\n     * @return {Protocol<I, OUT>} new protocol.\n     */\n    writeRequest<I>(write: (request: I, options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<I, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which reads responses with the given function.\n     *\n     * @param read new response reader function.\n     *\n     * @return {Protocol<IN, O>} new protocol.\n     */\n    readResponse<O>(read: (response: Response) => O): Protocol<IN, O>;\n\n    /**\n     * Constructs new protocol based on original one, which handles errors with the given function.\n     *\n     * @param handle a function handling errors instead of `Protocol.handleError()` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    handleError(handle: (error: any) => any): Protocol<IN, OUT>;\n\n}\n\nclass CustomProtocolMod<IN, OUT> implements ProtocolMod<IN, OUT> {\n\n    constructor(private _protocol: Protocol<IN, OUT>) {\n    }\n\n    prepareRequest(prepare: (options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT> {\n        return new CustomProtocol<IN, OUT>(\n            prepare,\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            this._protocol.handleError);\n    }\n\n    writeRequest<I>(write: (request: I, options: RequestOptionsArgs)=>RequestOptionsArgs): Protocol<I, OUT> {\n        return new CustomProtocol<I, OUT>(\n            options => this._protocol.prepareRequest(options),\n            write,\n            response => this._protocol.readResponse(response),\n            this._protocol.handleError);\n    }\n\n    readResponse<O>(read: (response: Response)=>O): Protocol<IN, O> {\n        return new CustomProtocol<IN, O>(\n            options => this._protocol.prepareRequest(options),\n            (request, options) => this._protocol.writeRequest(request, options),\n            read,\n            this._protocol.handleError);\n    }\n\n    handleError(handle: (error: any)=>any): Protocol<IN, OUT> {\n        return new CustomProtocol<IN, OUT>(\n            options => this._protocol.prepareRequest(options),\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            handle);\n    }\n\n}\n\nclass CustomProtocol<IN, OUT> extends Protocol<IN, OUT> {\n\n    constructor(\n        private _prepareRequest: (options: RequestOptionsArgs) => RequestOptionsArgs,\n        private _writeRequest: (request: IN, options: RequestOptionsArgs) => RequestOptionsArgs,\n        private _readResponse: (response: Response) => OUT,\n        public handleError?: (error: any) => any) {\n        super();\n    }\n\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        return this._prepareRequest(options);\n    }\n\n    writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs {\n        return this._writeRequest(request, options);\n    }\n\n    readResponse(response: Response): OUT {\n        return this._readResponse(response);\n    }\n\n}\n\nclass JsonProtocol<T> extends Protocol<T, T> {\n\n    readonly handleError?: undefined;\n\n    writeRequest(request: T, options: RequestOptionsArgs): RequestOptionsArgs {\n\n        const opts = new RequestOptions(options).merge({body: JSON.stringify(request)});\n\n        let headers: Headers;\n\n        if (opts.headers) {\n            headers = opts.headers;\n        } else {\n            opts.headers = headers = new Headers();\n        }\n        headers.set(\"Content-Type\", \"application/json\");\n\n        return opts;\n    }\n\n    readResponse(response: Response): T {\n        return response.json();\n    }\n\n}\n\n/**\n * JSON protocol.\n *\n * Sends and receives arbitrary data as JSON over HTTP.\n *\n * @type {Protocol<any>}\n */\nexport const JSON_PROTOCOL: Protocol<any, any> = new JsonProtocol<any>();\n\n/**\n * Returns JSON protocol.\n *\n * Sends and receives the data of the given type as JSON over HTTP.\n */\nexport const jsonProtocol: (<T>() => Protocol<T, T>) = () => JSON_PROTOCOL;\n\nclass HttpProtocol extends Protocol<any, Response> {\n\n    readonly handleError?: undefined;\n\n    writeRequest(request: any, options: RequestOptionsArgs): RequestOptionsArgs {\n        return new RequestOptions(options).merge({body: request});\n    }\n\n    readResponse(response: Response): Response {\n        return response;\n    }\n\n}\n\n/**\n * HTTP protocol.\n *\n * The request type is any. It is used as request body.\n *\n * @type {Protocol<any, Response>}\n */\nexport const HTTP_PROTOCOL: Protocol<any, Response> = new HttpProtocol();\n","import {Injectable, Optional, EventEmitter} from \"@angular/core\";\nimport {Request, RequestOptionsArgs, Response, Http, RequestMethod, RequestOptions} from \"@angular/http\";\nimport {Observable, Observer, Subscription} from \"rxjs/Rx\";\nimport {\n    RikeEvent,\n    RikeErrorEvent,\n    RikeSuccessEvent,\n    RikeOperationEvent,\n    RikeCancelEvent,\n    RikeEventSource\n} from \"./event\";\nimport {RikeOptions, DEFAULT_RIKE_OPTIONS, relativeUrl} from \"./options\";\nimport {Protocol, HTTP_PROTOCOL, jsonProtocol} from \"./protocol\";\nimport {StatusLabels, DEFAULT_STATUS_LABELS} from \"./status-collector\";\n\nconst REQUEST_METHODS: {[name: string]: number} = {\n    \"GET\": RequestMethod.Get,\n    \"POST\": RequestMethod.Post,\n    \"PUT\": RequestMethod.Put,\n    \"DELETE\": RequestMethod.Delete,\n    \"OPTIONS\": RequestMethod.Options,\n    \"HEAD\": RequestMethod.Head,\n    \"PATCH\": RequestMethod.Patch,\n};\n\nexport function requestMethod(method: string | RequestMethod): RequestMethod {\n    if (typeof method !== \"string\") {\n        return method;\n    }\n\n    const result = REQUEST_METHODS[method.toUpperCase()];\n\n    if (result != null) {\n        return result;\n    }\n\n    throw new Error(\"Unsupported HTTP request method: \" + method);\n}\n\n/**\n * REST-like resource operations service.\n *\n * This service can be injected to other services or components.\n *\n * It basically mimics the `Http` interface, but also honors [global Rike options][RikeOptions].\n *\n * It can also be used to perform operations on particular targets.\n */\n@Injectable()\nexport class Rike implements RikeEventSource {\n\n    private readonly _options: RikeOptions;\n    private readonly _rikeEvents = new EventEmitter<RikeEvent>();\n    private readonly _internals: RikeInternals;\n    private _uniqueIdSeq = 0;\n\n    constructor(private _http: Http, defaultHttpOptions: RequestOptions, @Optional() _options?: RikeOptions) {\n        this._options = _options || DEFAULT_RIKE_OPTIONS;\n        this._internals = {\n            defaultHttpOptions,\n            generateUniqueId: () => {\n                return \"\" + ++this._uniqueIdSeq;\n            },\n            request: (request: string | Request, options?: RequestOptionsArgs) => {\n                options = this.updateRequestOptions(options);\n                if (typeof request === \"string\") {\n                    request = this.options.relativeUrl(request);\n                }\n                return this._http.request(request, options);\n            },\n            get: (url: string, options?: RequestOptionsArgs) =>\n                this._http.get(\n                    this.options.relativeUrl(url),\n                    this.updateRequestOptions(options)),\n            post: (url: string, body: any, options?: RequestOptionsArgs) =>\n                this._http.post(\n                    this.options.relativeUrl(url),\n                    body,\n                    this.updateRequestOptions(options)),\n            put: (url: string, body: any, options?: RequestOptionsArgs) =>\n                this._http.put(\n                    this.options.relativeUrl(url),\n                    body,\n                    this.updateRequestOptions(options)),\n            \"delete\": (url: string, options?: RequestOptionsArgs) =>\n                this._http.delete(\n                    this.options.relativeUrl(url),\n                    this.updateRequestOptions(options)),\n            patch: (url: string, body: any, options?: RequestOptionsArgs) =>\n                this._http.patch(\n                    this.options.relativeUrl(url),\n                    body,\n                    this.updateRequestOptions(options)),\n            head: (url: string, options?: RequestOptionsArgs) =>\n                this._http.head(\n                    this.options.relativeUrl(url),\n                    this.updateRequestOptions(options)),\n        }\n    }\n\n    /**\n     * Global REST-like resource access options.\n     *\n     * @returns {RikeOptions} either pre-configured, or [default][DEFAULT_RIKE_OPTIONS] options.\n     */\n    get options(): RikeOptions {\n        return this._options;\n    }\n\n    /**\n     * All REST-like resource operation events emitter.\n     *\n     * @returns {EventEmitter<RikeEvent>}\n     */\n    get rikeEvents(): EventEmitter<RikeEvent> {\n        return this._rikeEvents;\n    }\n\n    request(request: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.request(request, options));\n    }\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.get(url, options));\n    }\n\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.post(url, body, options));\n    }\n\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.put(url, body, options));\n    }\n\n    //noinspection ReservedWordAsName\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.delete(url, options));\n    }\n\n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.patch(url, body, options));\n    }\n\n    head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.head(url, options));\n    }\n\n    /**\n     * Constructs operation target which operates over [HTTP protocol][HTTP_PROTOCOL].\n     *\n     * Arbitrary value can be used as a request body.\n     *\n     * @param target arbitrary target value.\n     *\n     * @returns {RikeTarget} new operation target.\n     */\n    target(target: any): RikeTarget<any, Response>;\n\n    /**\n     * Constructs operations target which operates over the given protocol.\n     *\n     * @param target arbitrary target value.\n     * @param protocol operations protocol.\n     *\n     * @return {RikeTarget<IN, OUT>} new operations target.\n     */\n    target<IN, OUT>(target: any, protocol: Protocol<IN, OUT>): RikeTarget<IN, OUT>;\n\n    target(target: any, protocol?: Protocol<any, any>): RikeTarget<any, any> {\n\n        let proto = protocol || HTTP_PROTOCOL;\n\n        if (!proto.handleError) {\n\n            const defaultErrorHandler = this.options.defaultErrorHandler;\n\n            if (defaultErrorHandler) {\n                proto = proto.then().handleError(defaultErrorHandler);\n            }\n        }\n\n        const rikeTarget = new RikeTargetImpl<any, any>(\n            this,\n            this._internals,\n            target,\n            proto || HTTP_PROTOCOL);\n\n        rikeTarget.rikeEvents.subscribe(\n            (event: RikeEvent) => this._rikeEvents.emit(event),\n            (error: any) => this._rikeEvents.error(error),\n            () => this._rikeEvents.complete());\n\n        return rikeTarget;\n    }\n\n    /**\n     * Constructs operations target which operates over [JSON protocol][jsonProtocol].\n     *\n     * @param target arbitrary target value.\n     *\n     * @return {RikeTarget<T>} new operations target.\n     */\n    json<T>(target: any): RikeTarget<T, T> {\n        return this.target(target, jsonProtocol<T>());\n    }\n\n    /**\n     * Updates HTTP request options accordingly to global _options_.\n     *\n     * @param options HTTP request options to update.\n     *\n     * @returns {RequestOptionsArgs} either new HTTP options instance, or the _options_ argument if no modifications\n     * done.\n     */\n    protected updateRequestOptions(options?: RequestOptionsArgs): RequestOptionsArgs | undefined {\n        if (!options) {\n            return options;\n        }\n        if (options.url != null) {\n\n            var newUrl = this._options.relativeUrl(options.url);\n\n            if (newUrl !== options.url) {\n                options = {\n                    url: newUrl,\n                    method: options.method,\n                    search: options.search,\n                    headers: options.headers,\n                    body: options.body,\n                    withCredentials: options.withCredentials,\n                }\n            }\n        }\n\n        return options;\n    }\n\n    //noinspection JSMethodCanBeStatic,JSUnusedLocalSymbols\n    /**\n     * Wraps the HTTP response observable for the given operation to make it handle errors.\n     *\n     * @param response response observer to wrap.\n     *\n     * @returns {Observable<Response>} response observer wrapper.\n     */\n    protected handleErrors(response: Observable<Response>): Observable<Response> {\n\n        const handleError = this.options.defaultErrorHandler;\n\n        if (!handleError) {\n            return response;\n        }\n\n        return new Observable<Response>((responseObserver: Observer<Response>) => {\n            response.subscribe(\n                httpResponse => responseObserver.next(httpResponse),\n                error => responseObserver.error(handleError(error)),\n                () => responseObserver.complete());\n        });\n    }\n\n}\n\n/**\n * REST-like operations target.\n *\n * Operation targets are created using [Rike.target] method. The actual operations should be created first with\n * `operation` method.\n *\n * Only one operation can be performed on a target at a time. Whenever a new operation on the same target is initiated,\n * the previous one is cancelled.\n *\n * `IN` is a request type this target's operations accept by default.\n * `OUT` is a response type this target's operations return by default.\n */\nexport abstract class RikeTarget<IN, OUT> implements RikeEventSource {\n\n    /**\n     * `Rike` service instance.\n     */\n    abstract readonly rike: Rike;\n\n    /**\n     * Operation target value.\n     *\n     * This is the value passed to the [Rike.target] method.\n     */\n    abstract readonly target: any;\n\n    /**\n     * Unique target identifier.\n     */\n    abstract readonly uniqueId: string;\n\n    /**\n     * A currently evaluating operation.\n     *\n     * `undefined` if no operations currently in process, i.e. operation not started, cancelled, or completed, either\n     * successfully or with error.\n     */\n    abstract readonly currentOperation?: RikeOperation<any, any>;\n\n    /**\n     * An emitter of events for operations performed on this target.\n     */\n    abstract readonly rikeEvents: EventEmitter<RikeEvent>;\n\n    /**\n     * An operations protocol to use by default.\n     *\n     * This is a protocol based on the one passed to [Rike.target] method, which honors the default error handler.\n     */\n    abstract readonly protocol: Protocol<IN, OUT>;\n\n    /**\n     * Base URL to use by operations.\n     */\n    abstract readonly baseUrl?: string;\n\n    /**\n     * Assigns base URL to use by operations.\n     *\n     * This URL can be absolute, or relative to the one specified in the [global options][RikeOptions.baseUrl].\n     *\n     * @param url new base URL or `undefined` to reset it.\n     */\n    abstract withBaseUrl(url?: string): this;\n\n    /**\n     * Constructs an operation on this target which operates over the target's `protocol`.\n     *\n     * @param name operation name.\n     *\n     * @return {RikeOperation<IN, OUT>} new operation.\n     */\n    abstract operation(name: string): RikeOperation<IN, OUT>;\n\n    /**\n     * Constructs an operation on this target which operates over the given protocol.\n     *\n     * @param name operation name.\n     * @param protocol operation protocol.\n     *\n     * @return {RikeOperation<IN, OUT>} new operation.\n     */\n    abstract operation<IN, OUT>(name: string, protocol: Protocol<IN, OUT>): RikeOperation<IN, OUT>;\n\n    /**\n     * Constructs JSON operation on this target.\n     *\n     * It operates over [JSON protocol][jsonProtocol].\n     *\n     * @param name operation name.\n     *\n     * @return {RikeOperation<T, T>} new operation.\n     */\n    json<T>(name: string): RikeOperation<T, T> {\n        return this.operation(name, jsonProtocol<T>());\n    }\n\n    /**\n     * Cancels current operation, if any.\n     *\n     * @return `true` if operation cancelled, or `false` if there is no operation to cancel.\n     */\n    abstract cancel(): boolean;\n\n}\n\n//noinspection ReservedWordAsName\n/**\n * REST-like resource operation.\n *\n * It operates over the given protocol and emits events.\n *\n * To initiate operation just call any of the HTTP access methods. Note that operation always belongs to its target\n * and thus two operations could not be initiated simultaneously.\n *\n * `IN` is a type of requests this operation accepts.\n * `OUT` is a type of responses this operation produces.\n */\nexport abstract class RikeOperation<IN, OUT> {\n\n    /**\n     * Operation target.\n     */\n    abstract readonly target: RikeTarget<any, any>;\n\n    /**\n     * Operation name.\n     */\n    abstract readonly name: string;\n\n    /**\n     * Operation protocol.\n     *\n     * This protocol is based on the one passed to the [RikeTarget.operation], but also honors the default protocol\n     * set for target.\n     */\n    abstract readonly protocol: Protocol<IN, OUT>;\n\n    abstract readonly options: RequestOptions;\n\n    abstract withOptions(options?: RequestOptionsArgs): this;\n\n    get url(): string | undefined {\n        return this.options.url;\n    }\n\n    withUrl(url: string): this {\n        return this.withOptions({url});\n    }\n\n    get method(): RequestMethod | undefined {\n\n        const method = this.options.method;\n\n        return method == null ? undefined : requestMethod(method);\n    }\n\n    withMethod(method: string | RequestMethod): this {\n        return this.withOptions({method});\n    }\n\n    abstract load(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract send(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract get(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract post(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract put(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    //noinspection ReservedWordAsName\n    abstract delete(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract patch(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract head(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n}\n\n//noinspection ReservedWordAsName\ninterface RikeInternals {\n\n    readonly defaultHttpOptions: RequestOptions;\n\n    generateUniqueId(): string;\n\n    request(request: string | Request, options?: RequestOptionsArgs): Observable<Response>;\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response>;\n\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\n\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\n\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response>;\n\n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\n\n    head(url: string, options?: RequestOptionsArgs): Observable<Response>;\n\n}\n\nclass RikeTargetImpl<IN, OUT> extends RikeTarget<IN, OUT> {\n\n    private _uniqueId: string;\n    private _rikeEvents = new EventEmitter<RikeEvent>();\n    private _baseUrl?: string;\n    private _operation?: RikeOperationEvent;\n    private _response?: Observable<Response>;\n    private _observer?: Observer<any>;\n    private _subscr?: Subscription;\n\n    constructor(\n        private _rike: Rike,\n        private _internals: RikeInternals,\n        private _target: any,\n        private _protocol: Protocol<IN, OUT>) {\n        super();\n        this._uniqueId = _internals.generateUniqueId();\n    }\n\n    get rike(): Rike {\n        return this._rike;\n    }\n\n    get target(): any {\n        return this._target;\n    }\n\n    get uniqueId(): string {\n        return this._uniqueId;\n    }\n\n    get currentOperation(): RikeOperation<any, any> | undefined {\n        return this._operation && this._operation.operation;\n    }\n\n    get rikeEvents(): EventEmitter<RikeEvent> {\n        return this._rikeEvents;\n    }\n\n    get internals(): RikeInternals {\n        return this._internals;\n    }\n\n    get protocol(): Protocol<IN, OUT> {\n        return this._protocol;\n    }\n\n    get baseUrl(): string | undefined {\n        return this._baseUrl;\n    }\n\n    withBaseUrl(url?: string): this {\n        this._baseUrl = url;\n        return this;\n    }\n\n    cancel(): boolean {\n        return this._cancel();\n    }\n\n    private _cancel(cause?: RikeOperationEvent): boolean {\n        if (!this._operation) {\n            return false;\n        }\n\n        this._response = undefined;\n        try {\n            if (this._observer) {\n                try {\n\n                    const cancel = new RikeCancelEvent(this._operation.operation, cause);\n\n                    this._observer.error(cancel);\n                    this._rikeEvents.error(cancel);\n                } catch (e) {\n                    this._rikeEvents.error(new RikeErrorEvent(this._operation.operation, e));\n                    throw e;\n                } finally {\n                    this._operation = undefined;\n                    try {\n                        this._observer.complete();\n                    } finally {\n                        this._observer = undefined;\n                    }\n                }\n            }\n        } finally {\n            if (this._subscr) {\n                this._subscr.unsubscribe();\n                this._subscr = undefined;\n            }\n        }\n\n        return true;\n    }\n\n    operation(name: string, protocol?: Protocol<any, any>): RikeOperation<any, any> {\n        return new RikeOperationImpl(\n            this,\n            name,\n            !protocol ? this.protocol : (\n                this.protocol as Protocol<any, any> === HTTP_PROTOCOL\n                    ? protocol : protocol.prior().prepareRequest(options => this.protocol.prepareRequest(options))));\n    }\n\n    startOperation(operation: RikeOperation<any, any>): void {\n\n        const event = new RikeOperationEvent(operation);\n\n        this._cancel(event);\n        this._rikeEvents.emit(event);\n        this._operation = event;\n    }\n\n    wrapResponse<IN, OUT>(operation: RikeOperation<IN, OUT>, response: Observable<Response>): Observable<OUT> {\n        this._response = response;\n        return new Observable<OUT>((responseObserver: Observer<OUT>) => {\n            if (this._response !== response) {\n                return;// Another request already initiated\n            }\n            this._observer = responseObserver;\n\n            const cleanup = () => {\n                this._response = undefined;\n                this._operation = undefined;\n                if (this._subscr) {\n                    this._subscr.unsubscribe();\n                    this._subscr = undefined;\n                }\n            };\n\n            this._subscr = response.subscribe(\n                httpResponse => {\n                    try {\n\n                        const response = operation.protocol.readResponse(httpResponse);\n\n                        responseObserver.next(response);\n                        this._rikeEvents.emit(new RikeSuccessEvent(operation, response));\n                    } catch (e) {\n                        this._rikeEvents.error(new RikeErrorEvent(operation, e));\n                    }\n                },\n                error => {\n                    console.error(\"[\" + this.target + \"] \" + operation.name + \" failed\", error);\n                    try {\n                        responseObserver.error(error);\n                        this._rikeEvents.emit(new RikeErrorEvent(operation, error));\n                    } catch (e) {\n                        this._rikeEvents.error(new RikeErrorEvent(operation, e));\n                    } finally {\n                        cleanup();\n                    }\n                },\n                () => {\n                    try {\n                        responseObserver.complete();\n                    } catch (e) {\n                        this._rikeEvents.error(new RikeErrorEvent(operation, e));\n                    } finally {\n                        cleanup();\n                    }\n                });\n        });\n    }\n\n    toString(): string {\n        return \"RikeTarget[\" + this.target + \"]\";\n    }\n\n}\n\nclass RikeOperationImpl<IN, OUT> extends RikeOperation<IN, OUT> {\n\n    private _options: RequestOptions;\n\n    constructor(\n        private _target: RikeTargetImpl<any, any>,\n        private _name: string,\n        private _protocol: Protocol<IN, OUT>) {\n        super();\n        this._options = _target.internals.defaultHttpOptions.merge();\n    }\n\n    get rike(): Rike {\n        return this.target.rike;\n    }\n\n    get internals(): RikeInternals {\n        return this.target.internals;\n    }\n\n    get target(): RikeTargetImpl<any, any> {\n        return this._target;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get protocol(): Protocol<IN, OUT> {\n        return this._protocol;\n    }\n\n    withOptions(options?: RequestOptionsArgs): this {\n        if (options) {\n            this._options = this._options.merge(options);\n        }\n        return this;\n    }\n\n    get options(): RequestOptions {\n        return this._options;\n    }\n\n    load(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(undefined, url, options);\n            return this.wrapResponse(this.internals.request(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    send(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(undefined, url, options));\n            return this.wrapResponse(this.internals.request(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    get(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(RequestMethod.Get, url, options);\n            return this.wrapResponse(this.internals.get(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    post(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(RequestMethod.Post, url, options));\n            return this.wrapResponse(this.internals.post(this.requestUrl(options), options.body, options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    put(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(RequestMethod.Put, url, options));\n            return this.wrapResponse(this.internals.put(this.requestUrl(options), options.body, options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    //noinspection ReservedWordAsName\n    delete(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(RequestMethod.Delete, url, options);\n            return this.wrapResponse(this.internals.delete(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    patch(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(RequestMethod.Patch, url, options));\n            return this.wrapResponse(this.internals.patch(this.requestUrl(options), options.body, options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    head(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(RequestMethod.Head, url, options);\n            return this.wrapResponse(this.internals.head(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.error(new RikeErrorEvent(this, e));\n            throw e;\n        }\n    }\n\n    toString() {\n        return \"RikeOperation[\" + this.name + \"@\" + this.target + \"]\";\n    }\n\n    private startOperation() {\n        this.target.startOperation(this);\n    }\n\n    private requestOptions(method?: RequestMethod, url?: string, options?: RequestOptionsArgs): RequestOptionsArgs {\n        if (!options) {\n            options = {url, method};\n        } else {\n            options = new RequestOptions(options).merge({url, method});\n        }\n\n        options = this.options.merge(options);\n        if (options.url == null) {\n            options.url = this.target.baseUrl;\n        } else {\n            options.url = relativeUrl(this.target.baseUrl, options.url);\n        }\n\n        return this.protocol.prepareRequest(options);\n    }\n\n    private writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs {\n        options = this.protocol.writeRequest(request, options);\n        return options;\n    }\n\n    //noinspection JSMethodCanBeStatic\n    private requestUrl(options: RequestOptionsArgs): string {\n        if (options.url != null) {\n            return options.url;\n        }\n        throw new Error(\"Request URL not specified\");\n    }\n\n    private wrapResponse(response: Observable<Response>): Observable<OUT> {\n        return this.target.wrapResponse(this, response);\n    }\n\n}\n","import {Component, Input} from \"@angular/core\";\nimport {StatusLabels, StatusCollector} from \"./status-collector\";\nimport {RikeEventSource} from \"./event\";\n\n@Component({\n    selector: '[rikeStatus],[rikeStatusLabels],[rikeStatusLabelText]',\n    template: `{{text}}`,\n    host: {\n        '[ngClass]': 'cssClass'\n    }\n})\nexport class RikeStatusComponent<L> {\n\n    private _statusLabels?: StatusLabels<L>;\n    private _rikeStatus?: StatusCollector<L>;\n    private _labelText: (label: L) => string = label => label.toString();\n\n    constructor(private _eventSources: RikeEventSource[]) {\n    }\n\n    get rikeStatus(): StatusCollector<L> {\n        return this._rikeStatus || (this._rikeStatus = this.createStatus());\n    }\n\n    @Input()\n    set rikeStatus(status: StatusCollector<L>) {\n        this._rikeStatus = status;\n    }\n\n    get rikeStatusLabels(): StatusLabels<L> | undefined {\n        return this._statusLabels;\n    }\n\n    @Input()\n    set rikeStatusLabels(labels: StatusLabels<L> | undefined) {\n        this._rikeStatus = undefined;\n        this._statusLabels = labels;\n    }\n\n    get rikeStatusLabelText(): (label: L) => string {\n        return this._labelText;\n    }\n\n    set rikeStatusLabelText(value: (label: L) => string) {\n        this._labelText = value;\n    }\n\n    get cssClass(): any {\n        return {\n            \"rike-status\": true,\n            \"rike-status-processing\": this.rikeStatus.processing,\n            \"rike-status-failed\": this.rikeStatus.failed,\n            \"rike-status-cancelled\": this.rikeStatus.cancelled,\n            \"rike-status-succeed\": this.rikeStatus.succeed,\n        }\n    }\n\n    get text(): string | undefined {\n\n        const labels = this.rikeStatus.labels;\n\n        if (!labels.length) {\n            return undefined;\n        }\n\n        let text = \"\";\n\n        for (let label of labels) {\n\n            const t = this.rikeStatusLabelText(label);\n\n            if (text) {\n                text += \", \";\n            }\n            text += t;\n        }\n        if (this.rikeStatus.processing) {\n            text += \"...\";\n        }\n\n        return text;\n    }\n\n    protected createStatus(): StatusCollector<L> {\n\n        const status = new StatusCollector<L>();\n\n        this.configureStatus(status);\n\n        return status;\n    }\n\n    protected configureStatus(status: StatusCollector<L>) {\n        if (this.rikeStatusLabels) {\n            status.withLabels(this.rikeStatusLabels);\n        }\n        for (let esrc of this._eventSources) {\n            status.subscribeOn(esrc.rikeEvents);\n        }\n    }\n\n}\n","import {Response, ResponseOptions, ResponseType} from \"@angular/http\";\n\n/**\n * Error response options interface.\n */\nexport interface ErrorResponseOpts {\n\n    /**\n     * HTTP response.\n     */\n    readonly response: Response;\n\n    /**\n     * Field errors.\n     */\n    readonly errors: FieldErrors;\n\n}\n\n/**\n * Error response.\n *\n * Any object can be converted to `ErrorResponse` with `toErrorResponse()` function.\n */\nexport class ErrorResponse implements ErrorResponseOpts {\n\n    /**\n     * HTTP response.\n     */\n    readonly response: Response;\n\n    /**\n     * Field errors.\n     */\n    readonly errors: FieldErrors;\n\n    constructor(opts: ErrorResponseOpts) {\n        this.response = opts.response;\n        this.errors = opts.errors;\n    }\n\n}\n\n/**\n * Field errors.\n *\n * Any field of this object is an arrays of errors corresponding to this field. Such array should never be empty.\n *\n * The special case is field named `\"*\"`. It contains errors not related to particular field.\n */\nexport interface FieldErrors {\n    [field: string]: FieldError[];\n}\n\n/**\n * Field error.\n */\nexport interface FieldError {\n\n    /**\n     * Optional error code.\n     */\n    code?: string;\n\n    /**\n     * Error message.\n     */\n    message: string;\n\n}\n\n/**\n * Converts any object to `ErrorResponse`.\n *\n * If the `error` object is already of type `ErrorResponse` then just returns it.\n *\n * This function can be used as a [error handler][Protocol.handleError] to convert HTTP responses.\n *\n * @param error object to convert.\n *\n * @return {ErrorResponse} constructed error response.\n */\nexport function toErrorResponse(error: any): ErrorResponse {\n    if (error instanceof ErrorResponse) {\n        // Error is already of the desired type.\n        return error;\n    }\n    if (error instanceof Response) {\n\n        const response = error;\n        let body: any | undefined = undefined;\n\n        // Attempt to parse JSON body\n        if (response.headers.get(\"Content-Type\") === \"application/json\") {\n            try {\n                body = response.json()\n            } catch (e) {\n                console.log(\"Failed to parse JSON error response\", e);\n            }\n        }\n\n        const fieldErrors = toFieldErrors(body);\n\n        if (fieldErrors) {\n            return new ErrorResponse({\n                response,\n                errors: fieldErrors,\n            });\n        }\n\n        return defaultErrorResponse(response);\n    }\n\n    // Error has `ErrorResponseOpts` interface?\n    const errorOpts = error as ErrorResponseOpts;\n\n    if (errorOpts.response instanceof Response && errorOpts.errors instanceof Array) {\n        return new ErrorResponse(errorOpts);\n    }\n\n    const fieldErrors = toFieldErrors(error);\n\n    if (fieldErrors) {\n        return new ErrorResponse({\n            response: syntheticResponse(null),\n            errors: fieldErrors,\n        });\n    }\n\n    return defaultErrorResponse(syntheticResponse(error));\n}\n\nfunction syntheticResponse(error: any) {\n\n    const statusText = error != null ? error.toString() : null;\n\n    return new Response(new ResponseOptions({\n        type: ResponseType.Error,\n        status: 500,\n        statusText: statusText || \"Unknown error\"\n    }));\n}\n\nfunction defaultErrorResponse(response: Response): ErrorResponse {\n\n    let message = \"ERROR \" + response.status;\n\n    if (response.statusText && response.statusText.toLowerCase() != \"ok\") {\n        message += \": \" + response.statusText;\n    }\n    return new ErrorResponse({\n        response,\n        errors: {\"*\": [{code: \"HTTP\" + response.status, message}]},\n    })\n}\n\nfunction toFieldErrors(data: any): FieldErrors | undefined {\n    if (data == null) {\n        return;\n    }\n    if (data instanceof Array) {\n\n        const fieldErrors = data.map(toFieldError).filter(notEmptyError);\n\n        return fieldErrors.length ? {\"*\": fieldErrors} : undefined;\n    }\n    if (typeof data !== \"object\") {\n\n        const fieldErrors = [{message: data.toString()}].filter(notEmptyError);\n\n        return fieldErrors.length ? {\"*\": fieldErrors} : undefined;\n    }\n\n    const errors = data as FieldErrors;\n    const result: FieldErrors = {};\n    let hasErrors = false;\n\n    for (let field in errors) {\n        if (errors.hasOwnProperty(field)) {\n\n            const errorArray = toFieldErrorArray(errors[field]);\n\n            if (errorArray.length) {\n                result[field] = errorArray;\n                hasErrors = true;\n            }\n        }\n    }\n\n    return hasErrors ? result : undefined;\n}\n\nfunction toFieldErrorArray(data: any): FieldError[] {\n    if (data == null) {\n        return [];\n    }\n    if (data instanceof Array) {\n        return data.map(toFieldError).filter(notEmptyError);\n    }\n    return [toFieldError(data)].filter(notEmptyError);\n}\n\nfunction toFieldError(data: any): FieldError {\n    if (data == null) {\n        return {message: \"\"};\n    }\n\n    const fieldError = data as FieldError;\n\n    if (typeof fieldError.message === \"string\" && (fieldError.code == null || fieldError.code === \"string\")) {\n        return fieldError;\n    }\n    if (fieldError.message != null) {\n        return {\n            code: fieldError.code != null ? fieldError.code.toString() : undefined,\n            message: fieldError.message.toString(),\n        };\n    }\n\n    return {message: fieldError.toString()};\n}\n\nfunction notEmptyError(item?: FieldError): boolean {\n    return !!item && (!!item.message || !!item.code);\n}\n","import {Injectable, EventEmitter, Optional, Inject} from \"@angular/core\";\nimport {AnonymousSubscription} from \"rxjs/Subscription\";\nimport {FieldErrors, FieldError, toErrorResponse} from \"./error\";\nimport {RikeEventSource, RikeEvent, RikeErrorEvent} from \"./event\";\nimport {RikeTarget} from \"./rike\";\n\n/**\n * Field errors subscription.\n *\n * The `unsubscribe()` method should be called to stop receiving error notifications.\n */\nexport interface ErrorSubscription {\n\n    /**\n     * After this method called the error notifications won't be sent to subscriber.\n     *\n     * This method should be called in order to release all resources associated with subscription.\n     */\n    unsubscribe(): void;\n\n    /**\n     * Request field errors to be updated by notifying the subscriber.\n     *\n     * Does nothing after `unsubscribe()` method called.\n     */\n    refresh(): this;\n\n}\n\n/**\n * An error collecting service.\n *\n * It collects errors from all available [Rike event sources][RikeEventSource]. It uses `toFieldErrors()` method\n * to build a `FieldErrors` instance to obtain errors from. Then it notifies all subscribers on when errors received or\n * removed.\n *\n * This service is registered automatically along with every event source by [provideEventSource] method.\n * But unlike event sources it is not a multi-provider.\n *\n * An instance of this class could be created on its own. Then it is necessary to subscribe it on Rike events with\n * `subscribeOn` method.\n */\n@Injectable()\nexport class ErrorCollector {\n\n    private readonly _emitters: {[field: string]: FieldEmitter} = {};\n    private readonly _targetErrors: {[target: string]: TargetErrors} = {};\n    private _initialized = false;\n\n    constructor(@Inject(RikeEventSource) @Optional() private _eventSources?: RikeEventSource[]) {\n    }\n\n    /**\n     * Subscribes this collector on the given Rike events emitter.\n     *\n     * @param events Rike events emitter to subscribe on.\n     */\n    public subscribeOn(events: EventEmitter<RikeEvent>): AnonymousSubscription {\n        return events.subscribe(\n            (event: RikeEvent) => this.handleEvent(event),\n            (error: RikeErrorEvent) => this.handleError(error));\n    }\n\n    /**\n     * Adds subscription for errors corresponding to the given field.\n     *\n     * If the field name is `\"*\"`, then subscriber will be notified on error changes for all fields except those ones\n     * with existing subscriptions.\n     *\n     * @param field target field name.\n     * @param next function that will be called on every target field errors update.\n     * @param error function that will be called on errors.\n     * @param complete function that will be called when no more errors will be reported.\n     *\n     * @return {ErrorSubscription} subscription.\n     */\n    public subscribe(\n        field: string,\n        next: ((errors: FieldErrors) => void),\n        error?: (error: any) => void,\n        complete?: () => void): ErrorSubscription {\n        this.init();\n        return this.fieldEmitter(field).subscribe(next, error, complete);\n    }\n\n    /**\n     * Adds subscription for errors corresponding to all fields except those ones with existing subscriptions.\n     *\n     * Calling this method is the same as calling `subscribe(\"*\", next, error, complete);`.\n     *\n     * @param next function that will be called on every errors update.\n     * @param error function that will be called on errors.\n     * @param complete function that will be called when no more errors will be reported.\n     *\n     * @return {ErrorSubscription} subscription.\n     */\n    public subscribeForRest(\n        next: ((errors: FieldErrors) => void),\n        error?: (error: any) => void,\n        complete?: () => void): ErrorSubscription {\n        return this.subscribe(\"*\", next, error, complete);\n    }\n\n    //noinspection JSMethodCanBeStatic\n    /**\n     * Converts arbitrary error to `FieldErrors`.\n     *\n     * This method uses [toErrorResponse] function by default. Override it if you are using custom error handler.\n     *\n     * @param error arbitrary error passed in [RikeEvent.error] field.\n     *\n     * @return {FieldErrors} field errors.\n     */\n    protected toFieldErrors(error: any): FieldErrors {\n        return toErrorResponse(error).errors;\n    }\n\n    private fieldEmitter(field: string) {\n        return this._emitters[field] || (\n            this._emitters[field] = new FieldEmitter(field, this._emitters, this._targetErrors));\n    }\n\n    private init() {\n        if (this._initialized) {\n            return;\n        }\n\n        this._initialized = true;\n        if (this._eventSources) {\n            for (let src of this._eventSources) {\n                this.subscribeOn(src.rikeEvents);\n            }\n        }\n    }\n\n    private handleEvent(event: RikeEvent) {\n\n        let affectedFields: {[field: string]: any};\n        const error = event.error;\n\n        if (!error) {\n            affectedFields = this.clearTargetErrors(event.target);\n        } else {\n            affectedFields = this.targetErrors(event.target).addAll(this.toFieldErrors(error));\n        }\n\n        for (let field in affectedFields) {\n            if (affectedFields.hasOwnProperty(field)) {\n                this.notify(field);\n            }\n        }\n    }\n\n    private handleError(error: RikeErrorEvent) {\n        this.targetErrors(error.target).add(\"*\", {message: error.error.toString()});\n        this.notify(\"*\");\n    }\n\n    private targetErrors(target: RikeTarget<any, any>): TargetErrors {\n\n        const id = target.uniqueId;\n\n        return this._targetErrors[id] || (this._targetErrors[id] = new TargetErrors(target, this._emitters));\n    }\n\n    private clearTargetErrors(target: RikeTarget<any, any>): {[field: string]: any} {\n\n        const id = target.uniqueId;\n        const targetErrors = this._targetErrors[id];\n\n        if (!targetErrors) {\n            return [];\n        }\n\n        delete this._targetErrors[id];\n\n        return targetErrors.fieldsWithErrors;\n    }\n\n    private notify(field: string) {\n\n        const emitter = this._emitters[field];\n\n        if (emitter) {\n            emitter.notify();\n        }\n    }\n\n}\n\nclass FieldEmitter {\n\n    private _emitter = new EventEmitter<FieldErrors>();\n    private _counter = 0;\n\n    constructor(\n        private _field: string,\n        private _emitters: {[field: string]: FieldEmitter},\n        private _targetErrors: {[target: string]: TargetErrors}) {\n    }\n\n    subscribe(\n        next: ((errors: FieldErrors) => void),\n        error?: (error: any) => void,\n        complete?: () => void): ErrorSubscription {\n\n        const subscr = this._emitter.subscribe(next, error, complete) as AnonymousSubscription;\n\n        this._counter++;\n\n        return new ErrorSubscr(this, subscr).subscribe(next, error, complete);\n    }\n\n    notify(emitter?: EventEmitter<FieldErrors>) {\n\n        const errors: FieldErrors = {};\n\n        for (let id in this._targetErrors) {\n            if (this._targetErrors.hasOwnProperty(id)) {\n                this._targetErrors[id].appendTo(this._field, errors);\n            }\n        }\n\n        (emitter || this._emitter).emit(errors);\n    }\n\n    unsubscribed() {\n        if (!--this._counter) {\n            delete this._emitters[this._field];\n        }\n    }\n\n}\n\nclass ErrorSubscr implements ErrorSubscription {\n\n    private readonly _refreshEmitter = new EventEmitter<FieldErrors>();\n    private _refreshSubscription: AnonymousSubscription;\n\n    constructor(private _fieldEmitter: FieldEmitter, private _subscription?: AnonymousSubscription) {\n    }\n\n    subscribe(\n        next: ((errors: FieldErrors) => void),\n        error?: (error: any) => void,\n        complete?: () => void): this {\n        this._refreshSubscription = this._refreshEmitter.subscribe(next, error, complete);\n        return this;\n    }\n\n    unsubscribe(): void {\n        if (!this._subscription) {\n            return;\n        }\n        try {\n            this._subscription.unsubscribe();\n            this._refreshSubscription.unsubscribe();\n        } finally {\n            delete this._subscription;\n            this._fieldEmitter.unsubscribed();\n        }\n    }\n\n    refresh(): this {\n        if (!this._subscription) {\n            return this;\n        }\n        this._fieldEmitter.notify(this._refreshEmitter);\n        return this;\n    }\n\n}\n\nclass TargetErrors {\n\n    private _errors: FieldErrors;\n\n    constructor(\n        public target: RikeTarget<any, any>,\n        private _emitters: {[field: string]: any},\n        errors?: FieldErrors) {\n        this._errors = errors || {};\n    }\n\n    get fieldsWithErrors(): {[field: string]: any} {\n        return this._errors;\n    }\n\n    add(field: string, ...errors: FieldError[]) {\n\n        const existing = this._errors[field];\n\n        if (!existing) {\n            this._errors[field] = existing;\n        } else {\n            this._errors[field].push(...errors);\n        }\n    }\n\n    addAll(errors: FieldErrors): {[field: string]: any} {\n        for (let field in errors) {\n            if (errors.hasOwnProperty(field)) {\n                this.add(field, ...errors[field]);\n            }\n        }\n        return errors;\n    }\n\n    appendTo(field: string, out: FieldErrors) {\n        if (field !== \"*\") {\n            // Append errors for the given field.\n            appendErrorsTo(field, out, this._errors[field]);\n            return;\n        }\n\n        // Append errors for all fields except the ones with subscribers.\n        for (let f in this._errors) {\n            if (this._errors.hasOwnProperty(f) && !this._emitters[f]) {\n                appendErrorsTo(f, out, this._errors[f]);\n            }\n        }\n    }\n\n}\n\nfunction appendErrorsTo(field: string, fieldErrors: FieldErrors, errors: FieldError[] | undefined) {\n    if (!errors || !errors.length) {\n        return;\n    }\n\n    const errs = fieldErrors[field];\n\n    if (errs) {\n        errs.push(...errors);\n    } else {\n        fieldErrors[field] = errors;\n    }\n}\n","import {Component, Input, OnInit, OnDestroy, Optional} from \"@angular/core\";\nimport {ErrorCollector, ErrorSubscription} from \"./error-collector\";\nimport {FieldErrors, FieldError} from \"./error\";\n\n@Component({\n    selector: '[rikeErrors],[rikeErrorsField]',\n    template:\n    `\n    <ul class=\"rike-error-list\" *ngIf=\"errors.length\">\n        <li class=\"rike-error\" *ngFor=\"let error of errors\">{{error.message}}</li>\n    </ul>\n    `,\n    host: {\n        \"[class.rike-errors]\": \"true\"\n    }\n})\nexport class RikeErrorsComponent implements OnInit, OnDestroy {\n\n    private _rikeErrorsField = \"*\";\n    private _errors: FieldError[] = [];\n    private _init = false;\n    private _subscription?: ErrorSubscription;\n\n    constructor(@Optional() private _collector?: ErrorCollector) {\n    }\n\n    get rikeErrorsField(): string {\n        return this._rikeErrorsField;\n    }\n\n    @Input()\n    set rikeErrorsField(field: string) {\n        if (this._rikeErrorsField === field) {\n            return;\n        }\n        this._rikeErrorsField = field;\n        if (this._init) {\n            this.unsubscribe();\n            this.subscribe();\n        }\n    }\n\n    get rikeErrors(): ErrorCollector {\n        return this._collector || (this._collector = this.createCollector());\n    }\n\n    @Input()\n    set rikeErrors(collector: ErrorCollector) {\n        this._collector = collector;\n    }\n\n    get errors(): FieldError[] {\n        return this._errors;\n    }\n\n    ngOnInit() {\n        this._init = true;\n        this.subscribe();\n    }\n\n    ngOnDestroy() {\n        this._init = false;\n        this.unsubscribe();\n    }\n\n    //noinspection JSMethodCanBeStatic\n    protected createCollector(): ErrorCollector {\n        return new ErrorCollector();\n    }\n\n    protected updateErrors(errors: FieldErrors) {\n\n        const list: FieldError[] = [];\n\n        for (let field in errors) {\n            if (errors.hasOwnProperty(field)) {\n                list.push(...errors[field]);\n            }\n        }\n\n        this._errors = list;\n    }\n\n    private subscribe() {\n        if (this.rikeErrorsField) {\n            this._subscription =\n                this.rikeErrors.subscribe(this.rikeErrorsField, errors => this.updateErrors(errors)).refresh();\n        }\n    }\n\n    private unsubscribe() {\n        this._errors = [];\n\n        const subscription = this._subscription;\n\n        if (subscription) {\n            delete this._subscription;\n            subscription.unsubscribe();\n        }\n    }\n\n}\n","import {Type} from \"@angular/core\";\nimport {RikeEventSource} from \"./event\";\nimport {StatusCollector} from \"./status-collector\";\nimport {ErrorCollector} from \"./error-collector\";\n\n/**\n * Constructs provider recipe for [RikeEventSource]\n *\n * @param useClass\n * @param useValue\n * @param useExisting\n * @param useFactory\n * @param deps\n *\n * @return new provider recipe.\n */\nexport function provideEventSource({useClass, useValue, useExisting, useFactory, deps}: {\n    useClass?: Type;\n    useValue?: any;\n    useExisting?: any;\n    useFactory?: Function;\n    deps?: Object[];\n    multi?: boolean;\n}): any[] {\n    return [\n        StatusCollector,\n        ErrorCollector,\n        {\n            provide: RikeEventSource,\n            multi: true,\n            useClass,\n            useValue,\n            useExisting,\n            useFactory,\n            deps,\n        },\n    ];\n};\n","import {RequestOptions} from \"@angular/http\";\nimport {Observable} from \"rxjs/Rx\";\nimport {Protocol, JSON_PROTOCOL, jsonProtocol} from \"./protocol\";\nimport {relativeUrl} from \"./options\";\nimport {RikeTarget, Rike} from \"./rike\";\n\nexport abstract class Resource {\n\n    abstract readonly rikeTarget: RikeTarget<any, any>;\n\n}\n\nexport abstract class RikeResource implements Resource {\n\n    private _rikeTarget?: RikeTarget<any, any>;\n\n    constructor(private _rike: Rike) {\n    }\n\n    get rike(): Rike {\n        return this._rike;\n    }\n\n    get rikeTarget(): RikeTarget<any, any> {\n        return this.getRikeTarget();\n    }\n\n    getRikeTarget(): RikeTarget<any, any> {\n        return this._rikeTarget || (this._rikeTarget = this.createRikeTarget());\n    }\n\n    protected createRikeTarget(): RikeTarget<any, any> {\n        return this.rike.target(this, JSON_PROTOCOL);\n    }\n\n}\n\nexport abstract class CRUDResource<T> extends RikeResource {\n\n    constructor(rike: Rike) {\n        super(rike);\n    }\n\n    get rikeTarget(): RikeTarget<T, T> {\n        return this.getRikeTarget();\n    }\n\n    getRikeTarget(): RikeTarget<T, T> {\n        return super.getRikeTarget();\n    }\n\n    create(object: T): Observable<T> {\n        return this.rikeTarget.operation(\"create\", this.objectCreateProtocol(object)).post(object);\n    }\n\n    read(id: any): Observable<T> {\n        return this.rikeTarget.operation(\"read\", this.objectReadProtocol(id)).get();\n    }\n\n    update(object: T): Observable<T> {\n        return this.rikeTarget.operation(\"update\", this.objectUpdateProtocol(object)).put(object);\n    }\n\n    //noinspection ReservedWordAsName\n    delete(object: T): Observable<any> {\n        return this.rikeTarget.operation(\"delete\", this.objectDeleteProtocol(object)).delete();\n    }\n\n    protected createRikeTarget(): RikeTarget<T, T> {\n        return this.rike.target(this, jsonProtocol<T>());\n    }\n\n    protected objectCreateProtocol(object: T): Protocol<any, T> {\n        return this.rikeTarget.protocol.instead().readResponse(response => object);\n    }\n\n    protected objectReadProtocol(id: any): Protocol<any, T> {\n        return this.rikeTarget.protocol.prior().prepareRequest(\n            options => new RequestOptions(options).merge({\n                url: this.objectUrl(options.url, id)\n            }));\n    }\n\n    protected objectUpdateProtocol(object: T): Protocol<T, T> {\n        return this.rikeTarget.protocol\n            .prior()\n            .updateRequest((object, options) => new RequestOptions(options).merge({\n                url: this.objectUrl(options.url, this.objectId(object))\n            }))\n            .instead()\n            .readResponse(response => object);\n    }\n\n    protected objectDeleteProtocol(object: T): Protocol<T, any> {\n        return this.rikeTarget.protocol\n            .prior()\n            .updateRequest((object, options) => new RequestOptions(options).merge({\n                url: this.objectUrl(options.url, this.objectId(object))\n            }))\n            .instead()\n            .readResponse(response => object)\n    }\n\n    protected abstract objectId(object: T): any;\n\n    //noinspection JSMethodCanBeStatic\n    protected objectUrl(baseUrl: string | undefined, id: any): string {\n        return relativeUrl(baseUrl, id.toString());\n    }\n\n}\n","import {Type} from \"@angular/core\";\nimport {Resource} from \"./resource\";\nimport {provideEventSource} from \"./event-source-provider\";\n\nexport function provideResource({provide, useClass, useValue, useExisting, useFactory, deps}: {\n    provide: any,\n    useClass?: Type;\n    useValue?: any;\n    useExisting?: any;\n    useFactory?: Function;\n    deps?: Object[];\n    multi?: boolean;\n}): any {\n\n    const token = provide || Resource;\n\n    return [\n        {\n            provide: token,\n            useClass,\n            useValue,\n            useExisting,\n            useFactory,\n            deps,\n        },\n        provideEventSource({\n            useFactory: (resource: Resource) => resource.rikeTarget,\n            deps: [token],\n        })\n    ];\n}\n","///<reference types=\"core-js\"/>\nimport {PLATFORM_DIRECTIVES} from \"@angular/core\";\nimport {Rike} from \"./ng2-rike/rike\";\nimport {RikeEventSource} from \"./ng2-rike/event\";\nimport {RikeStatusComponent} from \"./ng2-rike/status.component\";\nimport {RikeErrorsComponent} from \"./ng2-rike/errors.component\";\nimport {provideEventSource} from \"./ng2-rike/event-source-provider\";\n\nexport * from \"./ng2-rike/error\";\nexport * from \"./ng2-rike/error-collector\";\nexport * from \"./ng2-rike/errors.component\";\nexport * from \"./ng2-rike/event\";\nexport * from \"./ng2-rike/event-source-provider\";\nexport * from \"./ng2-rike/options\";\nexport * from \"./ng2-rike/protocol\";\nexport * from \"./ng2-rike/resource\";\nexport * from \"./ng2-rike/resource-provider\";\nexport * from \"./ng2-rike/rike\";\nexport * from \"./ng2-rike/status-collector\";\nexport * from \"./ng2-rike/status.component\";\n\n/**\n * Provides a basic set of providers to use REST-like services in application.\n *\n * The `RIKE_PROVIDERS` should be included either in a component's injector, or in the root injector when bootstrapping\n * an application.\n *\n * @type {any[]}\n */\nexport const RIKE_PROVIDERS: any[] = [\n    Rike,\n    provideEventSource({useExisting: Rike}),\n    {\n        provide: PLATFORM_DIRECTIVES,\n        useValue: RikeStatusComponent,\n        multi: true,\n    },\n    {\n        provide: PLATFORM_DIRECTIVES,\n        useValue: RikeErrorsComponent,\n        multi: true,\n    }\n];\n"]}